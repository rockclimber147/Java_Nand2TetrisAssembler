   ROM    | Address  |  Source
    0     |   256    |  @256
    1     |          |  D=A
    2     |    0     |  @0
    3     |          |  M=D
    4     |    1     |  @1
    5     |          |  MD=-1
    6     |    2     |  @2
    7     |          |  MD=D-1
    8     |    3     |  @3
    9     |          |  MD=D-1
    10    |    4     |  @4
    11    |          |  MD=D-1
    12    | RAM[60]  |  @Sys.init$ret.0
    13    |          |  D=A
    14    |    0     |  @0
    15    |          |  A=M
    16    |          |  M=D
    17    |    0     |  @0
    18    |          |  M=M+1
    19    |    1     |  @1
    20    |          |  D=M
    21    |    0     |  @0
    22    |          |  A=M
    23    |          |  M=D
    24    |    0     |  @0
    25    |          |  M=M+1
    26    |    2     |  @2
    27    |          |  D=M
    28    |    0     |  @0
    29    |          |  A=M
    30    |          |  M=D
    31    |    0     |  @0
    32    |          |  M=M+1
    33    |    3     |  @3
    34    |          |  D=M
    35    |    0     |  @0
    36    |          |  A=M
    37    |          |  M=D
    38    |    0     |  @0
    39    |          |  M=M+1
    40    |    4     |  @4
    41    |          |  D=M
    42    |    0     |  @0
    43    |          |  A=M
    44    |          |  M=D
    45    |    0     |  @0
    46    |          |  M=M+1
    47    |    0     |  @0
    48    |          |  D=M
    49    |    2     |  @2
    50    |          |  M=D
    51    |    5     |  @5
    52    |          |  D=A
    53    |    2     |  @2
    54    |          |  M=M-D
    55    |    0     |  @0
    56    |          |  D=M
    57    |    1     |  @1
    58    |          |  M=D
    59    | RAM[16]  |  @Sys.init
    60    |          |  0;JMP
    61    | ROM[60]  |  (Sys.init$ret.0)
          |          |        // /**
          |          |        // * A graphical ball. Characterized by a screen location and distance of
          |          |        // * last destination. Has methods for drawing, erasing and moving on the screen.
          |          |        // * The ball is displayed as a filled, 6-by-6 pixles rectangle.
          |          |        // *//** Constructs a new ball with the given initial location and wall locations. *//*
          |          |        // FIELD  int     x          -> this     0
          |          |        // FIELD  int     y          -> this     1
          |          |        // FIELD  int     lengthx    -> this     2
          |          |        // FIELD  int     lengthy    -> this     3
          |          |        // FIELD  int     d          -> this     4
          |          |        // FIELD  int     straightD  -> this     5
          |          |        // FIELD  int     diagonalD  -> this     6
          |          |        // FIELD  boolean invert     -> this     7
          |          |        // FIELD  boolean positivex  -> this     8
          |          |        // FIELD  boolean positivey  -> this     9
          |          |        // FIELD  int     leftWall   -> this     10
          |          |        // FIELD  int     rightWall  -> this     11
          |          |        // FIELD  int     topWall    -> this     12
          |          |        // FIELD  int     bottomWall -> this     13
          |          |        // FIELD  int     wall       -> this     14
          |          |        // */
          |          |        // 
          |          |        // function Ball.new 0
    61    | ROM[60]  |  (Ball.new)
    61    |    0     |  @0
    62    |          |  D=M
    63    |    1     |  @1
    64    |          |  M=D
          |          |        // /*
          |          |        // ARG    int Ax          -> argument 0
          |          |        // ARG    int Ay          -> argument 1
          |          |        // ARG    int AleftWall   -> argument 2
          |          |        // ARG    int ArightWall  -> argument 3
          |          |        // ARG    int AtopWall    -> argument 4
          |          |        // ARG    int AbottomWall -> argument 5
          |          |        // */
          |          |        // push constant 15
    65    |    15    |  @15
    66    |          |  D=A
    67    |    0     |  @0
    68    |          |  A=M
    69    |          |  M=D
    70    |    0     |  @0
    71    |          |  M=M+1
          |          |        // call Memory.alloc 1
    72    | RAM[120] |  @Memory.alloc$ret.1
    73    |          |  D=A
    74    |    0     |  @0
    75    |          |  A=M
    76    |          |  M=D
    77    |    0     |  @0
    78    |          |  M=M+1
    79    |    1     |  @1
    80    |          |  D=M
    81    |    0     |  @0
    82    |          |  A=M
    83    |          |  M=D
    84    |    0     |  @0
    85    |          |  M=M+1
    86    |    2     |  @2
    87    |          |  D=M
    88    |    0     |  @0
    89    |          |  A=M
    90    |          |  M=D
    91    |    0     |  @0
    92    |          |  M=M+1
    93    |    3     |  @3
    94    |          |  D=M
    95    |    0     |  @0
    96    |          |  A=M
    97    |          |  M=D
    98    |    0     |  @0
    99    |          |  M=M+1
   100    |    4     |  @4
   101    |          |  D=M
   102    |    0     |  @0
   103    |          |  A=M
   104    |          |  M=D
   105    |    0     |  @0
   106    |          |  M=M+1
   107    |    0     |  @0
   108    |          |  D=M
   109    |    2     |  @2
   110    |          |  M=D
   111    |    6     |  @6
   112    |          |  D=A
   113    |    2     |  @2
   114    |          |  M=M-D
   115    |    0     |  @0
   116    |          |  D=M
   117    |    1     |  @1
   118    |          |  M=D
   119    | RAM[17]  |  @Memory.alloc
   120    |          |  0;JMP
   121    | ROM[120] |  (Memory.alloc$ret.1)
          |          |        // pop pointer 0
   121    |    0     |  @0
   122    |          |  AM=M-1
   123    |          |  D=M
   124    |    3     |  @3
   125    |          |  M=D
          |          |        // push argument 0
   126    |    0     |  @0
   127    |          |  D=A
   128    |    2     |  @2
   129    |          |  A=M
   130    |          |  A=A+D
   131    |          |  D=M
   132    |    0     |  @0
   133    |          |  A=M
   134    |          |  M=D
   135    |    0     |  @0
   136    |          |  M=M+1
          |          |        // pop this 0
   137    |    0     |  @0
   138    |          |  D=A
   139    |    3     |  @3
   140    |          |  D=D+M
   141    | RAM[13]  |  @R13
   142    |          |  M=D
   143    |    0     |  @0
   144    |          |  AM=M-1
   145    |          |  D=M
   146    | RAM[13]  |  @R13
   147    |          |  A=M
   148    |          |  M=D
          |          |        // push argument 1
   149    |    1     |  @1
   150    |          |  D=A
   151    |    2     |  @2
   152    |          |  A=M
   153    |          |  A=A+D
   154    |          |  D=M
   155    |    0     |  @0
   156    |          |  A=M
   157    |          |  M=D
   158    |    0     |  @0
   159    |          |  M=M+1
          |          |        // pop this 1
   160    |    1     |  @1
   161    |          |  D=A
   162    |    3     |  @3
   163    |          |  D=D+M
   164    | RAM[13]  |  @R13
   165    |          |  M=D
   166    |    0     |  @0
   167    |          |  AM=M-1
   168    |          |  D=M
   169    | RAM[13]  |  @R13
   170    |          |  A=M
   171    |          |  M=D
          |          |        // push argument 2
   172    |    2     |  @2
   173    |          |  D=A
   174    |    2     |  @2
   175    |          |  A=M
   176    |          |  A=A+D
   177    |          |  D=M
   178    |    0     |  @0
   179    |          |  A=M
   180    |          |  M=D
   181    |    0     |  @0
   182    |          |  M=M+1
          |          |        // pop this 10
   183    |    10    |  @10
   184    |          |  D=A
   185    |    3     |  @3
   186    |          |  D=D+M
   187    | RAM[13]  |  @R13
   188    |          |  M=D
   189    |    0     |  @0
   190    |          |  AM=M-1
   191    |          |  D=M
   192    | RAM[13]  |  @R13
   193    |          |  A=M
   194    |          |  M=D
          |          |        // push argument 3
   195    |    3     |  @3
   196    |          |  D=A
   197    |    2     |  @2
   198    |          |  A=M
   199    |          |  A=A+D
   200    |          |  D=M
   201    |    0     |  @0
   202    |          |  A=M
   203    |          |  M=D
   204    |    0     |  @0
   205    |          |  M=M+1
          |          |        // push constant 6
   206    |    6     |  @6
   207    |          |  D=A
   208    |    0     |  @0
   209    |          |  A=M
   210    |          |  M=D
   211    |    0     |  @0
   212    |          |  M=M+1
          |          |        // sub
   213    |    0     |  @0
   214    |          |  AM=M-1
   215    |          |  D=M
   216    |          |  A=A-1
   217    |          |  M=M-D
          |          |        // pop this 11
   218    |    11    |  @11
   219    |          |  D=A
   220    |    3     |  @3
   221    |          |  D=D+M
   222    | RAM[13]  |  @R13
   223    |          |  M=D
   224    |    0     |  @0
   225    |          |  AM=M-1
   226    |          |  D=M
   227    | RAM[13]  |  @R13
   228    |          |  A=M
   229    |          |  M=D
          |          |        // push argument 4
   230    |    4     |  @4
   231    |          |  D=A
   232    |    2     |  @2
   233    |          |  A=M
   234    |          |  A=A+D
   235    |          |  D=M
   236    |    0     |  @0
   237    |          |  A=M
   238    |          |  M=D
   239    |    0     |  @0
   240    |          |  M=M+1
          |          |        // pop this 12
   241    |    12    |  @12
   242    |          |  D=A
   243    |    3     |  @3
   244    |          |  D=D+M
   245    | RAM[13]  |  @R13
   246    |          |  M=D
   247    |    0     |  @0
   248    |          |  AM=M-1
   249    |          |  D=M
   250    | RAM[13]  |  @R13
   251    |          |  A=M
   252    |          |  M=D
          |          |        // push argument 5
   253    |    5     |  @5
   254    |          |  D=A
   255    |    2     |  @2
   256    |          |  A=M
   257    |          |  A=A+D
   258    |          |  D=M
   259    |    0     |  @0
   260    |          |  A=M
   261    |          |  M=D
   262    |    0     |  @0
   263    |          |  M=M+1
          |          |        // push constant 6
   264    |    6     |  @6
   265    |          |  D=A
   266    |    0     |  @0
   267    |          |  A=M
   268    |          |  M=D
   269    |    0     |  @0
   270    |          |  M=M+1
          |          |        // sub
   271    |    0     |  @0
   272    |          |  AM=M-1
   273    |          |  D=M
   274    |          |  A=A-1
   275    |          |  M=M-D
          |          |        // pop this 13
   276    |    13    |  @13
   277    |          |  D=A
   278    |    3     |  @3
   279    |          |  D=D+M
   280    | RAM[13]  |  @R13
   281    |          |  M=D
   282    |    0     |  @0
   283    |          |  AM=M-1
   284    |          |  D=M
   285    | RAM[13]  |  @R13
   286    |          |  A=M
   287    |          |  M=D
          |          |        // push constant 0
   288    |    0     |  @0
   289    |          |  D=A
   290    |    0     |  @0
   291    |          |  A=M
   292    |          |  M=D
   293    |    0     |  @0
   294    |          |  M=M+1
          |          |        // pop this 14
   295    |    14    |  @14
   296    |          |  D=A
   297    |    3     |  @3
   298    |          |  D=D+M
   299    | RAM[13]  |  @R13
   300    |          |  M=D
   301    |    0     |  @0
   302    |          |  AM=M-1
   303    |          |  D=M
   304    | RAM[13]  |  @R13
   305    |          |  A=M
   306    |          |  M=D
          |          |        // push pointer 0
   307    |    3     |  @3
   308    |          |  D=M
   309    |    0     |  @0
   310    |          |  A=M
   311    |          |  M=D
   312    |    0     |  @0
   313    |          |  M=M+1
          |          |        // call Ball.show 1
   314    | RAM[362] |  @Ball.show$ret.2
   315    |          |  D=A
   316    |    0     |  @0
   317    |          |  A=M
   318    |          |  M=D
   319    |    0     |  @0
   320    |          |  M=M+1
   321    |    1     |  @1
   322    |          |  D=M
   323    |    0     |  @0
   324    |          |  A=M
   325    |          |  M=D
   326    |    0     |  @0
   327    |          |  M=M+1
   328    |    2     |  @2
   329    |          |  D=M
   330    |    0     |  @0
   331    |          |  A=M
   332    |          |  M=D
   333    |    0     |  @0
   334    |          |  M=M+1
   335    |    3     |  @3
   336    |          |  D=M
   337    |    0     |  @0
   338    |          |  A=M
   339    |          |  M=D
   340    |    0     |  @0
   341    |          |  M=M+1
   342    |    4     |  @4
   343    |          |  D=M
   344    |    0     |  @0
   345    |          |  A=M
   346    |          |  M=D
   347    |    0     |  @0
   348    |          |  M=M+1
   349    |    0     |  @0
   350    |          |  D=M
   351    |    2     |  @2
   352    |          |  M=D
   353    |    6     |  @6
   354    |          |  D=A
   355    |    2     |  @2
   356    |          |  M=M-D
   357    |    0     |  @0
   358    |          |  D=M
   359    |    1     |  @1
   360    |          |  M=D
   361    | RAM[574] |  @Ball.show
   362    |          |  0;JMP
   363    | ROM[362] |  (Ball.show$ret.2)
          |          |        // pop temp 0
   363    |    0     |  @0
   364    |          |  D=A
   365    |    5     |  @5
   366    |          |  D=D+A
   367    | RAM[13]  |  @R13
   368    |          |  M=D
   369    |    0     |  @0
   370    |          |  AM=M-1
   371    |          |  D=M
   372    | RAM[13]  |  @R13
   373    |          |  A=M
   374    |          |  M=D
          |          |        // push pointer 0
   375    |    3     |  @3
   376    |          |  D=M
   377    |    0     |  @0
   378    |          |  A=M
   379    |          |  M=D
   380    |    0     |  @0
   381    |          |  M=M+1
          |          |        // return
   382    |    1     |  @1
   383    |          |  D=M
   384    |    13    |  @13
   385    |          |  M=D
   386    |    5     |  @5
   387    |          |  D=A
   388    |    13    |  @13
   389    |          |  D=M-D
   390    |          |  A=D
   391    |          |  D=M
   392    |    14    |  @14
   393    |          |  M=D
   394    |    0     |  @0
   395    |          |  AM=M-1
   396    |          |  D=M
   397    |    2     |  @2
   398    |          |  A=M
   399    |          |  M=D
   400    |    2     |  @2
   401    |          |  D=M+1
   402    |    0     |  @0
   403    |          |  M=D
   404    |    13    |  @13
   405    |          |  M=M-1
   406    |          |  A=M
   407    |          |  D=M
   408    |    4     |  @4
   409    |          |  M=D
   410    |    13    |  @13
   411    |          |  M=M-1
   412    |          |  A=M
   413    |          |  D=M
   414    |    3     |  @3
   415    |          |  M=D
   416    |    13    |  @13
   417    |          |  M=M-1
   418    |          |  A=M
   419    |          |  D=M
   420    |    2     |  @2
   421    |          |  M=D
   422    |    13    |  @13
   423    |          |  M=M-1
   424    |          |  A=M
   425    |          |  D=M
   426    |    1     |  @1
   427    |          |  M=D
   428    |    14    |  @14
   429    |          |  A=M
   430    |          |  0;JMP
          |          |        // /** Deallocates the Ball's memory. */
          |          |        // function Ball.dispose 0
   431    | ROM[430] |  (Ball.dispose)
   431    |    0     |  @0
   432    |          |  D=M
   433    |    1     |  @1
   434    |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   435    |    0     |  @0
   436    |          |  D=A
   437    |    2     |  @2
   438    |          |  A=M
   439    |          |  A=A+D
   440    |          |  D=M
   441    |    0     |  @0
   442    |          |  A=M
   443    |          |  M=D
   444    |    0     |  @0
   445    |          |  M=M+1
          |          |        // pop pointer 0
   446    |    0     |  @0
   447    |          |  AM=M-1
   448    |          |  D=M
   449    |    3     |  @3
   450    |          |  M=D
          |          |        // push pointer 0
   451    |    3     |  @3
   452    |          |  D=M
   453    |    0     |  @0
   454    |          |  A=M
   455    |          |  M=D
   456    |    0     |  @0
   457    |          |  M=M+1
          |          |        // call Memory.deAlloc 1
   458    | RAM[506] |  @Memory.deAlloc$ret.3
   459    |          |  D=A
   460    |    0     |  @0
   461    |          |  A=M
   462    |          |  M=D
   463    |    0     |  @0
   464    |          |  M=M+1
   465    |    1     |  @1
   466    |          |  D=M
   467    |    0     |  @0
   468    |          |  A=M
   469    |          |  M=D
   470    |    0     |  @0
   471    |          |  M=M+1
   472    |    2     |  @2
   473    |          |  D=M
   474    |    0     |  @0
   475    |          |  A=M
   476    |          |  M=D
   477    |    0     |  @0
   478    |          |  M=M+1
   479    |    3     |  @3
   480    |          |  D=M
   481    |    0     |  @0
   482    |          |  A=M
   483    |          |  M=D
   484    |    0     |  @0
   485    |          |  M=M+1
   486    |    4     |  @4
   487    |          |  D=M
   488    |    0     |  @0
   489    |          |  A=M
   490    |          |  M=D
   491    |    0     |  @0
   492    |          |  M=M+1
   493    |    0     |  @0
   494    |          |  D=M
   495    |    2     |  @2
   496    |          |  M=D
   497    |    6     |  @6
   498    |          |  D=A
   499    |    2     |  @2
   500    |          |  M=M-D
   501    |    0     |  @0
   502    |          |  D=M
   503    |    1     |  @1
   504    |          |  M=D
   505    | RAM[18]  |  @Memory.deAlloc
   506    |          |  0;JMP
   507    | ROM[506] |  (Memory.deAlloc$ret.3)
          |          |        // pop temp 0
   507    |    0     |  @0
   508    |          |  D=A
   509    |    5     |  @5
   510    |          |  D=D+A
   511    | RAM[13]  |  @R13
   512    |          |  M=D
   513    |    0     |  @0
   514    |          |  AM=M-1
   515    |          |  D=M
   516    | RAM[13]  |  @R13
   517    |          |  A=M
   518    |          |  M=D
          |          |        // push constant 0
   519    |    0     |  @0
   520    |          |  D=A
   521    |    0     |  @0
   522    |          |  A=M
   523    |          |  M=D
   524    |    0     |  @0
   525    |          |  M=M+1
          |          |        // return
   526    |    1     |  @1
   527    |          |  D=M
   528    |    13    |  @13
   529    |          |  M=D
   530    |    5     |  @5
   531    |          |  D=A
   532    |    13    |  @13
   533    |          |  D=M-D
   534    |          |  A=D
   535    |          |  D=M
   536    |    14    |  @14
   537    |          |  M=D
   538    |    0     |  @0
   539    |          |  AM=M-1
   540    |          |  D=M
   541    |    2     |  @2
   542    |          |  A=M
   543    |          |  M=D
   544    |    2     |  @2
   545    |          |  D=M+1
   546    |    0     |  @0
   547    |          |  M=D
   548    |    13    |  @13
   549    |          |  M=M-1
   550    |          |  A=M
   551    |          |  D=M
   552    |    4     |  @4
   553    |          |  M=D
   554    |    13    |  @13
   555    |          |  M=M-1
   556    |          |  A=M
   557    |          |  D=M
   558    |    3     |  @3
   559    |          |  M=D
   560    |    13    |  @13
   561    |          |  M=M-1
   562    |          |  A=M
   563    |          |  D=M
   564    |    2     |  @2
   565    |          |  M=D
   566    |    13    |  @13
   567    |          |  M=M-1
   568    |          |  A=M
   569    |          |  D=M
   570    |    1     |  @1
   571    |          |  M=D
   572    |    14    |  @14
   573    |          |  A=M
   574    |          |  0;JMP
          |          |        // /** Shows the ball. */
          |          |        // function Ball.show 0
   575    | ROM[574] |  (Ball.show)
   575    |    0     |  @0
   576    |          |  D=M
   577    |    1     |  @1
   578    |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   579    |    0     |  @0
   580    |          |  D=A
   581    |    2     |  @2
   582    |          |  A=M
   583    |          |  A=A+D
   584    |          |  D=M
   585    |    0     |  @0
   586    |          |  A=M
   587    |          |  M=D
   588    |    0     |  @0
   589    |          |  M=M+1
          |          |        // pop pointer 0
   590    |    0     |  @0
   591    |          |  AM=M-1
   592    |          |  D=M
   593    |    3     |  @3
   594    |          |  M=D
          |          |        // push constant 1
   595    |    1     |  @1
   596    |          |  D=A
   597    |    0     |  @0
   598    |          |  A=M
   599    |          |  M=D
   600    |    0     |  @0
   601    |          |  M=M+1
          |          |        // neg
   602    |    0     |  @0
   603    |          |  A=M-1
   604    |          |  M=-M
          |          |        // call Screen.setColor 1
   605    | RAM[653] |  @Screen.setColor$ret.4
   606    |          |  D=A
   607    |    0     |  @0
   608    |          |  A=M
   609    |          |  M=D
   610    |    0     |  @0
   611    |          |  M=M+1
   612    |    1     |  @1
   613    |          |  D=M
   614    |    0     |  @0
   615    |          |  A=M
   616    |          |  M=D
   617    |    0     |  @0
   618    |          |  M=M+1
   619    |    2     |  @2
   620    |          |  D=M
   621    |    0     |  @0
   622    |          |  A=M
   623    |          |  M=D
   624    |    0     |  @0
   625    |          |  M=M+1
   626    |    3     |  @3
   627    |          |  D=M
   628    |    0     |  @0
   629    |          |  A=M
   630    |          |  M=D
   631    |    0     |  @0
   632    |          |  M=M+1
   633    |    4     |  @4
   634    |          |  D=M
   635    |    0     |  @0
   636    |          |  A=M
   637    |          |  M=D
   638    |    0     |  @0
   639    |          |  M=M+1
   640    |    0     |  @0
   641    |          |  D=M
   642    |    2     |  @2
   643    |          |  M=D
   644    |    6     |  @6
   645    |          |  D=A
   646    |    2     |  @2
   647    |          |  M=M-D
   648    |    0     |  @0
   649    |          |  D=M
   650    |    1     |  @1
   651    |          |  M=D
   652    | RAM[19]  |  @Screen.setColor
   653    |          |  0;JMP
   654    | ROM[653] |  (Screen.setColor$ret.4)
          |          |        // pop temp 0
   654    |    0     |  @0
   655    |          |  D=A
   656    |    5     |  @5
   657    |          |  D=D+A
   658    | RAM[13]  |  @R13
   659    |          |  M=D
   660    |    0     |  @0
   661    |          |  AM=M-1
   662    |          |  D=M
   663    | RAM[13]  |  @R13
   664    |          |  A=M
   665    |          |  M=D
          |          |        // push pointer 0
   666    |    3     |  @3
   667    |          |  D=M
   668    |    0     |  @0
   669    |          |  A=M
   670    |          |  M=D
   671    |    0     |  @0
   672    |          |  M=M+1
          |          |        // call Ball.draw 1
   673    | RAM[721] |  @Ball.draw$ret.5
   674    |          |  D=A
   675    |    0     |  @0
   676    |          |  A=M
   677    |          |  M=D
   678    |    0     |  @0
   679    |          |  M=M+1
   680    |    1     |  @1
   681    |          |  D=M
   682    |    0     |  @0
   683    |          |  A=M
   684    |          |  M=D
   685    |    0     |  @0
   686    |          |  M=M+1
   687    |    2     |  @2
   688    |          |  D=M
   689    |    0     |  @0
   690    |          |  A=M
   691    |          |  M=D
   692    |    0     |  @0
   693    |          |  M=M+1
   694    |    3     |  @3
   695    |          |  D=M
   696    |    0     |  @0
   697    |          |  A=M
   698    |          |  M=D
   699    |    0     |  @0
   700    |          |  M=M+1
   701    |    4     |  @4
   702    |          |  D=M
   703    |    0     |  @0
   704    |          |  A=M
   705    |          |  M=D
   706    |    0     |  @0
   707    |          |  M=M+1
   708    |    0     |  @0
   709    |          |  D=M
   710    |    2     |  @2
   711    |          |  M=D
   712    |    6     |  @6
   713    |          |  D=A
   714    |    2     |  @2
   715    |          |  M=M-D
   716    |    0     |  @0
   717    |          |  D=M
   718    |    1     |  @1
   719    |          |  M=D
   720    |RAM[1001] |  @Ball.draw
   721    |          |  0;JMP
   722    | ROM[721] |  (Ball.draw$ret.5)
          |          |        // pop temp 0
   722    |    0     |  @0
   723    |          |  D=A
   724    |    5     |  @5
   725    |          |  D=D+A
   726    | RAM[13]  |  @R13
   727    |          |  M=D
   728    |    0     |  @0
   729    |          |  AM=M-1
   730    |          |  D=M
   731    | RAM[13]  |  @R13
   732    |          |  A=M
   733    |          |  M=D
          |          |        // push constant 0
   734    |    0     |  @0
   735    |          |  D=A
   736    |    0     |  @0
   737    |          |  A=M
   738    |          |  M=D
   739    |    0     |  @0
   740    |          |  M=M+1
          |          |        // return
   741    |    1     |  @1
   742    |          |  D=M
   743    |    13    |  @13
   744    |          |  M=D
   745    |    5     |  @5
   746    |          |  D=A
   747    |    13    |  @13
   748    |          |  D=M-D
   749    |          |  A=D
   750    |          |  D=M
   751    |    14    |  @14
   752    |          |  M=D
   753    |    0     |  @0
   754    |          |  AM=M-1
   755    |          |  D=M
   756    |    2     |  @2
   757    |          |  A=M
   758    |          |  M=D
   759    |    2     |  @2
   760    |          |  D=M+1
   761    |    0     |  @0
   762    |          |  M=D
   763    |    13    |  @13
   764    |          |  M=M-1
   765    |          |  A=M
   766    |          |  D=M
   767    |    4     |  @4
   768    |          |  M=D
   769    |    13    |  @13
   770    |          |  M=M-1
   771    |          |  A=M
   772    |          |  D=M
   773    |    3     |  @3
   774    |          |  M=D
   775    |    13    |  @13
   776    |          |  M=M-1
   777    |          |  A=M
   778    |          |  D=M
   779    |    2     |  @2
   780    |          |  M=D
   781    |    13    |  @13
   782    |          |  M=M-1
   783    |          |  A=M
   784    |          |  D=M
   785    |    1     |  @1
   786    |          |  M=D
   787    |    14    |  @14
   788    |          |  A=M
   789    |          |  0;JMP
          |          |        // /** Hides the ball. */
          |          |        // function Ball.hide 0
   790    | ROM[789] |  (Ball.hide)
   790    |    0     |  @0
   791    |          |  D=M
   792    |    1     |  @1
   793    |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   794    |    0     |  @0
   795    |          |  D=A
   796    |    2     |  @2
   797    |          |  A=M
   798    |          |  A=A+D
   799    |          |  D=M
   800    |    0     |  @0
   801    |          |  A=M
   802    |          |  M=D
   803    |    0     |  @0
   804    |          |  M=M+1
          |          |        // pop pointer 0
   805    |    0     |  @0
   806    |          |  AM=M-1
   807    |          |  D=M
   808    |    3     |  @3
   809    |          |  M=D
          |          |        // push constant 0
   810    |    0     |  @0
   811    |          |  D=A
   812    |    0     |  @0
   813    |          |  A=M
   814    |          |  M=D
   815    |    0     |  @0
   816    |          |  M=M+1
          |          |        // call Screen.setColor 1
   817    | RAM[865] |  @Screen.setColor$ret.6
   818    |          |  D=A
   819    |    0     |  @0
   820    |          |  A=M
   821    |          |  M=D
   822    |    0     |  @0
   823    |          |  M=M+1
   824    |    1     |  @1
   825    |          |  D=M
   826    |    0     |  @0
   827    |          |  A=M
   828    |          |  M=D
   829    |    0     |  @0
   830    |          |  M=M+1
   831    |    2     |  @2
   832    |          |  D=M
   833    |    0     |  @0
   834    |          |  A=M
   835    |          |  M=D
   836    |    0     |  @0
   837    |          |  M=M+1
   838    |    3     |  @3
   839    |          |  D=M
   840    |    0     |  @0
   841    |          |  A=M
   842    |          |  M=D
   843    |    0     |  @0
   844    |          |  M=M+1
   845    |    4     |  @4
   846    |          |  D=M
   847    |    0     |  @0
   848    |          |  A=M
   849    |          |  M=D
   850    |    0     |  @0
   851    |          |  M=M+1
   852    |    0     |  @0
   853    |          |  D=M
   854    |    2     |  @2
   855    |          |  M=D
   856    |    6     |  @6
   857    |          |  D=A
   858    |    2     |  @2
   859    |          |  M=M-D
   860    |    0     |  @0
   861    |          |  D=M
   862    |    1     |  @1
   863    |          |  M=D
   864    | RAM[19]  |  @Screen.setColor
   865    |          |  0;JMP
   866    | ROM[865] |  (Screen.setColor$ret.6)
          |          |        // pop temp 0
   866    |    0     |  @0
   867    |          |  D=A
   868    |    5     |  @5
   869    |          |  D=D+A
   870    | RAM[13]  |  @R13
   871    |          |  M=D
   872    |    0     |  @0
   873    |          |  AM=M-1
   874    |          |  D=M
   875    | RAM[13]  |  @R13
   876    |          |  A=M
   877    |          |  M=D
          |          |        // push pointer 0
   878    |    3     |  @3
   879    |          |  D=M
   880    |    0     |  @0
   881    |          |  A=M
   882    |          |  M=D
   883    |    0     |  @0
   884    |          |  M=M+1
          |          |        // call Ball.draw 1
   885    | RAM[933] |  @Ball.draw$ret.7
   886    |          |  D=A
   887    |    0     |  @0
   888    |          |  A=M
   889    |          |  M=D
   890    |    0     |  @0
   891    |          |  M=M+1
   892    |    1     |  @1
   893    |          |  D=M
   894    |    0     |  @0
   895    |          |  A=M
   896    |          |  M=D
   897    |    0     |  @0
   898    |          |  M=M+1
   899    |    2     |  @2
   900    |          |  D=M
   901    |    0     |  @0
   902    |          |  A=M
   903    |          |  M=D
   904    |    0     |  @0
   905    |          |  M=M+1
   906    |    3     |  @3
   907    |          |  D=M
   908    |    0     |  @0
   909    |          |  A=M
   910    |          |  M=D
   911    |    0     |  @0
   912    |          |  M=M+1
   913    |    4     |  @4
   914    |          |  D=M
   915    |    0     |  @0
   916    |          |  A=M
   917    |          |  M=D
   918    |    0     |  @0
   919    |          |  M=M+1
   920    |    0     |  @0
   921    |          |  D=M
   922    |    2     |  @2
   923    |          |  M=D
   924    |    6     |  @6
   925    |          |  D=A
   926    |    2     |  @2
   927    |          |  M=M-D
   928    |    0     |  @0
   929    |          |  D=M
   930    |    1     |  @1
   931    |          |  M=D
   932    |RAM[1001] |  @Ball.draw
   933    |          |  0;JMP
   934    | ROM[933] |  (Ball.draw$ret.7)
          |          |        // pop temp 0
   934    |    0     |  @0
   935    |          |  D=A
   936    |    5     |  @5
   937    |          |  D=D+A
   938    | RAM[13]  |  @R13
   939    |          |  M=D
   940    |    0     |  @0
   941    |          |  AM=M-1
   942    |          |  D=M
   943    | RAM[13]  |  @R13
   944    |          |  A=M
   945    |          |  M=D
          |          |        // push constant 0
   946    |    0     |  @0
   947    |          |  D=A
   948    |    0     |  @0
   949    |          |  A=M
   950    |          |  M=D
   951    |    0     |  @0
   952    |          |  M=M+1
          |          |        // return
   953    |    1     |  @1
   954    |          |  D=M
   955    |    13    |  @13
   956    |          |  M=D
   957    |    5     |  @5
   958    |          |  D=A
   959    |    13    |  @13
   960    |          |  D=M-D
   961    |          |  A=D
   962    |          |  D=M
   963    |    14    |  @14
   964    |          |  M=D
   965    |    0     |  @0
   966    |          |  AM=M-1
   967    |          |  D=M
   968    |    2     |  @2
   969    |          |  A=M
   970    |          |  M=D
   971    |    2     |  @2
   972    |          |  D=M+1
   973    |    0     |  @0
   974    |          |  M=D
   975    |    13    |  @13
   976    |          |  M=M-1
   977    |          |  A=M
   978    |          |  D=M
   979    |    4     |  @4
   980    |          |  M=D
   981    |    13    |  @13
   982    |          |  M=M-1
   983    |          |  A=M
   984    |          |  D=M
   985    |    3     |  @3
   986    |          |  M=D
   987    |    13    |  @13
   988    |          |  M=M-1
   989    |          |  A=M
   990    |          |  D=M
   991    |    2     |  @2
   992    |          |  M=D
   993    |    13    |  @13
   994    |          |  M=M-1
   995    |          |  A=M
   996    |          |  D=M
   997    |    1     |  @1
   998    |          |  M=D
   999    |    14    |  @14
   1000   |          |  A=M
   1001   |          |  0;JMP
          |          |        // /** Draws the ball. */
          |          |        // function Ball.draw 0
   1002   |ROM[1001] |  (Ball.draw)
   1002   |    0     |  @0
   1003   |          |  D=M
   1004   |    1     |  @1
   1005   |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   1006   |    0     |  @0
   1007   |          |  D=A
   1008   |    2     |  @2
   1009   |          |  A=M
   1010   |          |  A=A+D
   1011   |          |  D=M
   1012   |    0     |  @0
   1013   |          |  A=M
   1014   |          |  M=D
   1015   |    0     |  @0
   1016   |          |  M=M+1
          |          |        // pop pointer 0
   1017   |    0     |  @0
   1018   |          |  AM=M-1
   1019   |          |  D=M
   1020   |    3     |  @3
   1021   |          |  M=D
          |          |        // push this 0
   1022   |    0     |  @0
   1023   |          |  D=A
   1024   |    3     |  @3
   1025   |          |  A=M
   1026   |          |  A=A+D
   1027   |          |  D=M
   1028   |    0     |  @0
   1029   |          |  A=M
   1030   |          |  M=D
   1031   |    0     |  @0
   1032   |          |  M=M+1
          |          |        // push this 1
   1033   |    1     |  @1
   1034   |          |  D=A
   1035   |    3     |  @3
   1036   |          |  A=M
   1037   |          |  A=A+D
   1038   |          |  D=M
   1039   |    0     |  @0
   1040   |          |  A=M
   1041   |          |  M=D
   1042   |    0     |  @0
   1043   |          |  M=M+1
          |          |        // push this 0
   1044   |    0     |  @0
   1045   |          |  D=A
   1046   |    3     |  @3
   1047   |          |  A=M
   1048   |          |  A=A+D
   1049   |          |  D=M
   1050   |    0     |  @0
   1051   |          |  A=M
   1052   |          |  M=D
   1053   |    0     |  @0
   1054   |          |  M=M+1
          |          |        // push constant 5
   1055   |    5     |  @5
   1056   |          |  D=A
   1057   |    0     |  @0
   1058   |          |  A=M
   1059   |          |  M=D
   1060   |    0     |  @0
   1061   |          |  M=M+1
          |          |        // add
   1062   |    0     |  @0
   1063   |          |  AM=M-1
   1064   |          |  D=M
   1065   |          |  A=A-1
   1066   |          |  M=M+D
          |          |        // push this 1
   1067   |    1     |  @1
   1068   |          |  D=A
   1069   |    3     |  @3
   1070   |          |  A=M
   1071   |          |  A=A+D
   1072   |          |  D=M
   1073   |    0     |  @0
   1074   |          |  A=M
   1075   |          |  M=D
   1076   |    0     |  @0
   1077   |          |  M=M+1
          |          |        // push constant 5
   1078   |    5     |  @5
   1079   |          |  D=A
   1080   |    0     |  @0
   1081   |          |  A=M
   1082   |          |  M=D
   1083   |    0     |  @0
   1084   |          |  M=M+1
          |          |        // add
   1085   |    0     |  @0
   1086   |          |  AM=M-1
   1087   |          |  D=M
   1088   |          |  A=A-1
   1089   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   1090   |RAM[1138] |  @Screen.drawRectangle$ret.8
   1091   |          |  D=A
   1092   |    0     |  @0
   1093   |          |  A=M
   1094   |          |  M=D
   1095   |    0     |  @0
   1096   |          |  M=M+1
   1097   |    1     |  @1
   1098   |          |  D=M
   1099   |    0     |  @0
   1100   |          |  A=M
   1101   |          |  M=D
   1102   |    0     |  @0
   1103   |          |  M=M+1
   1104   |    2     |  @2
   1105   |          |  D=M
   1106   |    0     |  @0
   1107   |          |  A=M
   1108   |          |  M=D
   1109   |    0     |  @0
   1110   |          |  M=M+1
   1111   |    3     |  @3
   1112   |          |  D=M
   1113   |    0     |  @0
   1114   |          |  A=M
   1115   |          |  M=D
   1116   |    0     |  @0
   1117   |          |  M=M+1
   1118   |    4     |  @4
   1119   |          |  D=M
   1120   |    0     |  @0
   1121   |          |  A=M
   1122   |          |  M=D
   1123   |    0     |  @0
   1124   |          |  M=M+1
   1125   |    0     |  @0
   1126   |          |  D=M
   1127   |    2     |  @2
   1128   |          |  M=D
   1129   |    9     |  @9
   1130   |          |  D=A
   1131   |    2     |  @2
   1132   |          |  M=M-D
   1133   |    0     |  @0
   1134   |          |  D=M
   1135   |    1     |  @1
   1136   |          |  M=D
   1137   | RAM[20]  |  @Screen.drawRectangle
   1138   |          |  0;JMP
   1139   |ROM[1138] |  (Screen.drawRectangle$ret.8)
          |          |        // pop temp 0
   1139   |    0     |  @0
   1140   |          |  D=A
   1141   |    5     |  @5
   1142   |          |  D=D+A
   1143   | RAM[13]  |  @R13
   1144   |          |  M=D
   1145   |    0     |  @0
   1146   |          |  AM=M-1
   1147   |          |  D=M
   1148   | RAM[13]  |  @R13
   1149   |          |  A=M
   1150   |          |  M=D
          |          |        // push constant 0
   1151   |    0     |  @0
   1152   |          |  D=A
   1153   |    0     |  @0
   1154   |          |  A=M
   1155   |          |  M=D
   1156   |    0     |  @0
   1157   |          |  M=M+1
          |          |        // return
   1158   |    1     |  @1
   1159   |          |  D=M
   1160   |    13    |  @13
   1161   |          |  M=D
   1162   |    5     |  @5
   1163   |          |  D=A
   1164   |    13    |  @13
   1165   |          |  D=M-D
   1166   |          |  A=D
   1167   |          |  D=M
   1168   |    14    |  @14
   1169   |          |  M=D
   1170   |    0     |  @0
   1171   |          |  AM=M-1
   1172   |          |  D=M
   1173   |    2     |  @2
   1174   |          |  A=M
   1175   |          |  M=D
   1176   |    2     |  @2
   1177   |          |  D=M+1
   1178   |    0     |  @0
   1179   |          |  M=D
   1180   |    13    |  @13
   1181   |          |  M=M-1
   1182   |          |  A=M
   1183   |          |  D=M
   1184   |    4     |  @4
   1185   |          |  M=D
   1186   |    13    |  @13
   1187   |          |  M=M-1
   1188   |          |  A=M
   1189   |          |  D=M
   1190   |    3     |  @3
   1191   |          |  M=D
   1192   |    13    |  @13
   1193   |          |  M=M-1
   1194   |          |  A=M
   1195   |          |  D=M
   1196   |    2     |  @2
   1197   |          |  M=D
   1198   |    13    |  @13
   1199   |          |  M=M-1
   1200   |          |  A=M
   1201   |          |  D=M
   1202   |    1     |  @1
   1203   |          |  M=D
   1204   |    14    |  @14
   1205   |          |  A=M
   1206   |          |  0;JMP
          |          |        // /** Returns the ball's left edge. */
          |          |        // function Ball.getLeft 0
   1207   |ROM[1206] |  (Ball.getLeft)
   1207   |    0     |  @0
   1208   |          |  D=M
   1209   |    1     |  @1
   1210   |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   1211   |    0     |  @0
   1212   |          |  D=A
   1213   |    2     |  @2
   1214   |          |  A=M
   1215   |          |  A=A+D
   1216   |          |  D=M
   1217   |    0     |  @0
   1218   |          |  A=M
   1219   |          |  M=D
   1220   |    0     |  @0
   1221   |          |  M=M+1
          |          |        // pop pointer 0
   1222   |    0     |  @0
   1223   |          |  AM=M-1
   1224   |          |  D=M
   1225   |    3     |  @3
   1226   |          |  M=D
          |          |        // push this 0
   1227   |    0     |  @0
   1228   |          |  D=A
   1229   |    3     |  @3
   1230   |          |  A=M
   1231   |          |  A=A+D
   1232   |          |  D=M
   1233   |    0     |  @0
   1234   |          |  A=M
   1235   |          |  M=D
   1236   |    0     |  @0
   1237   |          |  M=M+1
          |          |        // return
   1238   |    1     |  @1
   1239   |          |  D=M
   1240   |    13    |  @13
   1241   |          |  M=D
   1242   |    5     |  @5
   1243   |          |  D=A
   1244   |    13    |  @13
   1245   |          |  D=M-D
   1246   |          |  A=D
   1247   |          |  D=M
   1248   |    14    |  @14
   1249   |          |  M=D
   1250   |    0     |  @0
   1251   |          |  AM=M-1
   1252   |          |  D=M
   1253   |    2     |  @2
   1254   |          |  A=M
   1255   |          |  M=D
   1256   |    2     |  @2
   1257   |          |  D=M+1
   1258   |    0     |  @0
   1259   |          |  M=D
   1260   |    13    |  @13
   1261   |          |  M=M-1
   1262   |          |  A=M
   1263   |          |  D=M
   1264   |    4     |  @4
   1265   |          |  M=D
   1266   |    13    |  @13
   1267   |          |  M=M-1
   1268   |          |  A=M
   1269   |          |  D=M
   1270   |    3     |  @3
   1271   |          |  M=D
   1272   |    13    |  @13
   1273   |          |  M=M-1
   1274   |          |  A=M
   1275   |          |  D=M
   1276   |    2     |  @2
   1277   |          |  M=D
   1278   |    13    |  @13
   1279   |          |  M=M-1
   1280   |          |  A=M
   1281   |          |  D=M
   1282   |    1     |  @1
   1283   |          |  M=D
   1284   |    14    |  @14
   1285   |          |  A=M
   1286   |          |  0;JMP
          |          |        // /** Returns the ball's right edge. */
          |          |        // function Ball.getRight 0
   1287   |ROM[1286] |  (Ball.getRight)
   1287   |    0     |  @0
   1288   |          |  D=M
   1289   |    1     |  @1
   1290   |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   1291   |    0     |  @0
   1292   |          |  D=A
   1293   |    2     |  @2
   1294   |          |  A=M
   1295   |          |  A=A+D
   1296   |          |  D=M
   1297   |    0     |  @0
   1298   |          |  A=M
   1299   |          |  M=D
   1300   |    0     |  @0
   1301   |          |  M=M+1
          |          |        // pop pointer 0
   1302   |    0     |  @0
   1303   |          |  AM=M-1
   1304   |          |  D=M
   1305   |    3     |  @3
   1306   |          |  M=D
          |          |        // push this 0
   1307   |    0     |  @0
   1308   |          |  D=A
   1309   |    3     |  @3
   1310   |          |  A=M
   1311   |          |  A=A+D
   1312   |          |  D=M
   1313   |    0     |  @0
   1314   |          |  A=M
   1315   |          |  M=D
   1316   |    0     |  @0
   1317   |          |  M=M+1
          |          |        // push constant 5
   1318   |    5     |  @5
   1319   |          |  D=A
   1320   |    0     |  @0
   1321   |          |  A=M
   1322   |          |  M=D
   1323   |    0     |  @0
   1324   |          |  M=M+1
          |          |        // add
   1325   |    0     |  @0
   1326   |          |  AM=M-1
   1327   |          |  D=M
   1328   |          |  A=A-1
   1329   |          |  M=M+D
          |          |        // return
   1330   |    1     |  @1
   1331   |          |  D=M
   1332   |    13    |  @13
   1333   |          |  M=D
   1334   |    5     |  @5
   1335   |          |  D=A
   1336   |    13    |  @13
   1337   |          |  D=M-D
   1338   |          |  A=D
   1339   |          |  D=M
   1340   |    14    |  @14
   1341   |          |  M=D
   1342   |    0     |  @0
   1343   |          |  AM=M-1
   1344   |          |  D=M
   1345   |    2     |  @2
   1346   |          |  A=M
   1347   |          |  M=D
   1348   |    2     |  @2
   1349   |          |  D=M+1
   1350   |    0     |  @0
   1351   |          |  M=D
   1352   |    13    |  @13
   1353   |          |  M=M-1
   1354   |          |  A=M
   1355   |          |  D=M
   1356   |    4     |  @4
   1357   |          |  M=D
   1358   |    13    |  @13
   1359   |          |  M=M-1
   1360   |          |  A=M
   1361   |          |  D=M
   1362   |    3     |  @3
   1363   |          |  M=D
   1364   |    13    |  @13
   1365   |          |  M=M-1
   1366   |          |  A=M
   1367   |          |  D=M
   1368   |    2     |  @2
   1369   |          |  M=D
   1370   |    13    |  @13
   1371   |          |  M=M-1
   1372   |          |  A=M
   1373   |          |  D=M
   1374   |    1     |  @1
   1375   |          |  M=D
   1376   |    14    |  @14
   1377   |          |  A=M
   1378   |          |  0;JMP
          |          |        // /** Computes and sets the ball's destination. */
          |          |        // function Ball.setDestination 3
   1379   |ROM[1378] |  (Ball.setDestination)
   1379   |    0     |  @0
   1380   |          |  D=M
   1381   |    1     |  @1
   1382   |          |  M=D
   1383   |    0     |  @0
   1384   |          |  A=M
   1385   |          |  M=0
   1386   |    0     |  @0
   1387   |          |  M=M+1
   1388   |    0     |  @0
   1389   |          |  A=M
   1390   |          |  M=0
   1391   |    0     |  @0
   1392   |          |  M=M+1
   1393   |    0     |  @0
   1394   |          |  A=M
   1395   |          |  M=0
   1396   |    0     |  @0
   1397   |          |  M=M+1
          |          |        // /*
          |          |        // ARG    Ball this  -> argument 0
          |          |        // ARG    int  destx -> argument 1
          |          |        // ARG    int  desty -> argument 2
          |          |        // VAR    int  dx    -> local    0
          |          |        // VAR    int  dy    -> local    1
          |          |        // VAR    int  temp  -> local    2
          |          |        // */
          |          |        // push argument 0
   1398   |    0     |  @0
   1399   |          |  D=A
   1400   |    2     |  @2
   1401   |          |  A=M
   1402   |          |  A=A+D
   1403   |          |  D=M
   1404   |    0     |  @0
   1405   |          |  A=M
   1406   |          |  M=D
   1407   |    0     |  @0
   1408   |          |  M=M+1
          |          |        // pop pointer 0
   1409   |    0     |  @0
   1410   |          |  AM=M-1
   1411   |          |  D=M
   1412   |    3     |  @3
   1413   |          |  M=D
          |          |        // push argument 1
   1414   |    1     |  @1
   1415   |          |  D=A
   1416   |    2     |  @2
   1417   |          |  A=M
   1418   |          |  A=A+D
   1419   |          |  D=M
   1420   |    0     |  @0
   1421   |          |  A=M
   1422   |          |  M=D
   1423   |    0     |  @0
   1424   |          |  M=M+1
          |          |        // push this 0
   1425   |    0     |  @0
   1426   |          |  D=A
   1427   |    3     |  @3
   1428   |          |  A=M
   1429   |          |  A=A+D
   1430   |          |  D=M
   1431   |    0     |  @0
   1432   |          |  A=M
   1433   |          |  M=D
   1434   |    0     |  @0
   1435   |          |  M=M+1
          |          |        // sub
   1436   |    0     |  @0
   1437   |          |  AM=M-1
   1438   |          |  D=M
   1439   |          |  A=A-1
   1440   |          |  M=M-D
          |          |        // pop this 2
   1441   |    2     |  @2
   1442   |          |  D=A
   1443   |    3     |  @3
   1444   |          |  D=D+M
   1445   | RAM[13]  |  @R13
   1446   |          |  M=D
   1447   |    0     |  @0
   1448   |          |  AM=M-1
   1449   |          |  D=M
   1450   | RAM[13]  |  @R13
   1451   |          |  A=M
   1452   |          |  M=D
          |          |        // push argument 2
   1453   |    2     |  @2
   1454   |          |  D=A
   1455   |    2     |  @2
   1456   |          |  A=M
   1457   |          |  A=A+D
   1458   |          |  D=M
   1459   |    0     |  @0
   1460   |          |  A=M
   1461   |          |  M=D
   1462   |    0     |  @0
   1463   |          |  M=M+1
          |          |        // push this 1
   1464   |    1     |  @1
   1465   |          |  D=A
   1466   |    3     |  @3
   1467   |          |  A=M
   1468   |          |  A=A+D
   1469   |          |  D=M
   1470   |    0     |  @0
   1471   |          |  A=M
   1472   |          |  M=D
   1473   |    0     |  @0
   1474   |          |  M=M+1
          |          |        // sub
   1475   |    0     |  @0
   1476   |          |  AM=M-1
   1477   |          |  D=M
   1478   |          |  A=A-1
   1479   |          |  M=M-D
          |          |        // pop this 3
   1480   |    3     |  @3
   1481   |          |  D=A
   1482   |    3     |  @3
   1483   |          |  D=D+M
   1484   | RAM[13]  |  @R13
   1485   |          |  M=D
   1486   |    0     |  @0
   1487   |          |  AM=M-1
   1488   |          |  D=M
   1489   | RAM[13]  |  @R13
   1490   |          |  A=M
   1491   |          |  M=D
          |          |        // push this 2
   1492   |    2     |  @2
   1493   |          |  D=A
   1494   |    3     |  @3
   1495   |          |  A=M
   1496   |          |  A=A+D
   1497   |          |  D=M
   1498   |    0     |  @0
   1499   |          |  A=M
   1500   |          |  M=D
   1501   |    0     |  @0
   1502   |          |  M=M+1
          |          |        // call Math.abs 1
   1503   |RAM[1551] |  @Math.abs$ret.9
   1504   |          |  D=A
   1505   |    0     |  @0
   1506   |          |  A=M
   1507   |          |  M=D
   1508   |    0     |  @0
   1509   |          |  M=M+1
   1510   |    1     |  @1
   1511   |          |  D=M
   1512   |    0     |  @0
   1513   |          |  A=M
   1514   |          |  M=D
   1515   |    0     |  @0
   1516   |          |  M=M+1
   1517   |    2     |  @2
   1518   |          |  D=M
   1519   |    0     |  @0
   1520   |          |  A=M
   1521   |          |  M=D
   1522   |    0     |  @0
   1523   |          |  M=M+1
   1524   |    3     |  @3
   1525   |          |  D=M
   1526   |    0     |  @0
   1527   |          |  A=M
   1528   |          |  M=D
   1529   |    0     |  @0
   1530   |          |  M=M+1
   1531   |    4     |  @4
   1532   |          |  D=M
   1533   |    0     |  @0
   1534   |          |  A=M
   1535   |          |  M=D
   1536   |    0     |  @0
   1537   |          |  M=M+1
   1538   |    0     |  @0
   1539   |          |  D=M
   1540   |    2     |  @2
   1541   |          |  M=D
   1542   |    6     |  @6
   1543   |          |  D=A
   1544   |    2     |  @2
   1545   |          |  M=M-D
   1546   |    0     |  @0
   1547   |          |  D=M
   1548   |    1     |  @1
   1549   |          |  M=D
   1550   | RAM[21]  |  @Math.abs
   1551   |          |  0;JMP
   1552   |ROM[1551] |  (Math.abs$ret.9)
          |          |        // pop local 0
   1552   |    0     |  @0
   1553   |          |  D=A
   1554   |    1     |  @1
   1555   |          |  D=D+M
   1556   | RAM[13]  |  @R13
   1557   |          |  M=D
   1558   |    0     |  @0
   1559   |          |  AM=M-1
   1560   |          |  D=M
   1561   | RAM[13]  |  @R13
   1562   |          |  A=M
   1563   |          |  M=D
          |          |        // push this 3
   1564   |    3     |  @3
   1565   |          |  D=A
   1566   |    3     |  @3
   1567   |          |  A=M
   1568   |          |  A=A+D
   1569   |          |  D=M
   1570   |    0     |  @0
   1571   |          |  A=M
   1572   |          |  M=D
   1573   |    0     |  @0
   1574   |          |  M=M+1
          |          |        // call Math.abs 1
   1575   |RAM[1623] |  @Math.abs$ret.10
   1576   |          |  D=A
   1577   |    0     |  @0
   1578   |          |  A=M
   1579   |          |  M=D
   1580   |    0     |  @0
   1581   |          |  M=M+1
   1582   |    1     |  @1
   1583   |          |  D=M
   1584   |    0     |  @0
   1585   |          |  A=M
   1586   |          |  M=D
   1587   |    0     |  @0
   1588   |          |  M=M+1
   1589   |    2     |  @2
   1590   |          |  D=M
   1591   |    0     |  @0
   1592   |          |  A=M
   1593   |          |  M=D
   1594   |    0     |  @0
   1595   |          |  M=M+1
   1596   |    3     |  @3
   1597   |          |  D=M
   1598   |    0     |  @0
   1599   |          |  A=M
   1600   |          |  M=D
   1601   |    0     |  @0
   1602   |          |  M=M+1
   1603   |    4     |  @4
   1604   |          |  D=M
   1605   |    0     |  @0
   1606   |          |  A=M
   1607   |          |  M=D
   1608   |    0     |  @0
   1609   |          |  M=M+1
   1610   |    0     |  @0
   1611   |          |  D=M
   1612   |    2     |  @2
   1613   |          |  M=D
   1614   |    6     |  @6
   1615   |          |  D=A
   1616   |    2     |  @2
   1617   |          |  M=M-D
   1618   |    0     |  @0
   1619   |          |  D=M
   1620   |    1     |  @1
   1621   |          |  M=D
   1622   | RAM[21]  |  @Math.abs
   1623   |          |  0;JMP
   1624   |ROM[1623] |  (Math.abs$ret.10)
          |          |        // pop local 1
   1624   |    1     |  @1
   1625   |          |  D=A
   1626   |    1     |  @1
   1627   |          |  D=D+M
   1628   | RAM[13]  |  @R13
   1629   |          |  M=D
   1630   |    0     |  @0
   1631   |          |  AM=M-1
   1632   |          |  D=M
   1633   | RAM[13]  |  @R13
   1634   |          |  A=M
   1635   |          |  M=D
          |          |        // push local 0
   1636   |    0     |  @0
   1637   |          |  D=A
   1638   |    1     |  @1
   1639   |          |  A=M
   1640   |          |  A=A+D
   1641   |          |  D=M
   1642   |    0     |  @0
   1643   |          |  A=M
   1644   |          |  M=D
   1645   |    0     |  @0
   1646   |          |  M=M+1
          |          |        // push local 1
   1647   |    1     |  @1
   1648   |          |  D=A
   1649   |    1     |  @1
   1650   |          |  A=M
   1651   |          |  A=A+D
   1652   |          |  D=M
   1653   |    0     |  @0
   1654   |          |  A=M
   1655   |          |  M=D
   1656   |    0     |  @0
   1657   |          |  M=M+1
          |          |        // lt
   1658   |    0     |  @0
   1659   |          |  AM=M-1
   1660   |          |  D=M
   1661   |          |  A=A-1
   1662   |          |  D=M-D
   1663   |          |  M=-1
   1664   |RAM[1668] |  @T0
   1665   |          |  D;JLT
   1666   |    0     |  @0
   1667   |          |  A=M-1
   1668   |          |  M=0
   1669   |ROM[1668] |  (T0)
          |          |        // pop this 7
   1669   |    7     |  @7
   1670   |          |  D=A
   1671   |    3     |  @3
   1672   |          |  D=D+M
   1673   | RAM[13]  |  @R13
   1674   |          |  M=D
   1675   |    0     |  @0
   1676   |          |  AM=M-1
   1677   |          |  D=M
   1678   | RAM[13]  |  @R13
   1679   |          |  A=M
   1680   |          |  M=D
          |          |        // push this 7
   1681   |    7     |  @7
   1682   |          |  D=A
   1683   |    3     |  @3
   1684   |          |  A=M
   1685   |          |  A=A+D
   1686   |          |  D=M
   1687   |    0     |  @0
   1688   |          |  A=M
   1689   |          |  M=D
   1690   |    0     |  @0
   1691   |          |  M=M+1
          |          |        // not
   1692   |    0     |  @0
   1693   |          |  A=M-1
   1694   |          |  M=!M
          |          |        // if-goto Ball.setDestination_FALSE_0
   1695   |    0     |  @0
   1696   |          |  AM=M-1
   1697   |          |  D=M
   1698   |RAM[1860] |  @Ball.setDestination_FALSE_0
   1699   |          |  D;JNE
          |          |        // push local 0
   1700   |    0     |  @0
   1701   |          |  D=A
   1702   |    1     |  @1
   1703   |          |  A=M
   1704   |          |  A=A+D
   1705   |          |  D=M
   1706   |    0     |  @0
   1707   |          |  A=M
   1708   |          |  M=D
   1709   |    0     |  @0
   1710   |          |  M=M+1
          |          |        // pop local 2
   1711   |    2     |  @2
   1712   |          |  D=A
   1713   |    1     |  @1
   1714   |          |  D=D+M
   1715   | RAM[13]  |  @R13
   1716   |          |  M=D
   1717   |    0     |  @0
   1718   |          |  AM=M-1
   1719   |          |  D=M
   1720   | RAM[13]  |  @R13
   1721   |          |  A=M
   1722   |          |  M=D
          |          |        // push local 1
   1723   |    1     |  @1
   1724   |          |  D=A
   1725   |    1     |  @1
   1726   |          |  A=M
   1727   |          |  A=A+D
   1728   |          |  D=M
   1729   |    0     |  @0
   1730   |          |  A=M
   1731   |          |  M=D
   1732   |    0     |  @0
   1733   |          |  M=M+1
          |          |        // pop local 0
   1734   |    0     |  @0
   1735   |          |  D=A
   1736   |    1     |  @1
   1737   |          |  D=D+M
   1738   | RAM[13]  |  @R13
   1739   |          |  M=D
   1740   |    0     |  @0
   1741   |          |  AM=M-1
   1742   |          |  D=M
   1743   | RAM[13]  |  @R13
   1744   |          |  A=M
   1745   |          |  M=D
          |          |        // push local 2
   1746   |    2     |  @2
   1747   |          |  D=A
   1748   |    1     |  @1
   1749   |          |  A=M
   1750   |          |  A=A+D
   1751   |          |  D=M
   1752   |    0     |  @0
   1753   |          |  A=M
   1754   |          |  M=D
   1755   |    0     |  @0
   1756   |          |  M=M+1
          |          |        // pop local 1
   1757   |    1     |  @1
   1758   |          |  D=A
   1759   |    1     |  @1
   1760   |          |  D=D+M
   1761   | RAM[13]  |  @R13
   1762   |          |  M=D
   1763   |    0     |  @0
   1764   |          |  AM=M-1
   1765   |          |  D=M
   1766   | RAM[13]  |  @R13
   1767   |          |  A=M
   1768   |          |  M=D
          |          |        // push this 1
   1769   |    1     |  @1
   1770   |          |  D=A
   1771   |    3     |  @3
   1772   |          |  A=M
   1773   |          |  A=A+D
   1774   |          |  D=M
   1775   |    0     |  @0
   1776   |          |  A=M
   1777   |          |  M=D
   1778   |    0     |  @0
   1779   |          |  M=M+1
          |          |        // push argument 2
   1780   |    2     |  @2
   1781   |          |  D=A
   1782   |    2     |  @2
   1783   |          |  A=M
   1784   |          |  A=A+D
   1785   |          |  D=M
   1786   |    0     |  @0
   1787   |          |  A=M
   1788   |          |  M=D
   1789   |    0     |  @0
   1790   |          |  M=M+1
          |          |        // lt
   1791   |    0     |  @0
   1792   |          |  AM=M-1
   1793   |          |  D=M
   1794   |          |  A=A-1
   1795   |          |  D=M-D
   1796   |          |  M=-1
   1797   |RAM[1801] |  @T1
   1798   |          |  D;JLT
   1799   |    0     |  @0
   1800   |          |  A=M-1
   1801   |          |  M=0
   1802   |ROM[1801] |  (T1)
          |          |        // pop this 8
   1802   |    8     |  @8
   1803   |          |  D=A
   1804   |    3     |  @3
   1805   |          |  D=D+M
   1806   | RAM[13]  |  @R13
   1807   |          |  M=D
   1808   |    0     |  @0
   1809   |          |  AM=M-1
   1810   |          |  D=M
   1811   | RAM[13]  |  @R13
   1812   |          |  A=M
   1813   |          |  M=D
          |          |        // push this 0
   1814   |    0     |  @0
   1815   |          |  D=A
   1816   |    3     |  @3
   1817   |          |  A=M
   1818   |          |  A=A+D
   1819   |          |  D=M
   1820   |    0     |  @0
   1821   |          |  A=M
   1822   |          |  M=D
   1823   |    0     |  @0
   1824   |          |  M=M+1
          |          |        // push argument 1
   1825   |    1     |  @1
   1826   |          |  D=A
   1827   |    2     |  @2
   1828   |          |  A=M
   1829   |          |  A=A+D
   1830   |          |  D=M
   1831   |    0     |  @0
   1832   |          |  A=M
   1833   |          |  M=D
   1834   |    0     |  @0
   1835   |          |  M=M+1
          |          |        // lt
   1836   |    0     |  @0
   1837   |          |  AM=M-1
   1838   |          |  D=M
   1839   |          |  A=A-1
   1840   |          |  D=M-D
   1841   |          |  M=-1
   1842   |RAM[1846] |  @T2
   1843   |          |  D;JLT
   1844   |    0     |  @0
   1845   |          |  A=M-1
   1846   |          |  M=0
   1847   |ROM[1846] |  (T2)
          |          |        // pop this 9
   1847   |    9     |  @9
   1848   |          |  D=A
   1849   |    3     |  @3
   1850   |          |  D=D+M
   1851   | RAM[13]  |  @R13
   1852   |          |  M=D
   1853   |    0     |  @0
   1854   |          |  AM=M-1
   1855   |          |  D=M
   1856   | RAM[13]  |  @R13
   1857   |          |  A=M
   1858   |          |  M=D
          |          |        // goto Ball.setDestination_TRUE_0
   1859   |RAM[1950] |  @Ball.setDestination_TRUE_0
   1860   |          |  0;JMP
          |          |        // label Ball.setDestination_FALSE_0
   1861   |ROM[1860] |  (Ball.setDestination_FALSE_0)
          |          |        // push this 0
   1861   |    0     |  @0
   1862   |          |  D=A
   1863   |    3     |  @3
   1864   |          |  A=M
   1865   |          |  A=A+D
   1866   |          |  D=M
   1867   |    0     |  @0
   1868   |          |  A=M
   1869   |          |  M=D
   1870   |    0     |  @0
   1871   |          |  M=M+1
          |          |        // push argument 1
   1872   |    1     |  @1
   1873   |          |  D=A
   1874   |    2     |  @2
   1875   |          |  A=M
   1876   |          |  A=A+D
   1877   |          |  D=M
   1878   |    0     |  @0
   1879   |          |  A=M
   1880   |          |  M=D
   1881   |    0     |  @0
   1882   |          |  M=M+1
          |          |        // lt
   1883   |    0     |  @0
   1884   |          |  AM=M-1
   1885   |          |  D=M
   1886   |          |  A=A-1
   1887   |          |  D=M-D
   1888   |          |  M=-1
   1889   |RAM[1893] |  @T3
   1890   |          |  D;JLT
   1891   |    0     |  @0
   1892   |          |  A=M-1
   1893   |          |  M=0
   1894   |ROM[1893] |  (T3)
          |          |        // pop this 8
   1894   |    8     |  @8
   1895   |          |  D=A
   1896   |    3     |  @3
   1897   |          |  D=D+M
   1898   | RAM[13]  |  @R13
   1899   |          |  M=D
   1900   |    0     |  @0
   1901   |          |  AM=M-1
   1902   |          |  D=M
   1903   | RAM[13]  |  @R13
   1904   |          |  A=M
   1905   |          |  M=D
          |          |        // push this 1
   1906   |    1     |  @1
   1907   |          |  D=A
   1908   |    3     |  @3
   1909   |          |  A=M
   1910   |          |  A=A+D
   1911   |          |  D=M
   1912   |    0     |  @0
   1913   |          |  A=M
   1914   |          |  M=D
   1915   |    0     |  @0
   1916   |          |  M=M+1
          |          |        // push argument 2
   1917   |    2     |  @2
   1918   |          |  D=A
   1919   |    2     |  @2
   1920   |          |  A=M
   1921   |          |  A=A+D
   1922   |          |  D=M
   1923   |    0     |  @0
   1924   |          |  A=M
   1925   |          |  M=D
   1926   |    0     |  @0
   1927   |          |  M=M+1
          |          |        // lt
   1928   |    0     |  @0
   1929   |          |  AM=M-1
   1930   |          |  D=M
   1931   |          |  A=A-1
   1932   |          |  D=M-D
   1933   |          |  M=-1
   1934   |RAM[1938] |  @T4
   1935   |          |  D;JLT
   1936   |    0     |  @0
   1937   |          |  A=M-1
   1938   |          |  M=0
   1939   |ROM[1938] |  (T4)
          |          |        // pop this 9
   1939   |    9     |  @9
   1940   |          |  D=A
   1941   |    3     |  @3
   1942   |          |  D=D+M
   1943   | RAM[13]  |  @R13
   1944   |          |  M=D
   1945   |    0     |  @0
   1946   |          |  AM=M-1
   1947   |          |  D=M
   1948   | RAM[13]  |  @R13
   1949   |          |  A=M
   1950   |          |  M=D
          |          |        // label Ball.setDestination_TRUE_0
   1951   |ROM[1950] |  (Ball.setDestination_TRUE_0)
          |          |        // push constant 2
   1951   |    2     |  @2
   1952   |          |  D=A
   1953   |    0     |  @0
   1954   |          |  A=M
   1955   |          |  M=D
   1956   |    0     |  @0
   1957   |          |  M=M+1
          |          |        // push local 1
   1958   |    1     |  @1
   1959   |          |  D=A
   1960   |    1     |  @1
   1961   |          |  A=M
   1962   |          |  A=A+D
   1963   |          |  D=M
   1964   |    0     |  @0
   1965   |          |  A=M
   1966   |          |  M=D
   1967   |    0     |  @0
   1968   |          |  M=M+1
          |          |        // call Math.multiply 2
   1969   |RAM[2017] |  @Math.multiply$ret.11
   1970   |          |  D=A
   1971   |    0     |  @0
   1972   |          |  A=M
   1973   |          |  M=D
   1974   |    0     |  @0
   1975   |          |  M=M+1
   1976   |    1     |  @1
   1977   |          |  D=M
   1978   |    0     |  @0
   1979   |          |  A=M
   1980   |          |  M=D
   1981   |    0     |  @0
   1982   |          |  M=M+1
   1983   |    2     |  @2
   1984   |          |  D=M
   1985   |    0     |  @0
   1986   |          |  A=M
   1987   |          |  M=D
   1988   |    0     |  @0
   1989   |          |  M=M+1
   1990   |    3     |  @3
   1991   |          |  D=M
   1992   |    0     |  @0
   1993   |          |  A=M
   1994   |          |  M=D
   1995   |    0     |  @0
   1996   |          |  M=M+1
   1997   |    4     |  @4
   1998   |          |  D=M
   1999   |    0     |  @0
   2000   |          |  A=M
   2001   |          |  M=D
   2002   |    0     |  @0
   2003   |          |  M=M+1
   2004   |    0     |  @0
   2005   |          |  D=M
   2006   |    2     |  @2
   2007   |          |  M=D
   2008   |    7     |  @7
   2009   |          |  D=A
   2010   |    2     |  @2
   2011   |          |  M=M-D
   2012   |    0     |  @0
   2013   |          |  D=M
   2014   |    1     |  @1
   2015   |          |  M=D
   2016   | RAM[22]  |  @Math.multiply
   2017   |          |  0;JMP
   2018   |ROM[2017] |  (Math.multiply$ret.11)
          |          |        // push local 0
   2018   |    0     |  @0
   2019   |          |  D=A
   2020   |    1     |  @1
   2021   |          |  A=M
   2022   |          |  A=A+D
   2023   |          |  D=M
   2024   |    0     |  @0
   2025   |          |  A=M
   2026   |          |  M=D
   2027   |    0     |  @0
   2028   |          |  M=M+1
          |          |        // sub
   2029   |    0     |  @0
   2030   |          |  AM=M-1
   2031   |          |  D=M
   2032   |          |  A=A-1
   2033   |          |  M=M-D
          |          |        // pop this 4
   2034   |    4     |  @4
   2035   |          |  D=A
   2036   |    3     |  @3
   2037   |          |  D=D+M
   2038   | RAM[13]  |  @R13
   2039   |          |  M=D
   2040   |    0     |  @0
   2041   |          |  AM=M-1
   2042   |          |  D=M
   2043   | RAM[13]  |  @R13
   2044   |          |  A=M
   2045   |          |  M=D
          |          |        // push constant 2
   2046   |    2     |  @2
   2047   |          |  D=A
   2048   |    0     |  @0
   2049   |          |  A=M
   2050   |          |  M=D
   2051   |    0     |  @0
   2052   |          |  M=M+1
          |          |        // push local 1
   2053   |    1     |  @1
   2054   |          |  D=A
   2055   |    1     |  @1
   2056   |          |  A=M
   2057   |          |  A=A+D
   2058   |          |  D=M
   2059   |    0     |  @0
   2060   |          |  A=M
   2061   |          |  M=D
   2062   |    0     |  @0
   2063   |          |  M=M+1
          |          |        // call Math.multiply 2
   2064   |RAM[2112] |  @Math.multiply$ret.12
   2065   |          |  D=A
   2066   |    0     |  @0
   2067   |          |  A=M
   2068   |          |  M=D
   2069   |    0     |  @0
   2070   |          |  M=M+1
   2071   |    1     |  @1
   2072   |          |  D=M
   2073   |    0     |  @0
   2074   |          |  A=M
   2075   |          |  M=D
   2076   |    0     |  @0
   2077   |          |  M=M+1
   2078   |    2     |  @2
   2079   |          |  D=M
   2080   |    0     |  @0
   2081   |          |  A=M
   2082   |          |  M=D
   2083   |    0     |  @0
   2084   |          |  M=M+1
   2085   |    3     |  @3
   2086   |          |  D=M
   2087   |    0     |  @0
   2088   |          |  A=M
   2089   |          |  M=D
   2090   |    0     |  @0
   2091   |          |  M=M+1
   2092   |    4     |  @4
   2093   |          |  D=M
   2094   |    0     |  @0
   2095   |          |  A=M
   2096   |          |  M=D
   2097   |    0     |  @0
   2098   |          |  M=M+1
   2099   |    0     |  @0
   2100   |          |  D=M
   2101   |    2     |  @2
   2102   |          |  M=D
   2103   |    7     |  @7
   2104   |          |  D=A
   2105   |    2     |  @2
   2106   |          |  M=M-D
   2107   |    0     |  @0
   2108   |          |  D=M
   2109   |    1     |  @1
   2110   |          |  M=D
   2111   | RAM[22]  |  @Math.multiply
   2112   |          |  0;JMP
   2113   |ROM[2112] |  (Math.multiply$ret.12)
          |          |        // pop this 5
   2113   |    5     |  @5
   2114   |          |  D=A
   2115   |    3     |  @3
   2116   |          |  D=D+M
   2117   | RAM[13]  |  @R13
   2118   |          |  M=D
   2119   |    0     |  @0
   2120   |          |  AM=M-1
   2121   |          |  D=M
   2122   | RAM[13]  |  @R13
   2123   |          |  A=M
   2124   |          |  M=D
          |          |        // push constant 2
   2125   |    2     |  @2
   2126   |          |  D=A
   2127   |    0     |  @0
   2128   |          |  A=M
   2129   |          |  M=D
   2130   |    0     |  @0
   2131   |          |  M=M+1
          |          |        // push local 1
   2132   |    1     |  @1
   2133   |          |  D=A
   2134   |    1     |  @1
   2135   |          |  A=M
   2136   |          |  A=A+D
   2137   |          |  D=M
   2138   |    0     |  @0
   2139   |          |  A=M
   2140   |          |  M=D
   2141   |    0     |  @0
   2142   |          |  M=M+1
          |          |        // push local 0
   2143   |    0     |  @0
   2144   |          |  D=A
   2145   |    1     |  @1
   2146   |          |  A=M
   2147   |          |  A=A+D
   2148   |          |  D=M
   2149   |    0     |  @0
   2150   |          |  A=M
   2151   |          |  M=D
   2152   |    0     |  @0
   2153   |          |  M=M+1
          |          |        // sub
   2154   |    0     |  @0
   2155   |          |  AM=M-1
   2156   |          |  D=M
   2157   |          |  A=A-1
   2158   |          |  M=M-D
          |          |        // call Math.multiply 2
   2159   |RAM[2207] |  @Math.multiply$ret.13
   2160   |          |  D=A
   2161   |    0     |  @0
   2162   |          |  A=M
   2163   |          |  M=D
   2164   |    0     |  @0
   2165   |          |  M=M+1
   2166   |    1     |  @1
   2167   |          |  D=M
   2168   |    0     |  @0
   2169   |          |  A=M
   2170   |          |  M=D
   2171   |    0     |  @0
   2172   |          |  M=M+1
   2173   |    2     |  @2
   2174   |          |  D=M
   2175   |    0     |  @0
   2176   |          |  A=M
   2177   |          |  M=D
   2178   |    0     |  @0
   2179   |          |  M=M+1
   2180   |    3     |  @3
   2181   |          |  D=M
   2182   |    0     |  @0
   2183   |          |  A=M
   2184   |          |  M=D
   2185   |    0     |  @0
   2186   |          |  M=M+1
   2187   |    4     |  @4
   2188   |          |  D=M
   2189   |    0     |  @0
   2190   |          |  A=M
   2191   |          |  M=D
   2192   |    0     |  @0
   2193   |          |  M=M+1
   2194   |    0     |  @0
   2195   |          |  D=M
   2196   |    2     |  @2
   2197   |          |  M=D
   2198   |    7     |  @7
   2199   |          |  D=A
   2200   |    2     |  @2
   2201   |          |  M=M-D
   2202   |    0     |  @0
   2203   |          |  D=M
   2204   |    1     |  @1
   2205   |          |  M=D
   2206   | RAM[22]  |  @Math.multiply
   2207   |          |  0;JMP
   2208   |ROM[2207] |  (Math.multiply$ret.13)
          |          |        // pop this 6
   2208   |    6     |  @6
   2209   |          |  D=A
   2210   |    3     |  @3
   2211   |          |  D=D+M
   2212   | RAM[13]  |  @R13
   2213   |          |  M=D
   2214   |    0     |  @0
   2215   |          |  AM=M-1
   2216   |          |  D=M
   2217   | RAM[13]  |  @R13
   2218   |          |  A=M
   2219   |          |  M=D
          |          |        // push constant 0
   2220   |    0     |  @0
   2221   |          |  D=A
   2222   |    0     |  @0
   2223   |          |  A=M
   2224   |          |  M=D
   2225   |    0     |  @0
   2226   |          |  M=M+1
          |          |        // return
   2227   |    1     |  @1
   2228   |          |  D=M
   2229   |    13    |  @13
   2230   |          |  M=D
   2231   |    5     |  @5
   2232   |          |  D=A
   2233   |    13    |  @13
   2234   |          |  D=M-D
   2235   |          |  A=D
   2236   |          |  D=M
   2237   |    14    |  @14
   2238   |          |  M=D
   2239   |    0     |  @0
   2240   |          |  AM=M-1
   2241   |          |  D=M
   2242   |    2     |  @2
   2243   |          |  A=M
   2244   |          |  M=D
   2245   |    2     |  @2
   2246   |          |  D=M+1
   2247   |    0     |  @0
   2248   |          |  M=D
   2249   |    13    |  @13
   2250   |          |  M=M-1
   2251   |          |  A=M
   2252   |          |  D=M
   2253   |    4     |  @4
   2254   |          |  M=D
   2255   |    13    |  @13
   2256   |          |  M=M-1
   2257   |          |  A=M
   2258   |          |  D=M
   2259   |    3     |  @3
   2260   |          |  M=D
   2261   |    13    |  @13
   2262   |          |  M=M-1
   2263   |          |  A=M
   2264   |          |  D=M
   2265   |    2     |  @2
   2266   |          |  M=D
   2267   |    13    |  @13
   2268   |          |  M=M-1
   2269   |          |  A=M
   2270   |          |  D=M
   2271   |    1     |  @1
   2272   |          |  M=D
   2273   |    14    |  @14
   2274   |          |  A=M
   2275   |          |  0;JMP
          |          |        // /**
          |          |        // * Moves the ball one unit towards its destination.
          |          |        // * If the ball has reached a wall, returns 0.
          |          |        // * Else, returns a value according to the wall:
          |          |        // * 1 (left wall), 2 (right wall), 3 (top wall), 4 (bottom wall).
          |          |        // */
          |          |        // function Ball.move 0
   2276   |ROM[2275] |  (Ball.move)
   2276   |    0     |  @0
   2277   |          |  D=M
   2278   |    1     |  @1
   2279   |          |  M=D
          |          |        // /*
          |          |        // ARG    Ball this -> argument 0
          |          |        // */
          |          |        // push argument 0
   2280   |    0     |  @0
   2281   |          |  D=A
   2282   |    2     |  @2
   2283   |          |  A=M
   2284   |          |  A=A+D
   2285   |          |  D=M
   2286   |    0     |  @0
   2287   |          |  A=M
   2288   |          |  M=D
   2289   |    0     |  @0
   2290   |          |  M=M+1
          |          |        // pop pointer 0
   2291   |    0     |  @0
   2292   |          |  AM=M-1
   2293   |          |  D=M
   2294   |    3     |  @3
   2295   |          |  M=D
          |          |        // push pointer 0
   2296   |    3     |  @3
   2297   |          |  D=M
   2298   |    0     |  @0
   2299   |          |  A=M
   2300   |          |  M=D
   2301   |    0     |  @0
   2302   |          |  M=M+1
          |          |        // call Ball.hide 1
   2303   |RAM[2351] |  @Ball.hide$ret.14
   2304   |          |  D=A
   2305   |    0     |  @0
   2306   |          |  A=M
   2307   |          |  M=D
   2308   |    0     |  @0
   2309   |          |  M=M+1
   2310   |    1     |  @1
   2311   |          |  D=M
   2312   |    0     |  @0
   2313   |          |  A=M
   2314   |          |  M=D
   2315   |    0     |  @0
   2316   |          |  M=M+1
   2317   |    2     |  @2
   2318   |          |  D=M
   2319   |    0     |  @0
   2320   |          |  A=M
   2321   |          |  M=D
   2322   |    0     |  @0
   2323   |          |  M=M+1
   2324   |    3     |  @3
   2325   |          |  D=M
   2326   |    0     |  @0
   2327   |          |  A=M
   2328   |          |  M=D
   2329   |    0     |  @0
   2330   |          |  M=M+1
   2331   |    4     |  @4
   2332   |          |  D=M
   2333   |    0     |  @0
   2334   |          |  A=M
   2335   |          |  M=D
   2336   |    0     |  @0
   2337   |          |  M=M+1
   2338   |    0     |  @0
   2339   |          |  D=M
   2340   |    2     |  @2
   2341   |          |  M=D
   2342   |    6     |  @6
   2343   |          |  D=A
   2344   |    2     |  @2
   2345   |          |  M=M-D
   2346   |    0     |  @0
   2347   |          |  D=M
   2348   |    1     |  @1
   2349   |          |  M=D
   2350   | RAM[789] |  @Ball.hide
   2351   |          |  0;JMP
   2352   |ROM[2351] |  (Ball.hide$ret.14)
          |          |        // pop temp 0
   2352   |    0     |  @0
   2353   |          |  D=A
   2354   |    5     |  @5
   2355   |          |  D=D+A
   2356   | RAM[13]  |  @R13
   2357   |          |  M=D
   2358   |    0     |  @0
   2359   |          |  AM=M-1
   2360   |          |  D=M
   2361   | RAM[13]  |  @R13
   2362   |          |  A=M
   2363   |          |  M=D
          |          |        // push this 4
   2364   |    4     |  @4
   2365   |          |  D=A
   2366   |    3     |  @3
   2367   |          |  A=M
   2368   |          |  A=A+D
   2369   |          |  D=M
   2370   |    0     |  @0
   2371   |          |  A=M
   2372   |          |  M=D
   2373   |    0     |  @0
   2374   |          |  M=M+1
          |          |        // push constant 0
   2375   |    0     |  @0
   2376   |          |  D=A
   2377   |    0     |  @0
   2378   |          |  A=M
   2379   |          |  M=D
   2380   |    0     |  @0
   2381   |          |  M=M+1
          |          |        // lt
   2382   |    0     |  @0
   2383   |          |  AM=M-1
   2384   |          |  D=M
   2385   |          |  A=A-1
   2386   |          |  D=M-D
   2387   |          |  M=-1
   2388   |RAM[2392] |  @T5
   2389   |          |  D;JLT
   2390   |    0     |  @0
   2391   |          |  A=M-1
   2392   |          |  M=0
   2393   |ROM[2392] |  (T5)
          |          |        // not
   2393   |    0     |  @0
   2394   |          |  A=M-1
   2395   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_0
   2396   |    0     |  @0
   2397   |          |  AM=M-1
   2398   |          |  D=M
   2399   |RAM[2441] |  @Ball.move_FALSE_0
   2400   |          |  D;JNE
          |          |        // push this 4
   2401   |    4     |  @4
   2402   |          |  D=A
   2403   |    3     |  @3
   2404   |          |  A=M
   2405   |          |  A=A+D
   2406   |          |  D=M
   2407   |    0     |  @0
   2408   |          |  A=M
   2409   |          |  M=D
   2410   |    0     |  @0
   2411   |          |  M=M+1
          |          |        // push this 5
   2412   |    5     |  @5
   2413   |          |  D=A
   2414   |    3     |  @3
   2415   |          |  A=M
   2416   |          |  A=A+D
   2417   |          |  D=M
   2418   |    0     |  @0
   2419   |          |  A=M
   2420   |          |  M=D
   2421   |    0     |  @0
   2422   |          |  M=M+1
          |          |        // add
   2423   |    0     |  @0
   2424   |          |  AM=M-1
   2425   |          |  D=M
   2426   |          |  A=A-1
   2427   |          |  M=M+D
          |          |        // pop this 4
   2428   |    4     |  @4
   2429   |          |  D=A
   2430   |    3     |  @3
   2431   |          |  D=D+M
   2432   | RAM[13]  |  @R13
   2433   |          |  M=D
   2434   |    0     |  @0
   2435   |          |  AM=M-1
   2436   |          |  D=M
   2437   | RAM[13]  |  @R13
   2438   |          |  A=M
   2439   |          |  M=D
          |          |        // goto Ball.move_TRUE_0
   2440   |RAM[2683] |  @Ball.move_TRUE_0
   2441   |          |  0;JMP
          |          |        // label Ball.move_FALSE_0
   2442   |ROM[2441] |  (Ball.move_FALSE_0)
          |          |        // push this 4
   2442   |    4     |  @4
   2443   |          |  D=A
   2444   |    3     |  @3
   2445   |          |  A=M
   2446   |          |  A=A+D
   2447   |          |  D=M
   2448   |    0     |  @0
   2449   |          |  A=M
   2450   |          |  M=D
   2451   |    0     |  @0
   2452   |          |  M=M+1
          |          |        // push this 6
   2453   |    6     |  @6
   2454   |          |  D=A
   2455   |    3     |  @3
   2456   |          |  A=M
   2457   |          |  A=A+D
   2458   |          |  D=M
   2459   |    0     |  @0
   2460   |          |  A=M
   2461   |          |  M=D
   2462   |    0     |  @0
   2463   |          |  M=M+1
          |          |        // add
   2464   |    0     |  @0
   2465   |          |  AM=M-1
   2466   |          |  D=M
   2467   |          |  A=A-1
   2468   |          |  M=M+D
          |          |        // pop this 4
   2469   |    4     |  @4
   2470   |          |  D=A
   2471   |    3     |  @3
   2472   |          |  D=D+M
   2473   | RAM[13]  |  @R13
   2474   |          |  M=D
   2475   |    0     |  @0
   2476   |          |  AM=M-1
   2477   |          |  D=M
   2478   | RAM[13]  |  @R13
   2479   |          |  A=M
   2480   |          |  M=D
          |          |        // push this 9
   2481   |    9     |  @9
   2482   |          |  D=A
   2483   |    3     |  @3
   2484   |          |  A=M
   2485   |          |  A=A+D
   2486   |          |  D=M
   2487   |    0     |  @0
   2488   |          |  A=M
   2489   |          |  M=D
   2490   |    0     |  @0
   2491   |          |  M=M+1
          |          |        // not
   2492   |    0     |  @0
   2493   |          |  A=M-1
   2494   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_1
   2495   |    0     |  @0
   2496   |          |  AM=M-1
   2497   |          |  D=M
   2498   |RAM[2592] |  @Ball.move_FALSE_1
   2499   |          |  D;JNE
          |          |        // push this 7
   2500   |    7     |  @7
   2501   |          |  D=A
   2502   |    3     |  @3
   2503   |          |  A=M
   2504   |          |  A=A+D
   2505   |          |  D=M
   2506   |    0     |  @0
   2507   |          |  A=M
   2508   |          |  M=D
   2509   |    0     |  @0
   2510   |          |  M=M+1
          |          |        // not
   2511   |    0     |  @0
   2512   |          |  A=M-1
   2513   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_2
   2514   |    0     |  @0
   2515   |          |  AM=M-1
   2516   |          |  D=M
   2517   |RAM[2555] |  @Ball.move_FALSE_2
   2518   |          |  D;JNE
          |          |        // push this 0
   2519   |    0     |  @0
   2520   |          |  D=A
   2521   |    3     |  @3
   2522   |          |  A=M
   2523   |          |  A=A+D
   2524   |          |  D=M
   2525   |    0     |  @0
   2526   |          |  A=M
   2527   |          |  M=D
   2528   |    0     |  @0
   2529   |          |  M=M+1
          |          |        // push constant 4
   2530   |    4     |  @4
   2531   |          |  D=A
   2532   |    0     |  @0
   2533   |          |  A=M
   2534   |          |  M=D
   2535   |    0     |  @0
   2536   |          |  M=M+1
          |          |        // add
   2537   |    0     |  @0
   2538   |          |  AM=M-1
   2539   |          |  D=M
   2540   |          |  A=A-1
   2541   |          |  M=M+D
          |          |        // pop this 0
   2542   |    0     |  @0
   2543   |          |  D=A
   2544   |    3     |  @3
   2545   |          |  D=D+M
   2546   | RAM[13]  |  @R13
   2547   |          |  M=D
   2548   |    0     |  @0
   2549   |          |  AM=M-1
   2550   |          |  D=M
   2551   | RAM[13]  |  @R13
   2552   |          |  A=M
   2553   |          |  M=D
          |          |        // goto Ball.move_TRUE_2
   2554   |RAM[2590] |  @Ball.move_TRUE_2
   2555   |          |  0;JMP
          |          |        // label Ball.move_FALSE_2
   2556   |ROM[2555] |  (Ball.move_FALSE_2)
          |          |        // push this 1
   2556   |    1     |  @1
   2557   |          |  D=A
   2558   |    3     |  @3
   2559   |          |  A=M
   2560   |          |  A=A+D
   2561   |          |  D=M
   2562   |    0     |  @0
   2563   |          |  A=M
   2564   |          |  M=D
   2565   |    0     |  @0
   2566   |          |  M=M+1
          |          |        // push constant 4
   2567   |    4     |  @4
   2568   |          |  D=A
   2569   |    0     |  @0
   2570   |          |  A=M
   2571   |          |  M=D
   2572   |    0     |  @0
   2573   |          |  M=M+1
          |          |        // add
   2574   |    0     |  @0
   2575   |          |  AM=M-1
   2576   |          |  D=M
   2577   |          |  A=A-1
   2578   |          |  M=M+D
          |          |        // pop this 1
   2579   |    1     |  @1
   2580   |          |  D=A
   2581   |    3     |  @3
   2582   |          |  D=D+M
   2583   | RAM[13]  |  @R13
   2584   |          |  M=D
   2585   |    0     |  @0
   2586   |          |  AM=M-1
   2587   |          |  D=M
   2588   | RAM[13]  |  @R13
   2589   |          |  A=M
   2590   |          |  M=D
          |          |        // label Ball.move_TRUE_2
   2591   |ROM[2590] |  (Ball.move_TRUE_2)
          |          |        // goto Ball.move_TRUE_1
   2591   |RAM[2683] |  @Ball.move_TRUE_1
   2592   |          |  0;JMP
          |          |        // label Ball.move_FALSE_1
   2593   |ROM[2592] |  (Ball.move_FALSE_1)
          |          |        // push this 7
   2593   |    7     |  @7
   2594   |          |  D=A
   2595   |    3     |  @3
   2596   |          |  A=M
   2597   |          |  A=A+D
   2598   |          |  D=M
   2599   |    0     |  @0
   2600   |          |  A=M
   2601   |          |  M=D
   2602   |    0     |  @0
   2603   |          |  M=M+1
          |          |        // not
   2604   |    0     |  @0
   2605   |          |  A=M-1
   2606   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_3
   2607   |    0     |  @0
   2608   |          |  AM=M-1
   2609   |          |  D=M
   2610   |RAM[2648] |  @Ball.move_FALSE_3
   2611   |          |  D;JNE
          |          |        // push this 0
   2612   |    0     |  @0
   2613   |          |  D=A
   2614   |    3     |  @3
   2615   |          |  A=M
   2616   |          |  A=A+D
   2617   |          |  D=M
   2618   |    0     |  @0
   2619   |          |  A=M
   2620   |          |  M=D
   2621   |    0     |  @0
   2622   |          |  M=M+1
          |          |        // push constant 4
   2623   |    4     |  @4
   2624   |          |  D=A
   2625   |    0     |  @0
   2626   |          |  A=M
   2627   |          |  M=D
   2628   |    0     |  @0
   2629   |          |  M=M+1
          |          |        // sub
   2630   |    0     |  @0
   2631   |          |  AM=M-1
   2632   |          |  D=M
   2633   |          |  A=A-1
   2634   |          |  M=M-D
          |          |        // pop this 0
   2635   |    0     |  @0
   2636   |          |  D=A
   2637   |    3     |  @3
   2638   |          |  D=D+M
   2639   | RAM[13]  |  @R13
   2640   |          |  M=D
   2641   |    0     |  @0
   2642   |          |  AM=M-1
   2643   |          |  D=M
   2644   | RAM[13]  |  @R13
   2645   |          |  A=M
   2646   |          |  M=D
          |          |        // goto Ball.move_TRUE_3
   2647   |RAM[2683] |  @Ball.move_TRUE_3
   2648   |          |  0;JMP
          |          |        // label Ball.move_FALSE_3
   2649   |ROM[2648] |  (Ball.move_FALSE_3)
          |          |        // push this 1
   2649   |    1     |  @1
   2650   |          |  D=A
   2651   |    3     |  @3
   2652   |          |  A=M
   2653   |          |  A=A+D
   2654   |          |  D=M
   2655   |    0     |  @0
   2656   |          |  A=M
   2657   |          |  M=D
   2658   |    0     |  @0
   2659   |          |  M=M+1
          |          |        // push constant 4
   2660   |    4     |  @4
   2661   |          |  D=A
   2662   |    0     |  @0
   2663   |          |  A=M
   2664   |          |  M=D
   2665   |    0     |  @0
   2666   |          |  M=M+1
          |          |        // sub
   2667   |    0     |  @0
   2668   |          |  AM=M-1
   2669   |          |  D=M
   2670   |          |  A=A-1
   2671   |          |  M=M-D
          |          |        // pop this 1
   2672   |    1     |  @1
   2673   |          |  D=A
   2674   |    3     |  @3
   2675   |          |  D=D+M
   2676   | RAM[13]  |  @R13
   2677   |          |  M=D
   2678   |    0     |  @0
   2679   |          |  AM=M-1
   2680   |          |  D=M
   2681   | RAM[13]  |  @R13
   2682   |          |  A=M
   2683   |          |  M=D
          |          |        // label Ball.move_TRUE_3
   2684   |ROM[2683] |  (Ball.move_TRUE_3)
          |          |        // label Ball.move_TRUE_1
   2684   |ROM[2683] |  (Ball.move_TRUE_1)
          |          |        // label Ball.move_TRUE_0
   2684   |ROM[2683] |  (Ball.move_TRUE_0)
          |          |        // push this 8
   2684   |    8     |  @8
   2685   |          |  D=A
   2686   |    3     |  @3
   2687   |          |  A=M
   2688   |          |  A=A+D
   2689   |          |  D=M
   2690   |    0     |  @0
   2691   |          |  A=M
   2692   |          |  M=D
   2693   |    0     |  @0
   2694   |          |  M=M+1
          |          |        // not
   2695   |    0     |  @0
   2696   |          |  A=M-1
   2697   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_4
   2698   |    0     |  @0
   2699   |          |  AM=M-1
   2700   |          |  D=M
   2701   |RAM[2795] |  @Ball.move_FALSE_4
   2702   |          |  D;JNE
          |          |        // push this 7
   2703   |    7     |  @7
   2704   |          |  D=A
   2705   |    3     |  @3
   2706   |          |  A=M
   2707   |          |  A=A+D
   2708   |          |  D=M
   2709   |    0     |  @0
   2710   |          |  A=M
   2711   |          |  M=D
   2712   |    0     |  @0
   2713   |          |  M=M+1
          |          |        // not
   2714   |    0     |  @0
   2715   |          |  A=M-1
   2716   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_5
   2717   |    0     |  @0
   2718   |          |  AM=M-1
   2719   |          |  D=M
   2720   |RAM[2758] |  @Ball.move_FALSE_5
   2721   |          |  D;JNE
          |          |        // push this 1
   2722   |    1     |  @1
   2723   |          |  D=A
   2724   |    3     |  @3
   2725   |          |  A=M
   2726   |          |  A=A+D
   2727   |          |  D=M
   2728   |    0     |  @0
   2729   |          |  A=M
   2730   |          |  M=D
   2731   |    0     |  @0
   2732   |          |  M=M+1
          |          |        // push constant 4
   2733   |    4     |  @4
   2734   |          |  D=A
   2735   |    0     |  @0
   2736   |          |  A=M
   2737   |          |  M=D
   2738   |    0     |  @0
   2739   |          |  M=M+1
          |          |        // add
   2740   |    0     |  @0
   2741   |          |  AM=M-1
   2742   |          |  D=M
   2743   |          |  A=A-1
   2744   |          |  M=M+D
          |          |        // pop this 1
   2745   |    1     |  @1
   2746   |          |  D=A
   2747   |    3     |  @3
   2748   |          |  D=D+M
   2749   | RAM[13]  |  @R13
   2750   |          |  M=D
   2751   |    0     |  @0
   2752   |          |  AM=M-1
   2753   |          |  D=M
   2754   | RAM[13]  |  @R13
   2755   |          |  A=M
   2756   |          |  M=D
          |          |        // goto Ball.move_TRUE_5
   2757   |RAM[2793] |  @Ball.move_TRUE_5
   2758   |          |  0;JMP
          |          |        // label Ball.move_FALSE_5
   2759   |ROM[2758] |  (Ball.move_FALSE_5)
          |          |        // push this 0
   2759   |    0     |  @0
   2760   |          |  D=A
   2761   |    3     |  @3
   2762   |          |  A=M
   2763   |          |  A=A+D
   2764   |          |  D=M
   2765   |    0     |  @0
   2766   |          |  A=M
   2767   |          |  M=D
   2768   |    0     |  @0
   2769   |          |  M=M+1
          |          |        // push constant 4
   2770   |    4     |  @4
   2771   |          |  D=A
   2772   |    0     |  @0
   2773   |          |  A=M
   2774   |          |  M=D
   2775   |    0     |  @0
   2776   |          |  M=M+1
          |          |        // add
   2777   |    0     |  @0
   2778   |          |  AM=M-1
   2779   |          |  D=M
   2780   |          |  A=A-1
   2781   |          |  M=M+D
          |          |        // pop this 0
   2782   |    0     |  @0
   2783   |          |  D=A
   2784   |    3     |  @3
   2785   |          |  D=D+M
   2786   | RAM[13]  |  @R13
   2787   |          |  M=D
   2788   |    0     |  @0
   2789   |          |  AM=M-1
   2790   |          |  D=M
   2791   | RAM[13]  |  @R13
   2792   |          |  A=M
   2793   |          |  M=D
          |          |        // label Ball.move_TRUE_5
   2794   |ROM[2793] |  (Ball.move_TRUE_5)
          |          |        // goto Ball.move_TRUE_4
   2794   |RAM[2886] |  @Ball.move_TRUE_4
   2795   |          |  0;JMP
          |          |        // label Ball.move_FALSE_4
   2796   |ROM[2795] |  (Ball.move_FALSE_4)
          |          |        // push this 7
   2796   |    7     |  @7
   2797   |          |  D=A
   2798   |    3     |  @3
   2799   |          |  A=M
   2800   |          |  A=A+D
   2801   |          |  D=M
   2802   |    0     |  @0
   2803   |          |  A=M
   2804   |          |  M=D
   2805   |    0     |  @0
   2806   |          |  M=M+1
          |          |        // not
   2807   |    0     |  @0
   2808   |          |  A=M-1
   2809   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_6
   2810   |    0     |  @0
   2811   |          |  AM=M-1
   2812   |          |  D=M
   2813   |RAM[2851] |  @Ball.move_FALSE_6
   2814   |          |  D;JNE
          |          |        // push this 1
   2815   |    1     |  @1
   2816   |          |  D=A
   2817   |    3     |  @3
   2818   |          |  A=M
   2819   |          |  A=A+D
   2820   |          |  D=M
   2821   |    0     |  @0
   2822   |          |  A=M
   2823   |          |  M=D
   2824   |    0     |  @0
   2825   |          |  M=M+1
          |          |        // push constant 4
   2826   |    4     |  @4
   2827   |          |  D=A
   2828   |    0     |  @0
   2829   |          |  A=M
   2830   |          |  M=D
   2831   |    0     |  @0
   2832   |          |  M=M+1
          |          |        // sub
   2833   |    0     |  @0
   2834   |          |  AM=M-1
   2835   |          |  D=M
   2836   |          |  A=A-1
   2837   |          |  M=M-D
          |          |        // pop this 1
   2838   |    1     |  @1
   2839   |          |  D=A
   2840   |    3     |  @3
   2841   |          |  D=D+M
   2842   | RAM[13]  |  @R13
   2843   |          |  M=D
   2844   |    0     |  @0
   2845   |          |  AM=M-1
   2846   |          |  D=M
   2847   | RAM[13]  |  @R13
   2848   |          |  A=M
   2849   |          |  M=D
          |          |        // goto Ball.move_TRUE_6
   2850   |RAM[2886] |  @Ball.move_TRUE_6
   2851   |          |  0;JMP
          |          |        // label Ball.move_FALSE_6
   2852   |ROM[2851] |  (Ball.move_FALSE_6)
          |          |        // push this 0
   2852   |    0     |  @0
   2853   |          |  D=A
   2854   |    3     |  @3
   2855   |          |  A=M
   2856   |          |  A=A+D
   2857   |          |  D=M
   2858   |    0     |  @0
   2859   |          |  A=M
   2860   |          |  M=D
   2861   |    0     |  @0
   2862   |          |  M=M+1
          |          |        // push constant 4
   2863   |    4     |  @4
   2864   |          |  D=A
   2865   |    0     |  @0
   2866   |          |  A=M
   2867   |          |  M=D
   2868   |    0     |  @0
   2869   |          |  M=M+1
          |          |        // sub
   2870   |    0     |  @0
   2871   |          |  AM=M-1
   2872   |          |  D=M
   2873   |          |  A=A-1
   2874   |          |  M=M-D
          |          |        // pop this 0
   2875   |    0     |  @0
   2876   |          |  D=A
   2877   |    3     |  @3
   2878   |          |  D=D+M
   2879   | RAM[13]  |  @R13
   2880   |          |  M=D
   2881   |    0     |  @0
   2882   |          |  AM=M-1
   2883   |          |  D=M
   2884   | RAM[13]  |  @R13
   2885   |          |  A=M
   2886   |          |  M=D
          |          |        // label Ball.move_TRUE_6
   2887   |ROM[2886] |  (Ball.move_TRUE_6)
          |          |        // label Ball.move_TRUE_4
   2887   |ROM[2886] |  (Ball.move_TRUE_4)
          |          |        // push this 0
   2887   |    0     |  @0
   2888   |          |  D=A
   2889   |    3     |  @3
   2890   |          |  A=M
   2891   |          |  A=A+D
   2892   |          |  D=M
   2893   |    0     |  @0
   2894   |          |  A=M
   2895   |          |  M=D
   2896   |    0     |  @0
   2897   |          |  M=M+1
          |          |        // push this 10
   2898   |    10    |  @10
   2899   |          |  D=A
   2900   |    3     |  @3
   2901   |          |  A=M
   2902   |          |  A=A+D
   2903   |          |  D=M
   2904   |    0     |  @0
   2905   |          |  A=M
   2906   |          |  M=D
   2907   |    0     |  @0
   2908   |          |  M=M+1
          |          |        // gt
   2909   |    0     |  @0
   2910   |          |  AM=M-1
   2911   |          |  D=M
   2912   |          |  A=A-1
   2913   |          |  D=M-D
   2914   |          |  M=-1
   2915   |RAM[2919] |  @T6
   2916   |          |  D;JGT
   2917   |    0     |  @0
   2918   |          |  A=M-1
   2919   |          |  M=0
   2920   |ROM[2919] |  (T6)
          |          |        // not
   2920   |    0     |  @0
   2921   |          |  A=M-1
   2922   |          |  M=!M
          |          |        // not
   2923   |    0     |  @0
   2924   |          |  A=M-1
   2925   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_7
   2926   |    0     |  @0
   2927   |          |  AM=M-1
   2928   |          |  D=M
   2929   |RAM[2974] |  @Ball.move_FALSE_7
   2930   |          |  D;JNE
          |          |        // push constant 1
   2931   |    1     |  @1
   2932   |          |  D=A
   2933   |    0     |  @0
   2934   |          |  A=M
   2935   |          |  M=D
   2936   |    0     |  @0
   2937   |          |  M=M+1
          |          |        // pop this 14
   2938   |    14    |  @14
   2939   |          |  D=A
   2940   |    3     |  @3
   2941   |          |  D=D+M
   2942   | RAM[13]  |  @R13
   2943   |          |  M=D
   2944   |    0     |  @0
   2945   |          |  AM=M-1
   2946   |          |  D=M
   2947   | RAM[13]  |  @R13
   2948   |          |  A=M
   2949   |          |  M=D
          |          |        // push this 10
   2950   |    10    |  @10
   2951   |          |  D=A
   2952   |    3     |  @3
   2953   |          |  A=M
   2954   |          |  A=A+D
   2955   |          |  D=M
   2956   |    0     |  @0
   2957   |          |  A=M
   2958   |          |  M=D
   2959   |    0     |  @0
   2960   |          |  M=M+1
          |          |        // pop this 0
   2961   |    0     |  @0
   2962   |          |  D=A
   2963   |    3     |  @3
   2964   |          |  D=D+M
   2965   | RAM[13]  |  @R13
   2966   |          |  M=D
   2967   |    0     |  @0
   2968   |          |  AM=M-1
   2969   |          |  D=M
   2970   | RAM[13]  |  @R13
   2971   |          |  A=M
   2972   |          |  M=D
          |          |        // goto Ball.move_TRUE_7
   2973   |RAM[2974] |  @Ball.move_TRUE_7
   2974   |          |  0;JMP
          |          |        // label Ball.move_FALSE_7
   2975   |ROM[2974] |  (Ball.move_FALSE_7)
          |          |        // label Ball.move_TRUE_7
   2975   |ROM[2974] |  (Ball.move_TRUE_7)
          |          |        // push this 0
   2975   |    0     |  @0
   2976   |          |  D=A
   2977   |    3     |  @3
   2978   |          |  A=M
   2979   |          |  A=A+D
   2980   |          |  D=M
   2981   |    0     |  @0
   2982   |          |  A=M
   2983   |          |  M=D
   2984   |    0     |  @0
   2985   |          |  M=M+1
          |          |        // push this 11
   2986   |    11    |  @11
   2987   |          |  D=A
   2988   |    3     |  @3
   2989   |          |  A=M
   2990   |          |  A=A+D
   2991   |          |  D=M
   2992   |    0     |  @0
   2993   |          |  A=M
   2994   |          |  M=D
   2995   |    0     |  @0
   2996   |          |  M=M+1
          |          |        // lt
   2997   |    0     |  @0
   2998   |          |  AM=M-1
   2999   |          |  D=M
   3000   |          |  A=A-1
   3001   |          |  D=M-D
   3002   |          |  M=-1
   3003   |RAM[3007] |  @T7
   3004   |          |  D;JLT
   3005   |    0     |  @0
   3006   |          |  A=M-1
   3007   |          |  M=0
   3008   |ROM[3007] |  (T7)
          |          |        // not
   3008   |    0     |  @0
   3009   |          |  A=M-1
   3010   |          |  M=!M
          |          |        // not
   3011   |    0     |  @0
   3012   |          |  A=M-1
   3013   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_8
   3014   |    0     |  @0
   3015   |          |  AM=M-1
   3016   |          |  D=M
   3017   |RAM[3062] |  @Ball.move_FALSE_8
   3018   |          |  D;JNE
          |          |        // push constant 2
   3019   |    2     |  @2
   3020   |          |  D=A
   3021   |    0     |  @0
   3022   |          |  A=M
   3023   |          |  M=D
   3024   |    0     |  @0
   3025   |          |  M=M+1
          |          |        // pop this 14
   3026   |    14    |  @14
   3027   |          |  D=A
   3028   |    3     |  @3
   3029   |          |  D=D+M
   3030   | RAM[13]  |  @R13
   3031   |          |  M=D
   3032   |    0     |  @0
   3033   |          |  AM=M-1
   3034   |          |  D=M
   3035   | RAM[13]  |  @R13
   3036   |          |  A=M
   3037   |          |  M=D
          |          |        // push this 11
   3038   |    11    |  @11
   3039   |          |  D=A
   3040   |    3     |  @3
   3041   |          |  A=M
   3042   |          |  A=A+D
   3043   |          |  D=M
   3044   |    0     |  @0
   3045   |          |  A=M
   3046   |          |  M=D
   3047   |    0     |  @0
   3048   |          |  M=M+1
          |          |        // pop this 0
   3049   |    0     |  @0
   3050   |          |  D=A
   3051   |    3     |  @3
   3052   |          |  D=D+M
   3053   | RAM[13]  |  @R13
   3054   |          |  M=D
   3055   |    0     |  @0
   3056   |          |  AM=M-1
   3057   |          |  D=M
   3058   | RAM[13]  |  @R13
   3059   |          |  A=M
   3060   |          |  M=D
          |          |        // goto Ball.move_TRUE_8
   3061   |RAM[3062] |  @Ball.move_TRUE_8
   3062   |          |  0;JMP
          |          |        // label Ball.move_FALSE_8
   3063   |ROM[3062] |  (Ball.move_FALSE_8)
          |          |        // label Ball.move_TRUE_8
   3063   |ROM[3062] |  (Ball.move_TRUE_8)
          |          |        // push this 1
   3063   |    1     |  @1
   3064   |          |  D=A
   3065   |    3     |  @3
   3066   |          |  A=M
   3067   |          |  A=A+D
   3068   |          |  D=M
   3069   |    0     |  @0
   3070   |          |  A=M
   3071   |          |  M=D
   3072   |    0     |  @0
   3073   |          |  M=M+1
          |          |        // push this 12
   3074   |    12    |  @12
   3075   |          |  D=A
   3076   |    3     |  @3
   3077   |          |  A=M
   3078   |          |  A=A+D
   3079   |          |  D=M
   3080   |    0     |  @0
   3081   |          |  A=M
   3082   |          |  M=D
   3083   |    0     |  @0
   3084   |          |  M=M+1
          |          |        // gt
   3085   |    0     |  @0
   3086   |          |  AM=M-1
   3087   |          |  D=M
   3088   |          |  A=A-1
   3089   |          |  D=M-D
   3090   |          |  M=-1
   3091   |RAM[3095] |  @T8
   3092   |          |  D;JGT
   3093   |    0     |  @0
   3094   |          |  A=M-1
   3095   |          |  M=0
   3096   |ROM[3095] |  (T8)
          |          |        // not
   3096   |    0     |  @0
   3097   |          |  A=M-1
   3098   |          |  M=!M
          |          |        // not
   3099   |    0     |  @0
   3100   |          |  A=M-1
   3101   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_9
   3102   |    0     |  @0
   3103   |          |  AM=M-1
   3104   |          |  D=M
   3105   |RAM[3150] |  @Ball.move_FALSE_9
   3106   |          |  D;JNE
          |          |        // push constant 3
   3107   |    3     |  @3
   3108   |          |  D=A
   3109   |    0     |  @0
   3110   |          |  A=M
   3111   |          |  M=D
   3112   |    0     |  @0
   3113   |          |  M=M+1
          |          |        // pop this 14
   3114   |    14    |  @14
   3115   |          |  D=A
   3116   |    3     |  @3
   3117   |          |  D=D+M
   3118   | RAM[13]  |  @R13
   3119   |          |  M=D
   3120   |    0     |  @0
   3121   |          |  AM=M-1
   3122   |          |  D=M
   3123   | RAM[13]  |  @R13
   3124   |          |  A=M
   3125   |          |  M=D
          |          |        // push this 12
   3126   |    12    |  @12
   3127   |          |  D=A
   3128   |    3     |  @3
   3129   |          |  A=M
   3130   |          |  A=A+D
   3131   |          |  D=M
   3132   |    0     |  @0
   3133   |          |  A=M
   3134   |          |  M=D
   3135   |    0     |  @0
   3136   |          |  M=M+1
          |          |        // pop this 1
   3137   |    1     |  @1
   3138   |          |  D=A
   3139   |    3     |  @3
   3140   |          |  D=D+M
   3141   | RAM[13]  |  @R13
   3142   |          |  M=D
   3143   |    0     |  @0
   3144   |          |  AM=M-1
   3145   |          |  D=M
   3146   | RAM[13]  |  @R13
   3147   |          |  A=M
   3148   |          |  M=D
          |          |        // goto Ball.move_TRUE_9
   3149   |RAM[3150] |  @Ball.move_TRUE_9
   3150   |          |  0;JMP
          |          |        // label Ball.move_FALSE_9
   3151   |ROM[3150] |  (Ball.move_FALSE_9)
          |          |        // label Ball.move_TRUE_9
   3151   |ROM[3150] |  (Ball.move_TRUE_9)
          |          |        // push this 1
   3151   |    1     |  @1
   3152   |          |  D=A
   3153   |    3     |  @3
   3154   |          |  A=M
   3155   |          |  A=A+D
   3156   |          |  D=M
   3157   |    0     |  @0
   3158   |          |  A=M
   3159   |          |  M=D
   3160   |    0     |  @0
   3161   |          |  M=M+1
          |          |        // push this 13
   3162   |    13    |  @13
   3163   |          |  D=A
   3164   |    3     |  @3
   3165   |          |  A=M
   3166   |          |  A=A+D
   3167   |          |  D=M
   3168   |    0     |  @0
   3169   |          |  A=M
   3170   |          |  M=D
   3171   |    0     |  @0
   3172   |          |  M=M+1
          |          |        // lt
   3173   |    0     |  @0
   3174   |          |  AM=M-1
   3175   |          |  D=M
   3176   |          |  A=A-1
   3177   |          |  D=M-D
   3178   |          |  M=-1
   3179   |RAM[3183] |  @T9
   3180   |          |  D;JLT
   3181   |    0     |  @0
   3182   |          |  A=M-1
   3183   |          |  M=0
   3184   |ROM[3183] |  (T9)
          |          |        // not
   3184   |    0     |  @0
   3185   |          |  A=M-1
   3186   |          |  M=!M
          |          |        // not
   3187   |    0     |  @0
   3188   |          |  A=M-1
   3189   |          |  M=!M
          |          |        // if-goto Ball.move_FALSE_10
   3190   |    0     |  @0
   3191   |          |  AM=M-1
   3192   |          |  D=M
   3193   |RAM[3238] |  @Ball.move_FALSE_10
   3194   |          |  D;JNE
          |          |        // push constant 4
   3195   |    4     |  @4
   3196   |          |  D=A
   3197   |    0     |  @0
   3198   |          |  A=M
   3199   |          |  M=D
   3200   |    0     |  @0
   3201   |          |  M=M+1
          |          |        // pop this 14
   3202   |    14    |  @14
   3203   |          |  D=A
   3204   |    3     |  @3
   3205   |          |  D=D+M
   3206   | RAM[13]  |  @R13
   3207   |          |  M=D
   3208   |    0     |  @0
   3209   |          |  AM=M-1
   3210   |          |  D=M
   3211   | RAM[13]  |  @R13
   3212   |          |  A=M
   3213   |          |  M=D
          |          |        // push this 13
   3214   |    13    |  @13
   3215   |          |  D=A
   3216   |    3     |  @3
   3217   |          |  A=M
   3218   |          |  A=A+D
   3219   |          |  D=M
   3220   |    0     |  @0
   3221   |          |  A=M
   3222   |          |  M=D
   3223   |    0     |  @0
   3224   |          |  M=M+1
          |          |        // pop this 1
   3225   |    1     |  @1
   3226   |          |  D=A
   3227   |    3     |  @3
   3228   |          |  D=D+M
   3229   | RAM[13]  |  @R13
   3230   |          |  M=D
   3231   |    0     |  @0
   3232   |          |  AM=M-1
   3233   |          |  D=M
   3234   | RAM[13]  |  @R13
   3235   |          |  A=M
   3236   |          |  M=D
          |          |        // goto Ball.move_TRUE_10
   3237   |RAM[3238] |  @Ball.move_TRUE_10
   3238   |          |  0;JMP
          |          |        // label Ball.move_FALSE_10
   3239   |ROM[3238] |  (Ball.move_FALSE_10)
          |          |        // label Ball.move_TRUE_10
   3239   |ROM[3238] |  (Ball.move_TRUE_10)
          |          |        // push pointer 0
   3239   |    3     |  @3
   3240   |          |  D=M
   3241   |    0     |  @0
   3242   |          |  A=M
   3243   |          |  M=D
   3244   |    0     |  @0
   3245   |          |  M=M+1
          |          |        // call Ball.show 1
   3246   |RAM[3294] |  @Ball.show$ret.15
   3247   |          |  D=A
   3248   |    0     |  @0
   3249   |          |  A=M
   3250   |          |  M=D
   3251   |    0     |  @0
   3252   |          |  M=M+1
   3253   |    1     |  @1
   3254   |          |  D=M
   3255   |    0     |  @0
   3256   |          |  A=M
   3257   |          |  M=D
   3258   |    0     |  @0
   3259   |          |  M=M+1
   3260   |    2     |  @2
   3261   |          |  D=M
   3262   |    0     |  @0
   3263   |          |  A=M
   3264   |          |  M=D
   3265   |    0     |  @0
   3266   |          |  M=M+1
   3267   |    3     |  @3
   3268   |          |  D=M
   3269   |    0     |  @0
   3270   |          |  A=M
   3271   |          |  M=D
   3272   |    0     |  @0
   3273   |          |  M=M+1
   3274   |    4     |  @4
   3275   |          |  D=M
   3276   |    0     |  @0
   3277   |          |  A=M
   3278   |          |  M=D
   3279   |    0     |  @0
   3280   |          |  M=M+1
   3281   |    0     |  @0
   3282   |          |  D=M
   3283   |    2     |  @2
   3284   |          |  M=D
   3285   |    6     |  @6
   3286   |          |  D=A
   3287   |    2     |  @2
   3288   |          |  M=M-D
   3289   |    0     |  @0
   3290   |          |  D=M
   3291   |    1     |  @1
   3292   |          |  M=D
   3293   | RAM[574] |  @Ball.show
   3294   |          |  0;JMP
   3295   |ROM[3294] |  (Ball.show$ret.15)
          |          |        // pop temp 0
   3295   |    0     |  @0
   3296   |          |  D=A
   3297   |    5     |  @5
   3298   |          |  D=D+A
   3299   | RAM[13]  |  @R13
   3300   |          |  M=D
   3301   |    0     |  @0
   3302   |          |  AM=M-1
   3303   |          |  D=M
   3304   | RAM[13]  |  @R13
   3305   |          |  A=M
   3306   |          |  M=D
          |          |        // push this 14
   3307   |    14    |  @14
   3308   |          |  D=A
   3309   |    3     |  @3
   3310   |          |  A=M
   3311   |          |  A=A+D
   3312   |          |  D=M
   3313   |    0     |  @0
   3314   |          |  A=M
   3315   |          |  M=D
   3316   |    0     |  @0
   3317   |          |  M=M+1
          |          |        // return
   3318   |    1     |  @1
   3319   |          |  D=M
   3320   |    13    |  @13
   3321   |          |  M=D
   3322   |    5     |  @5
   3323   |          |  D=A
   3324   |    13    |  @13
   3325   |          |  D=M-D
   3326   |          |  A=D
   3327   |          |  D=M
   3328   |    14    |  @14
   3329   |          |  M=D
   3330   |    0     |  @0
   3331   |          |  AM=M-1
   3332   |          |  D=M
   3333   |    2     |  @2
   3334   |          |  A=M
   3335   |          |  M=D
   3336   |    2     |  @2
   3337   |          |  D=M+1
   3338   |    0     |  @0
   3339   |          |  M=D
   3340   |    13    |  @13
   3341   |          |  M=M-1
   3342   |          |  A=M
   3343   |          |  D=M
   3344   |    4     |  @4
   3345   |          |  M=D
   3346   |    13    |  @13
   3347   |          |  M=M-1
   3348   |          |  A=M
   3349   |          |  D=M
   3350   |    3     |  @3
   3351   |          |  M=D
   3352   |    13    |  @13
   3353   |          |  M=M-1
   3354   |          |  A=M
   3355   |          |  D=M
   3356   |    2     |  @2
   3357   |          |  M=D
   3358   |    13    |  @13
   3359   |          |  M=M-1
   3360   |          |  A=M
   3361   |          |  D=M
   3362   |    1     |  @1
   3363   |          |  M=D
   3364   |    14    |  @14
   3365   |          |  A=M
   3366   |          |  0;JMP
          |          |        // /**
          |          |        // * Bounces off the current wall: sets the new destination
          |          |        // * of the ball according to the ball's angle and the given
          |          |        // * bouncing direction (-1/0/1=left/center/right or up/center/down).
          |          |        // */
          |          |        // function Ball.bounce 5
   3367   |ROM[3366] |  (Ball.bounce)
   3367   |    0     |  @0
   3368   |          |  D=M
   3369   |    1     |  @1
   3370   |          |  M=D
   3371   |    0     |  @0
   3372   |          |  A=M
   3373   |          |  M=0
   3374   |    0     |  @0
   3375   |          |  M=M+1
   3376   |    0     |  @0
   3377   |          |  A=M
   3378   |          |  M=0
   3379   |    0     |  @0
   3380   |          |  M=M+1
   3381   |    0     |  @0
   3382   |          |  A=M
   3383   |          |  M=0
   3384   |    0     |  @0
   3385   |          |  M=M+1
   3386   |    0     |  @0
   3387   |          |  A=M
   3388   |          |  M=0
   3389   |    0     |  @0
   3390   |          |  M=M+1
   3391   |    0     |  @0
   3392   |          |  A=M
   3393   |          |  M=0
   3394   |    0     |  @0
   3395   |          |  M=M+1
          |          |        // /*
          |          |        // ARG    Ball this              -> argument 0
          |          |        // ARG    int  bouncingDirection -> argument 1
          |          |        // VAR    int  newx              -> local    0
          |          |        // VAR    int  newy              -> local    1
          |          |        // VAR    int  divLengthx        -> local    2
          |          |        // VAR    int  divLengthy        -> local    3
          |          |        // VAR    int  factor            -> local    4
          |          |        // */
          |          |        // push argument 0
   3396   |    0     |  @0
   3397   |          |  D=A
   3398   |    2     |  @2
   3399   |          |  A=M
   3400   |          |  A=A+D
   3401   |          |  D=M
   3402   |    0     |  @0
   3403   |          |  A=M
   3404   |          |  M=D
   3405   |    0     |  @0
   3406   |          |  M=M+1
          |          |        // pop pointer 0
   3407   |    0     |  @0
   3408   |          |  AM=M-1
   3409   |          |  D=M
   3410   |    3     |  @3
   3411   |          |  M=D
          |          |        // push this 2
   3412   |    2     |  @2
   3413   |          |  D=A
   3414   |    3     |  @3
   3415   |          |  A=M
   3416   |          |  A=A+D
   3417   |          |  D=M
   3418   |    0     |  @0
   3419   |          |  A=M
   3420   |          |  M=D
   3421   |    0     |  @0
   3422   |          |  M=M+1
          |          |        // push constant 10
   3423   |    10    |  @10
   3424   |          |  D=A
   3425   |    0     |  @0
   3426   |          |  A=M
   3427   |          |  M=D
   3428   |    0     |  @0
   3429   |          |  M=M+1
          |          |        // call Math.divide 2
   3430   |RAM[3478] |  @Math.divide$ret.16
   3431   |          |  D=A
   3432   |    0     |  @0
   3433   |          |  A=M
   3434   |          |  M=D
   3435   |    0     |  @0
   3436   |          |  M=M+1
   3437   |    1     |  @1
   3438   |          |  D=M
   3439   |    0     |  @0
   3440   |          |  A=M
   3441   |          |  M=D
   3442   |    0     |  @0
   3443   |          |  M=M+1
   3444   |    2     |  @2
   3445   |          |  D=M
   3446   |    0     |  @0
   3447   |          |  A=M
   3448   |          |  M=D
   3449   |    0     |  @0
   3450   |          |  M=M+1
   3451   |    3     |  @3
   3452   |          |  D=M
   3453   |    0     |  @0
   3454   |          |  A=M
   3455   |          |  M=D
   3456   |    0     |  @0
   3457   |          |  M=M+1
   3458   |    4     |  @4
   3459   |          |  D=M
   3460   |    0     |  @0
   3461   |          |  A=M
   3462   |          |  M=D
   3463   |    0     |  @0
   3464   |          |  M=M+1
   3465   |    0     |  @0
   3466   |          |  D=M
   3467   |    2     |  @2
   3468   |          |  M=D
   3469   |    7     |  @7
   3470   |          |  D=A
   3471   |    2     |  @2
   3472   |          |  M=M-D
   3473   |    0     |  @0
   3474   |          |  D=M
   3475   |    1     |  @1
   3476   |          |  M=D
   3477   | RAM[23]  |  @Math.divide
   3478   |          |  0;JMP
   3479   |ROM[3478] |  (Math.divide$ret.16)
          |          |        // pop local 2
   3479   |    2     |  @2
   3480   |          |  D=A
   3481   |    1     |  @1
   3482   |          |  D=D+M
   3483   | RAM[13]  |  @R13
   3484   |          |  M=D
   3485   |    0     |  @0
   3486   |          |  AM=M-1
   3487   |          |  D=M
   3488   | RAM[13]  |  @R13
   3489   |          |  A=M
   3490   |          |  M=D
          |          |        // push this 3
   3491   |    3     |  @3
   3492   |          |  D=A
   3493   |    3     |  @3
   3494   |          |  A=M
   3495   |          |  A=A+D
   3496   |          |  D=M
   3497   |    0     |  @0
   3498   |          |  A=M
   3499   |          |  M=D
   3500   |    0     |  @0
   3501   |          |  M=M+1
          |          |        // push constant 10
   3502   |    10    |  @10
   3503   |          |  D=A
   3504   |    0     |  @0
   3505   |          |  A=M
   3506   |          |  M=D
   3507   |    0     |  @0
   3508   |          |  M=M+1
          |          |        // call Math.divide 2
   3509   |RAM[3557] |  @Math.divide$ret.17
   3510   |          |  D=A
   3511   |    0     |  @0
   3512   |          |  A=M
   3513   |          |  M=D
   3514   |    0     |  @0
   3515   |          |  M=M+1
   3516   |    1     |  @1
   3517   |          |  D=M
   3518   |    0     |  @0
   3519   |          |  A=M
   3520   |          |  M=D
   3521   |    0     |  @0
   3522   |          |  M=M+1
   3523   |    2     |  @2
   3524   |          |  D=M
   3525   |    0     |  @0
   3526   |          |  A=M
   3527   |          |  M=D
   3528   |    0     |  @0
   3529   |          |  M=M+1
   3530   |    3     |  @3
   3531   |          |  D=M
   3532   |    0     |  @0
   3533   |          |  A=M
   3534   |          |  M=D
   3535   |    0     |  @0
   3536   |          |  M=M+1
   3537   |    4     |  @4
   3538   |          |  D=M
   3539   |    0     |  @0
   3540   |          |  A=M
   3541   |          |  M=D
   3542   |    0     |  @0
   3543   |          |  M=M+1
   3544   |    0     |  @0
   3545   |          |  D=M
   3546   |    2     |  @2
   3547   |          |  M=D
   3548   |    7     |  @7
   3549   |          |  D=A
   3550   |    2     |  @2
   3551   |          |  M=M-D
   3552   |    0     |  @0
   3553   |          |  D=M
   3554   |    1     |  @1
   3555   |          |  M=D
   3556   | RAM[23]  |  @Math.divide
   3557   |          |  0;JMP
   3558   |ROM[3557] |  (Math.divide$ret.17)
          |          |        // pop local 3
   3558   |    3     |  @3
   3559   |          |  D=A
   3560   |    1     |  @1
   3561   |          |  D=D+M
   3562   | RAM[13]  |  @R13
   3563   |          |  M=D
   3564   |    0     |  @0
   3565   |          |  AM=M-1
   3566   |          |  D=M
   3567   | RAM[13]  |  @R13
   3568   |          |  A=M
   3569   |          |  M=D
          |          |        // push argument 1
   3570   |    1     |  @1
   3571   |          |  D=A
   3572   |    2     |  @2
   3573   |          |  A=M
   3574   |          |  A=A+D
   3575   |          |  D=M
   3576   |    0     |  @0
   3577   |          |  A=M
   3578   |          |  M=D
   3579   |    0     |  @0
   3580   |          |  M=M+1
          |          |        // push constant 0
   3581   |    0     |  @0
   3582   |          |  D=A
   3583   |    0     |  @0
   3584   |          |  A=M
   3585   |          |  M=D
   3586   |    0     |  @0
   3587   |          |  M=M+1
          |          |        // eq
   3588   |    0     |  @0
   3589   |          |  AM=M-1
   3590   |          |  D=M
   3591   |          |  A=A-1
   3592   |          |  D=M-D
   3593   |          |  M=-1
   3594   |RAM[3598] |  @T10
   3595   |          |  D;JEQ
   3596   |    0     |  @0
   3597   |          |  A=M-1
   3598   |          |  M=0
   3599   |ROM[3598] |  (T10)
          |          |        // not
   3599   |    0     |  @0
   3600   |          |  A=M-1
   3601   |          |  M=!M
          |          |        // if-goto Ball.bounce_FALSE_0
   3602   |    0     |  @0
   3603   |          |  AM=M-1
   3604   |          |  D=M
   3605   |RAM[3627] |  @Ball.bounce_FALSE_0
   3606   |          |  D;JNE
          |          |        // push constant 10
   3607   |    10    |  @10
   3608   |          |  D=A
   3609   |    0     |  @0
   3610   |          |  A=M
   3611   |          |  M=D
   3612   |    0     |  @0
   3613   |          |  M=M+1
          |          |        // pop local 4
   3614   |    4     |  @4
   3615   |          |  D=A
   3616   |    1     |  @1
   3617   |          |  D=D+M
   3618   | RAM[13]  |  @R13
   3619   |          |  M=D
   3620   |    0     |  @0
   3621   |          |  AM=M-1
   3622   |          |  D=M
   3623   | RAM[13]  |  @R13
   3624   |          |  A=M
   3625   |          |  M=D
          |          |        // goto Ball.bounce_TRUE_0
   3626   |RAM[3812] |  @Ball.bounce_TRUE_0
   3627   |          |  0;JMP
          |          |        // label Ball.bounce_FALSE_0
   3628   |ROM[3627] |  (Ball.bounce_FALSE_0)
          |          |        // push this 2
   3628   |    2     |  @2
   3629   |          |  D=A
   3630   |    3     |  @3
   3631   |          |  A=M
   3632   |          |  A=A+D
   3633   |          |  D=M
   3634   |    0     |  @0
   3635   |          |  A=M
   3636   |          |  M=D
   3637   |    0     |  @0
   3638   |          |  M=M+1
          |          |        // push constant 0
   3639   |    0     |  @0
   3640   |          |  D=A
   3641   |    0     |  @0
   3642   |          |  A=M
   3643   |          |  M=D
   3644   |    0     |  @0
   3645   |          |  M=M+1
          |          |        // lt
   3646   |    0     |  @0
   3647   |          |  AM=M-1
   3648   |          |  D=M
   3649   |          |  A=A-1
   3650   |          |  D=M-D
   3651   |          |  M=-1
   3652   |RAM[3656] |  @T11
   3653   |          |  D;JLT
   3654   |    0     |  @0
   3655   |          |  A=M-1
   3656   |          |  M=0
   3657   |ROM[3656] |  (T11)
          |          |        // not
   3657   |    0     |  @0
   3658   |          |  A=M-1
   3659   |          |  M=!M
          |          |        // push argument 1
   3660   |    1     |  @1
   3661   |          |  D=A
   3662   |    2     |  @2
   3663   |          |  A=M
   3664   |          |  A=A+D
   3665   |          |  D=M
   3666   |    0     |  @0
   3667   |          |  A=M
   3668   |          |  M=D
   3669   |    0     |  @0
   3670   |          |  M=M+1
          |          |        // push constant 1
   3671   |    1     |  @1
   3672   |          |  D=A
   3673   |    0     |  @0
   3674   |          |  A=M
   3675   |          |  M=D
   3676   |    0     |  @0
   3677   |          |  M=M+1
          |          |        // eq
   3678   |    0     |  @0
   3679   |          |  AM=M-1
   3680   |          |  D=M
   3681   |          |  A=A-1
   3682   |          |  D=M-D
   3683   |          |  M=-1
   3684   |RAM[3688] |  @T12
   3685   |          |  D;JEQ
   3686   |    0     |  @0
   3687   |          |  A=M-1
   3688   |          |  M=0
   3689   |ROM[3688] |  (T12)
          |          |        // and
   3689   |    0     |  @0
   3690   |          |  AM=M-1
   3691   |          |  D=M
   3692   |          |  A=A-1
   3693   |          |  M=M&D
          |          |        // push this 2
   3694   |    2     |  @2
   3695   |          |  D=A
   3696   |    3     |  @3
   3697   |          |  A=M
   3698   |          |  A=A+D
   3699   |          |  D=M
   3700   |    0     |  @0
   3701   |          |  A=M
   3702   |          |  M=D
   3703   |    0     |  @0
   3704   |          |  M=M+1
          |          |        // push constant 0
   3705   |    0     |  @0
   3706   |          |  D=A
   3707   |    0     |  @0
   3708   |          |  A=M
   3709   |          |  M=D
   3710   |    0     |  @0
   3711   |          |  M=M+1
          |          |        // lt
   3712   |    0     |  @0
   3713   |          |  AM=M-1
   3714   |          |  D=M
   3715   |          |  A=A-1
   3716   |          |  D=M-D
   3717   |          |  M=-1
   3718   |RAM[3722] |  @T13
   3719   |          |  D;JLT
   3720   |    0     |  @0
   3721   |          |  A=M-1
   3722   |          |  M=0
   3723   |ROM[3722] |  (T13)
          |          |        // push argument 1
   3723   |    1     |  @1
   3724   |          |  D=A
   3725   |    2     |  @2
   3726   |          |  A=M
   3727   |          |  A=A+D
   3728   |          |  D=M
   3729   |    0     |  @0
   3730   |          |  A=M
   3731   |          |  M=D
   3732   |    0     |  @0
   3733   |          |  M=M+1
          |          |        // push constant 1
   3734   |    1     |  @1
   3735   |          |  D=A
   3736   |    0     |  @0
   3737   |          |  A=M
   3738   |          |  M=D
   3739   |    0     |  @0
   3740   |          |  M=M+1
          |          |        // neg
   3741   |    0     |  @0
   3742   |          |  A=M-1
   3743   |          |  M=-M
          |          |        // eq
   3744   |    0     |  @0
   3745   |          |  AM=M-1
   3746   |          |  D=M
   3747   |          |  A=A-1
   3748   |          |  D=M-D
   3749   |          |  M=-1
   3750   |RAM[3754] |  @T14
   3751   |          |  D;JEQ
   3752   |    0     |  @0
   3753   |          |  A=M-1
   3754   |          |  M=0
   3755   |ROM[3754] |  (T14)
          |          |        // and
   3755   |    0     |  @0
   3756   |          |  AM=M-1
   3757   |          |  D=M
   3758   |          |  A=A-1
   3759   |          |  M=M&D
          |          |        // or
   3760   |    0     |  @0
   3761   |          |  AM=M-1
   3762   |          |  D=M
   3763   |          |  A=A-1
   3764   |          |  M=M|D
          |          |        // not
   3765   |    0     |  @0
   3766   |          |  A=M-1
   3767   |          |  M=!M
          |          |        // if-goto Ball.bounce_FALSE_1
   3768   |    0     |  @0
   3769   |          |  AM=M-1
   3770   |          |  D=M
   3771   |RAM[3793] |  @Ball.bounce_FALSE_1
   3772   |          |  D;JNE
          |          |        // push constant 20
   3773   |    20    |  @20
   3774   |          |  D=A
   3775   |    0     |  @0
   3776   |          |  A=M
   3777   |          |  M=D
   3778   |    0     |  @0
   3779   |          |  M=M+1
          |          |        // pop local 4
   3780   |    4     |  @4
   3781   |          |  D=A
   3782   |    1     |  @1
   3783   |          |  D=D+M
   3784   | RAM[13]  |  @R13
   3785   |          |  M=D
   3786   |    0     |  @0
   3787   |          |  AM=M-1
   3788   |          |  D=M
   3789   | RAM[13]  |  @R13
   3790   |          |  A=M
   3791   |          |  M=D
          |          |        // goto Ball.bounce_TRUE_1
   3792   |RAM[3812] |  @Ball.bounce_TRUE_1
   3793   |          |  0;JMP
          |          |        // label Ball.bounce_FALSE_1
   3794   |ROM[3793] |  (Ball.bounce_FALSE_1)
          |          |        // push constant 5
   3794   |    5     |  @5
   3795   |          |  D=A
   3796   |    0     |  @0
   3797   |          |  A=M
   3798   |          |  M=D
   3799   |    0     |  @0
   3800   |          |  M=M+1
          |          |        // pop local 4
   3801   |    4     |  @4
   3802   |          |  D=A
   3803   |    1     |  @1
   3804   |          |  D=D+M
   3805   | RAM[13]  |  @R13
   3806   |          |  M=D
   3807   |    0     |  @0
   3808   |          |  AM=M-1
   3809   |          |  D=M
   3810   | RAM[13]  |  @R13
   3811   |          |  A=M
   3812   |          |  M=D
          |          |        // label Ball.bounce_TRUE_1
   3813   |ROM[3812] |  (Ball.bounce_TRUE_1)
          |          |        // label Ball.bounce_TRUE_0
   3813   |ROM[3812] |  (Ball.bounce_TRUE_0)
          |          |        // push this 14
   3813   |    14    |  @14
   3814   |          |  D=A
   3815   |    3     |  @3
   3816   |          |  A=M
   3817   |          |  A=A+D
   3818   |          |  D=M
   3819   |    0     |  @0
   3820   |          |  A=M
   3821   |          |  M=D
   3822   |    0     |  @0
   3823   |          |  M=M+1
          |          |        // push constant 1
   3824   |    1     |  @1
   3825   |          |  D=A
   3826   |    0     |  @0
   3827   |          |  A=M
   3828   |          |  M=D
   3829   |    0     |  @0
   3830   |          |  M=M+1
          |          |        // eq
   3831   |    0     |  @0
   3832   |          |  AM=M-1
   3833   |          |  D=M
   3834   |          |  A=A-1
   3835   |          |  D=M-D
   3836   |          |  M=-1
   3837   |RAM[3841] |  @T15
   3838   |          |  D;JEQ
   3839   |    0     |  @0
   3840   |          |  A=M-1
   3841   |          |  M=0
   3842   |ROM[3841] |  (T15)
          |          |        // not
   3842   |    0     |  @0
   3843   |          |  A=M-1
   3844   |          |  M=!M
          |          |        // if-goto Ball.bounce_FALSE_2
   3845   |    0     |  @0
   3846   |          |  AM=M-1
   3847   |          |  D=M
   3848   |RAM[4111] |  @Ball.bounce_FALSE_2
   3849   |          |  D;JNE
          |          |        // push constant 506
   3850   |   506    |  @506
   3851   |          |  D=A
   3852   |    0     |  @0
   3853   |          |  A=M
   3854   |          |  M=D
   3855   |    0     |  @0
   3856   |          |  M=M+1
          |          |        // pop local 0
   3857   |    0     |  @0
   3858   |          |  D=A
   3859   |    1     |  @1
   3860   |          |  D=D+M
   3861   | RAM[13]  |  @R13
   3862   |          |  M=D
   3863   |    0     |  @0
   3864   |          |  AM=M-1
   3865   |          |  D=M
   3866   | RAM[13]  |  @R13
   3867   |          |  A=M
   3868   |          |  M=D
          |          |        // push local 3
   3869   |    3     |  @3
   3870   |          |  D=A
   3871   |    1     |  @1
   3872   |          |  A=M
   3873   |          |  A=A+D
   3874   |          |  D=M
   3875   |    0     |  @0
   3876   |          |  A=M
   3877   |          |  M=D
   3878   |    0     |  @0
   3879   |          |  M=M+1
          |          |        // push constant 50
   3880   |    50    |  @50
   3881   |          |  D=A
   3882   |    0     |  @0
   3883   |          |  A=M
   3884   |          |  M=D
   3885   |    0     |  @0
   3886   |          |  M=M+1
          |          |        // neg
   3887   |    0     |  @0
   3888   |          |  A=M-1
   3889   |          |  M=-M
          |          |        // call Math.multiply 2
   3890   |RAM[3938] |  @Math.multiply$ret.18
   3891   |          |  D=A
   3892   |    0     |  @0
   3893   |          |  A=M
   3894   |          |  M=D
   3895   |    0     |  @0
   3896   |          |  M=M+1
   3897   |    1     |  @1
   3898   |          |  D=M
   3899   |    0     |  @0
   3900   |          |  A=M
   3901   |          |  M=D
   3902   |    0     |  @0
   3903   |          |  M=M+1
   3904   |    2     |  @2
   3905   |          |  D=M
   3906   |    0     |  @0
   3907   |          |  A=M
   3908   |          |  M=D
   3909   |    0     |  @0
   3910   |          |  M=M+1
   3911   |    3     |  @3
   3912   |          |  D=M
   3913   |    0     |  @0
   3914   |          |  A=M
   3915   |          |  M=D
   3916   |    0     |  @0
   3917   |          |  M=M+1
   3918   |    4     |  @4
   3919   |          |  D=M
   3920   |    0     |  @0
   3921   |          |  A=M
   3922   |          |  M=D
   3923   |    0     |  @0
   3924   |          |  M=M+1
   3925   |    0     |  @0
   3926   |          |  D=M
   3927   |    2     |  @2
   3928   |          |  M=D
   3929   |    7     |  @7
   3930   |          |  D=A
   3931   |    2     |  @2
   3932   |          |  M=M-D
   3933   |    0     |  @0
   3934   |          |  D=M
   3935   |    1     |  @1
   3936   |          |  M=D
   3937   | RAM[22]  |  @Math.multiply
   3938   |          |  0;JMP
   3939   |ROM[3938] |  (Math.multiply$ret.18)
          |          |        // push local 2
   3939   |    2     |  @2
   3940   |          |  D=A
   3941   |    1     |  @1
   3942   |          |  A=M
   3943   |          |  A=A+D
   3944   |          |  D=M
   3945   |    0     |  @0
   3946   |          |  A=M
   3947   |          |  M=D
   3948   |    0     |  @0
   3949   |          |  M=M+1
          |          |        // call Math.divide 2
   3950   |RAM[3998] |  @Math.divide$ret.19
   3951   |          |  D=A
   3952   |    0     |  @0
   3953   |          |  A=M
   3954   |          |  M=D
   3955   |    0     |  @0
   3956   |          |  M=M+1
   3957   |    1     |  @1
   3958   |          |  D=M
   3959   |    0     |  @0
   3960   |          |  A=M
   3961   |          |  M=D
   3962   |    0     |  @0
   3963   |          |  M=M+1
   3964   |    2     |  @2
   3965   |          |  D=M
   3966   |    0     |  @0
   3967   |          |  A=M
   3968   |          |  M=D
   3969   |    0     |  @0
   3970   |          |  M=M+1
   3971   |    3     |  @3
   3972   |          |  D=M
   3973   |    0     |  @0
   3974   |          |  A=M
   3975   |          |  M=D
   3976   |    0     |  @0
   3977   |          |  M=M+1
   3978   |    4     |  @4
   3979   |          |  D=M
   3980   |    0     |  @0
   3981   |          |  A=M
   3982   |          |  M=D
   3983   |    0     |  @0
   3984   |          |  M=M+1
   3985   |    0     |  @0
   3986   |          |  D=M
   3987   |    2     |  @2
   3988   |          |  M=D
   3989   |    7     |  @7
   3990   |          |  D=A
   3991   |    2     |  @2
   3992   |          |  M=M-D
   3993   |    0     |  @0
   3994   |          |  D=M
   3995   |    1     |  @1
   3996   |          |  M=D
   3997   | RAM[23]  |  @Math.divide
   3998   |          |  0;JMP
   3999   |ROM[3998] |  (Math.divide$ret.19)
          |          |        // pop local 1
   3999   |    1     |  @1
   4000   |          |  D=A
   4001   |    1     |  @1
   4002   |          |  D=D+M
   4003   | RAM[13]  |  @R13
   4004   |          |  M=D
   4005   |    0     |  @0
   4006   |          |  AM=M-1
   4007   |          |  D=M
   4008   | RAM[13]  |  @R13
   4009   |          |  A=M
   4010   |          |  M=D
          |          |        // push this 1
   4011   |    1     |  @1
   4012   |          |  D=A
   4013   |    3     |  @3
   4014   |          |  A=M
   4015   |          |  A=A+D
   4016   |          |  D=M
   4017   |    0     |  @0
   4018   |          |  A=M
   4019   |          |  M=D
   4020   |    0     |  @0
   4021   |          |  M=M+1
          |          |        // push local 1
   4022   |    1     |  @1
   4023   |          |  D=A
   4024   |    1     |  @1
   4025   |          |  A=M
   4026   |          |  A=A+D
   4027   |          |  D=M
   4028   |    0     |  @0
   4029   |          |  A=M
   4030   |          |  M=D
   4031   |    0     |  @0
   4032   |          |  M=M+1
          |          |        // push local 4
   4033   |    4     |  @4
   4034   |          |  D=A
   4035   |    1     |  @1
   4036   |          |  A=M
   4037   |          |  A=A+D
   4038   |          |  D=M
   4039   |    0     |  @0
   4040   |          |  A=M
   4041   |          |  M=D
   4042   |    0     |  @0
   4043   |          |  M=M+1
          |          |        // call Math.multiply 2
   4044   |RAM[4092] |  @Math.multiply$ret.20
   4045   |          |  D=A
   4046   |    0     |  @0
   4047   |          |  A=M
   4048   |          |  M=D
   4049   |    0     |  @0
   4050   |          |  M=M+1
   4051   |    1     |  @1
   4052   |          |  D=M
   4053   |    0     |  @0
   4054   |          |  A=M
   4055   |          |  M=D
   4056   |    0     |  @0
   4057   |          |  M=M+1
   4058   |    2     |  @2
   4059   |          |  D=M
   4060   |    0     |  @0
   4061   |          |  A=M
   4062   |          |  M=D
   4063   |    0     |  @0
   4064   |          |  M=M+1
   4065   |    3     |  @3
   4066   |          |  D=M
   4067   |    0     |  @0
   4068   |          |  A=M
   4069   |          |  M=D
   4070   |    0     |  @0
   4071   |          |  M=M+1
   4072   |    4     |  @4
   4073   |          |  D=M
   4074   |    0     |  @0
   4075   |          |  A=M
   4076   |          |  M=D
   4077   |    0     |  @0
   4078   |          |  M=M+1
   4079   |    0     |  @0
   4080   |          |  D=M
   4081   |    2     |  @2
   4082   |          |  M=D
   4083   |    7     |  @7
   4084   |          |  D=A
   4085   |    2     |  @2
   4086   |          |  M=M-D
   4087   |    0     |  @0
   4088   |          |  D=M
   4089   |    1     |  @1
   4090   |          |  M=D
   4091   | RAM[22]  |  @Math.multiply
   4092   |          |  0;JMP
   4093   |ROM[4092] |  (Math.multiply$ret.20)
          |          |        // add
   4093   |    0     |  @0
   4094   |          |  AM=M-1
   4095   |          |  D=M
   4096   |          |  A=A-1
   4097   |          |  M=M+D
          |          |        // pop local 1
   4098   |    1     |  @1
   4099   |          |  D=A
   4100   |    1     |  @1
   4101   |          |  D=D+M
   4102   | RAM[13]  |  @R13
   4103   |          |  M=D
   4104   |    0     |  @0
   4105   |          |  AM=M-1
   4106   |          |  D=M
   4107   | RAM[13]  |  @R13
   4108   |          |  A=M
   4109   |          |  M=D
          |          |        // goto Ball.bounce_TRUE_2
   4110   |RAM[4963] |  @Ball.bounce_TRUE_2
   4111   |          |  0;JMP
          |          |        // label Ball.bounce_FALSE_2
   4112   |ROM[4111] |  (Ball.bounce_FALSE_2)
          |          |        // push this 14
   4112   |    14    |  @14
   4113   |          |  D=A
   4114   |    3     |  @3
   4115   |          |  A=M
   4116   |          |  A=A+D
   4117   |          |  D=M
   4118   |    0     |  @0
   4119   |          |  A=M
   4120   |          |  M=D
   4121   |    0     |  @0
   4122   |          |  M=M+1
          |          |        // push constant 2
   4123   |    2     |  @2
   4124   |          |  D=A
   4125   |    0     |  @0
   4126   |          |  A=M
   4127   |          |  M=D
   4128   |    0     |  @0
   4129   |          |  M=M+1
          |          |        // eq
   4130   |    0     |  @0
   4131   |          |  AM=M-1
   4132   |          |  D=M
   4133   |          |  A=A-1
   4134   |          |  D=M-D
   4135   |          |  M=-1
   4136   |RAM[4140] |  @T16
   4137   |          |  D;JEQ
   4138   |    0     |  @0
   4139   |          |  A=M-1
   4140   |          |  M=0
   4141   |ROM[4140] |  (T16)
          |          |        // not
   4141   |    0     |  @0
   4142   |          |  A=M-1
   4143   |          |  M=!M
          |          |        // if-goto Ball.bounce_FALSE_3
   4144   |    0     |  @0
   4145   |          |  AM=M-1
   4146   |          |  D=M
   4147   |RAM[4407] |  @Ball.bounce_FALSE_3
   4148   |          |  D;JNE
          |          |        // push constant 0
   4149   |    0     |  @0
   4150   |          |  D=A
   4151   |    0     |  @0
   4152   |          |  A=M
   4153   |          |  M=D
   4154   |    0     |  @0
   4155   |          |  M=M+1
          |          |        // pop local 0
   4156   |    0     |  @0
   4157   |          |  D=A
   4158   |    1     |  @1
   4159   |          |  D=D+M
   4160   | RAM[13]  |  @R13
   4161   |          |  M=D
   4162   |    0     |  @0
   4163   |          |  AM=M-1
   4164   |          |  D=M
   4165   | RAM[13]  |  @R13
   4166   |          |  A=M
   4167   |          |  M=D
          |          |        // push local 3
   4168   |    3     |  @3
   4169   |          |  D=A
   4170   |    1     |  @1
   4171   |          |  A=M
   4172   |          |  A=A+D
   4173   |          |  D=M
   4174   |    0     |  @0
   4175   |          |  A=M
   4176   |          |  M=D
   4177   |    0     |  @0
   4178   |          |  M=M+1
          |          |        // push constant 50
   4179   |    50    |  @50
   4180   |          |  D=A
   4181   |    0     |  @0
   4182   |          |  A=M
   4183   |          |  M=D
   4184   |    0     |  @0
   4185   |          |  M=M+1
          |          |        // call Math.multiply 2
   4186   |RAM[4234] |  @Math.multiply$ret.21
   4187   |          |  D=A
   4188   |    0     |  @0
   4189   |          |  A=M
   4190   |          |  M=D
   4191   |    0     |  @0
   4192   |          |  M=M+1
   4193   |    1     |  @1
   4194   |          |  D=M
   4195   |    0     |  @0
   4196   |          |  A=M
   4197   |          |  M=D
   4198   |    0     |  @0
   4199   |          |  M=M+1
   4200   |    2     |  @2
   4201   |          |  D=M
   4202   |    0     |  @0
   4203   |          |  A=M
   4204   |          |  M=D
   4205   |    0     |  @0
   4206   |          |  M=M+1
   4207   |    3     |  @3
   4208   |          |  D=M
   4209   |    0     |  @0
   4210   |          |  A=M
   4211   |          |  M=D
   4212   |    0     |  @0
   4213   |          |  M=M+1
   4214   |    4     |  @4
   4215   |          |  D=M
   4216   |    0     |  @0
   4217   |          |  A=M
   4218   |          |  M=D
   4219   |    0     |  @0
   4220   |          |  M=M+1
   4221   |    0     |  @0
   4222   |          |  D=M
   4223   |    2     |  @2
   4224   |          |  M=D
   4225   |    7     |  @7
   4226   |          |  D=A
   4227   |    2     |  @2
   4228   |          |  M=M-D
   4229   |    0     |  @0
   4230   |          |  D=M
   4231   |    1     |  @1
   4232   |          |  M=D
   4233   | RAM[22]  |  @Math.multiply
   4234   |          |  0;JMP
   4235   |ROM[4234] |  (Math.multiply$ret.21)
          |          |        // push local 2
   4235   |    2     |  @2
   4236   |          |  D=A
   4237   |    1     |  @1
   4238   |          |  A=M
   4239   |          |  A=A+D
   4240   |          |  D=M
   4241   |    0     |  @0
   4242   |          |  A=M
   4243   |          |  M=D
   4244   |    0     |  @0
   4245   |          |  M=M+1
          |          |        // call Math.divide 2
   4246   |RAM[4294] |  @Math.divide$ret.22
   4247   |          |  D=A
   4248   |    0     |  @0
   4249   |          |  A=M
   4250   |          |  M=D
   4251   |    0     |  @0
   4252   |          |  M=M+1
   4253   |    1     |  @1
   4254   |          |  D=M
   4255   |    0     |  @0
   4256   |          |  A=M
   4257   |          |  M=D
   4258   |    0     |  @0
   4259   |          |  M=M+1
   4260   |    2     |  @2
   4261   |          |  D=M
   4262   |    0     |  @0
   4263   |          |  A=M
   4264   |          |  M=D
   4265   |    0     |  @0
   4266   |          |  M=M+1
   4267   |    3     |  @3
   4268   |          |  D=M
   4269   |    0     |  @0
   4270   |          |  A=M
   4271   |          |  M=D
   4272   |    0     |  @0
   4273   |          |  M=M+1
   4274   |    4     |  @4
   4275   |          |  D=M
   4276   |    0     |  @0
   4277   |          |  A=M
   4278   |          |  M=D
   4279   |    0     |  @0
   4280   |          |  M=M+1
   4281   |    0     |  @0
   4282   |          |  D=M
   4283   |    2     |  @2
   4284   |          |  M=D
   4285   |    7     |  @7
   4286   |          |  D=A
   4287   |    2     |  @2
   4288   |          |  M=M-D
   4289   |    0     |  @0
   4290   |          |  D=M
   4291   |    1     |  @1
   4292   |          |  M=D
   4293   | RAM[23]  |  @Math.divide
   4294   |          |  0;JMP
   4295   |ROM[4294] |  (Math.divide$ret.22)
          |          |        // pop local 1
   4295   |    1     |  @1
   4296   |          |  D=A
   4297   |    1     |  @1
   4298   |          |  D=D+M
   4299   | RAM[13]  |  @R13
   4300   |          |  M=D
   4301   |    0     |  @0
   4302   |          |  AM=M-1
   4303   |          |  D=M
   4304   | RAM[13]  |  @R13
   4305   |          |  A=M
   4306   |          |  M=D
          |          |        // push this 1
   4307   |    1     |  @1
   4308   |          |  D=A
   4309   |    3     |  @3
   4310   |          |  A=M
   4311   |          |  A=A+D
   4312   |          |  D=M
   4313   |    0     |  @0
   4314   |          |  A=M
   4315   |          |  M=D
   4316   |    0     |  @0
   4317   |          |  M=M+1
          |          |        // push local 1
   4318   |    1     |  @1
   4319   |          |  D=A
   4320   |    1     |  @1
   4321   |          |  A=M
   4322   |          |  A=A+D
   4323   |          |  D=M
   4324   |    0     |  @0
   4325   |          |  A=M
   4326   |          |  M=D
   4327   |    0     |  @0
   4328   |          |  M=M+1
          |          |        // push local 4
   4329   |    4     |  @4
   4330   |          |  D=A
   4331   |    1     |  @1
   4332   |          |  A=M
   4333   |          |  A=A+D
   4334   |          |  D=M
   4335   |    0     |  @0
   4336   |          |  A=M
   4337   |          |  M=D
   4338   |    0     |  @0
   4339   |          |  M=M+1
          |          |        // call Math.multiply 2
   4340   |RAM[4388] |  @Math.multiply$ret.23
   4341   |          |  D=A
   4342   |    0     |  @0
   4343   |          |  A=M
   4344   |          |  M=D
   4345   |    0     |  @0
   4346   |          |  M=M+1
   4347   |    1     |  @1
   4348   |          |  D=M
   4349   |    0     |  @0
   4350   |          |  A=M
   4351   |          |  M=D
   4352   |    0     |  @0
   4353   |          |  M=M+1
   4354   |    2     |  @2
   4355   |          |  D=M
   4356   |    0     |  @0
   4357   |          |  A=M
   4358   |          |  M=D
   4359   |    0     |  @0
   4360   |          |  M=M+1
   4361   |    3     |  @3
   4362   |          |  D=M
   4363   |    0     |  @0
   4364   |          |  A=M
   4365   |          |  M=D
   4366   |    0     |  @0
   4367   |          |  M=M+1
   4368   |    4     |  @4
   4369   |          |  D=M
   4370   |    0     |  @0
   4371   |          |  A=M
   4372   |          |  M=D
   4373   |    0     |  @0
   4374   |          |  M=M+1
   4375   |    0     |  @0
   4376   |          |  D=M
   4377   |    2     |  @2
   4378   |          |  M=D
   4379   |    7     |  @7
   4380   |          |  D=A
   4381   |    2     |  @2
   4382   |          |  M=M-D
   4383   |    0     |  @0
   4384   |          |  D=M
   4385   |    1     |  @1
   4386   |          |  M=D
   4387   | RAM[22]  |  @Math.multiply
   4388   |          |  0;JMP
   4389   |ROM[4388] |  (Math.multiply$ret.23)
          |          |        // add
   4389   |    0     |  @0
   4390   |          |  AM=M-1
   4391   |          |  D=M
   4392   |          |  A=A-1
   4393   |          |  M=M+D
          |          |        // pop local 1
   4394   |    1     |  @1
   4395   |          |  D=A
   4396   |    1     |  @1
   4397   |          |  D=D+M
   4398   | RAM[13]  |  @R13
   4399   |          |  M=D
   4400   |    0     |  @0
   4401   |          |  AM=M-1
   4402   |          |  D=M
   4403   | RAM[13]  |  @R13
   4404   |          |  A=M
   4405   |          |  M=D
          |          |        // goto Ball.bounce_TRUE_3
   4406   |RAM[4963] |  @Ball.bounce_TRUE_3
   4407   |          |  0;JMP
          |          |        // label Ball.bounce_FALSE_3
   4408   |ROM[4407] |  (Ball.bounce_FALSE_3)
          |          |        // push this 14
   4408   |    14    |  @14
   4409   |          |  D=A
   4410   |    3     |  @3
   4411   |          |  A=M
   4412   |          |  A=A+D
   4413   |          |  D=M
   4414   |    0     |  @0
   4415   |          |  A=M
   4416   |          |  M=D
   4417   |    0     |  @0
   4418   |          |  M=M+1
          |          |        // push constant 3
   4419   |    3     |  @3
   4420   |          |  D=A
   4421   |    0     |  @0
   4422   |          |  A=M
   4423   |          |  M=D
   4424   |    0     |  @0
   4425   |          |  M=M+1
          |          |        // eq
   4426   |    0     |  @0
   4427   |          |  AM=M-1
   4428   |          |  D=M
   4429   |          |  A=A-1
   4430   |          |  D=M-D
   4431   |          |  M=-1
   4432   |RAM[4436] |  @T17
   4433   |          |  D;JEQ
   4434   |    0     |  @0
   4435   |          |  A=M-1
   4436   |          |  M=0
   4437   |ROM[4436] |  (T17)
          |          |        // not
   4437   |    0     |  @0
   4438   |          |  A=M-1
   4439   |          |  M=!M
          |          |        // if-goto Ball.bounce_FALSE_4
   4440   |    0     |  @0
   4441   |          |  AM=M-1
   4442   |          |  D=M
   4443   |RAM[4706] |  @Ball.bounce_FALSE_4
   4444   |          |  D;JNE
          |          |        // push constant 250
   4445   |   250    |  @250
   4446   |          |  D=A
   4447   |    0     |  @0
   4448   |          |  A=M
   4449   |          |  M=D
   4450   |    0     |  @0
   4451   |          |  M=M+1
          |          |        // pop local 1
   4452   |    1     |  @1
   4453   |          |  D=A
   4454   |    1     |  @1
   4455   |          |  D=D+M
   4456   | RAM[13]  |  @R13
   4457   |          |  M=D
   4458   |    0     |  @0
   4459   |          |  AM=M-1
   4460   |          |  D=M
   4461   | RAM[13]  |  @R13
   4462   |          |  A=M
   4463   |          |  M=D
          |          |        // push local 2
   4464   |    2     |  @2
   4465   |          |  D=A
   4466   |    1     |  @1
   4467   |          |  A=M
   4468   |          |  A=A+D
   4469   |          |  D=M
   4470   |    0     |  @0
   4471   |          |  A=M
   4472   |          |  M=D
   4473   |    0     |  @0
   4474   |          |  M=M+1
          |          |        // push constant 25
   4475   |    25    |  @25
   4476   |          |  D=A
   4477   |    0     |  @0
   4478   |          |  A=M
   4479   |          |  M=D
   4480   |    0     |  @0
   4481   |          |  M=M+1
          |          |        // neg
   4482   |    0     |  @0
   4483   |          |  A=M-1
   4484   |          |  M=-M
          |          |        // call Math.multiply 2
   4485   |RAM[4533] |  @Math.multiply$ret.24
   4486   |          |  D=A
   4487   |    0     |  @0
   4488   |          |  A=M
   4489   |          |  M=D
   4490   |    0     |  @0
   4491   |          |  M=M+1
   4492   |    1     |  @1
   4493   |          |  D=M
   4494   |    0     |  @0
   4495   |          |  A=M
   4496   |          |  M=D
   4497   |    0     |  @0
   4498   |          |  M=M+1
   4499   |    2     |  @2
   4500   |          |  D=M
   4501   |    0     |  @0
   4502   |          |  A=M
   4503   |          |  M=D
   4504   |    0     |  @0
   4505   |          |  M=M+1
   4506   |    3     |  @3
   4507   |          |  D=M
   4508   |    0     |  @0
   4509   |          |  A=M
   4510   |          |  M=D
   4511   |    0     |  @0
   4512   |          |  M=M+1
   4513   |    4     |  @4
   4514   |          |  D=M
   4515   |    0     |  @0
   4516   |          |  A=M
   4517   |          |  M=D
   4518   |    0     |  @0
   4519   |          |  M=M+1
   4520   |    0     |  @0
   4521   |          |  D=M
   4522   |    2     |  @2
   4523   |          |  M=D
   4524   |    7     |  @7
   4525   |          |  D=A
   4526   |    2     |  @2
   4527   |          |  M=M-D
   4528   |    0     |  @0
   4529   |          |  D=M
   4530   |    1     |  @1
   4531   |          |  M=D
   4532   | RAM[22]  |  @Math.multiply
   4533   |          |  0;JMP
   4534   |ROM[4533] |  (Math.multiply$ret.24)
          |          |        // push local 3
   4534   |    3     |  @3
   4535   |          |  D=A
   4536   |    1     |  @1
   4537   |          |  A=M
   4538   |          |  A=A+D
   4539   |          |  D=M
   4540   |    0     |  @0
   4541   |          |  A=M
   4542   |          |  M=D
   4543   |    0     |  @0
   4544   |          |  M=M+1
          |          |        // call Math.divide 2
   4545   |RAM[4593] |  @Math.divide$ret.25
   4546   |          |  D=A
   4547   |    0     |  @0
   4548   |          |  A=M
   4549   |          |  M=D
   4550   |    0     |  @0
   4551   |          |  M=M+1
   4552   |    1     |  @1
   4553   |          |  D=M
   4554   |    0     |  @0
   4555   |          |  A=M
   4556   |          |  M=D
   4557   |    0     |  @0
   4558   |          |  M=M+1
   4559   |    2     |  @2
   4560   |          |  D=M
   4561   |    0     |  @0
   4562   |          |  A=M
   4563   |          |  M=D
   4564   |    0     |  @0
   4565   |          |  M=M+1
   4566   |    3     |  @3
   4567   |          |  D=M
   4568   |    0     |  @0
   4569   |          |  A=M
   4570   |          |  M=D
   4571   |    0     |  @0
   4572   |          |  M=M+1
   4573   |    4     |  @4
   4574   |          |  D=M
   4575   |    0     |  @0
   4576   |          |  A=M
   4577   |          |  M=D
   4578   |    0     |  @0
   4579   |          |  M=M+1
   4580   |    0     |  @0
   4581   |          |  D=M
   4582   |    2     |  @2
   4583   |          |  M=D
   4584   |    7     |  @7
   4585   |          |  D=A
   4586   |    2     |  @2
   4587   |          |  M=M-D
   4588   |    0     |  @0
   4589   |          |  D=M
   4590   |    1     |  @1
   4591   |          |  M=D
   4592   | RAM[23]  |  @Math.divide
   4593   |          |  0;JMP
   4594   |ROM[4593] |  (Math.divide$ret.25)
          |          |        // pop local 0
   4594   |    0     |  @0
   4595   |          |  D=A
   4596   |    1     |  @1
   4597   |          |  D=D+M
   4598   | RAM[13]  |  @R13
   4599   |          |  M=D
   4600   |    0     |  @0
   4601   |          |  AM=M-1
   4602   |          |  D=M
   4603   | RAM[13]  |  @R13
   4604   |          |  A=M
   4605   |          |  M=D
          |          |        // push this 0
   4606   |    0     |  @0
   4607   |          |  D=A
   4608   |    3     |  @3
   4609   |          |  A=M
   4610   |          |  A=A+D
   4611   |          |  D=M
   4612   |    0     |  @0
   4613   |          |  A=M
   4614   |          |  M=D
   4615   |    0     |  @0
   4616   |          |  M=M+1
          |          |        // push local 0
   4617   |    0     |  @0
   4618   |          |  D=A
   4619   |    1     |  @1
   4620   |          |  A=M
   4621   |          |  A=A+D
   4622   |          |  D=M
   4623   |    0     |  @0
   4624   |          |  A=M
   4625   |          |  M=D
   4626   |    0     |  @0
   4627   |          |  M=M+1
          |          |        // push local 4
   4628   |    4     |  @4
   4629   |          |  D=A
   4630   |    1     |  @1
   4631   |          |  A=M
   4632   |          |  A=A+D
   4633   |          |  D=M
   4634   |    0     |  @0
   4635   |          |  A=M
   4636   |          |  M=D
   4637   |    0     |  @0
   4638   |          |  M=M+1
          |          |        // call Math.multiply 2
   4639   |RAM[4687] |  @Math.multiply$ret.26
   4640   |          |  D=A
   4641   |    0     |  @0
   4642   |          |  A=M
   4643   |          |  M=D
   4644   |    0     |  @0
   4645   |          |  M=M+1
   4646   |    1     |  @1
   4647   |          |  D=M
   4648   |    0     |  @0
   4649   |          |  A=M
   4650   |          |  M=D
   4651   |    0     |  @0
   4652   |          |  M=M+1
   4653   |    2     |  @2
   4654   |          |  D=M
   4655   |    0     |  @0
   4656   |          |  A=M
   4657   |          |  M=D
   4658   |    0     |  @0
   4659   |          |  M=M+1
   4660   |    3     |  @3
   4661   |          |  D=M
   4662   |    0     |  @0
   4663   |          |  A=M
   4664   |          |  M=D
   4665   |    0     |  @0
   4666   |          |  M=M+1
   4667   |    4     |  @4
   4668   |          |  D=M
   4669   |    0     |  @0
   4670   |          |  A=M
   4671   |          |  M=D
   4672   |    0     |  @0
   4673   |          |  M=M+1
   4674   |    0     |  @0
   4675   |          |  D=M
   4676   |    2     |  @2
   4677   |          |  M=D
   4678   |    7     |  @7
   4679   |          |  D=A
   4680   |    2     |  @2
   4681   |          |  M=M-D
   4682   |    0     |  @0
   4683   |          |  D=M
   4684   |    1     |  @1
   4685   |          |  M=D
   4686   | RAM[22]  |  @Math.multiply
   4687   |          |  0;JMP
   4688   |ROM[4687] |  (Math.multiply$ret.26)
          |          |        // add
   4688   |    0     |  @0
   4689   |          |  AM=M-1
   4690   |          |  D=M
   4691   |          |  A=A-1
   4692   |          |  M=M+D
          |          |        // pop local 0
   4693   |    0     |  @0
   4694   |          |  D=A
   4695   |    1     |  @1
   4696   |          |  D=D+M
   4697   | RAM[13]  |  @R13
   4698   |          |  M=D
   4699   |    0     |  @0
   4700   |          |  AM=M-1
   4701   |          |  D=M
   4702   | RAM[13]  |  @R13
   4703   |          |  A=M
   4704   |          |  M=D
          |          |        // goto Ball.bounce_TRUE_4
   4705   |RAM[4963] |  @Ball.bounce_TRUE_4
   4706   |          |  0;JMP
          |          |        // label Ball.bounce_FALSE_4
   4707   |ROM[4706] |  (Ball.bounce_FALSE_4)
          |          |        // push constant 0
   4707   |    0     |  @0
   4708   |          |  D=A
   4709   |    0     |  @0
   4710   |          |  A=M
   4711   |          |  M=D
   4712   |    0     |  @0
   4713   |          |  M=M+1
          |          |        // pop local 1
   4714   |    1     |  @1
   4715   |          |  D=A
   4716   |    1     |  @1
   4717   |          |  D=D+M
   4718   | RAM[13]  |  @R13
   4719   |          |  M=D
   4720   |    0     |  @0
   4721   |          |  AM=M-1
   4722   |          |  D=M
   4723   | RAM[13]  |  @R13
   4724   |          |  A=M
   4725   |          |  M=D
          |          |        // push local 2
   4726   |    2     |  @2
   4727   |          |  D=A
   4728   |    1     |  @1
   4729   |          |  A=M
   4730   |          |  A=A+D
   4731   |          |  D=M
   4732   |    0     |  @0
   4733   |          |  A=M
   4734   |          |  M=D
   4735   |    0     |  @0
   4736   |          |  M=M+1
          |          |        // push constant 25
   4737   |    25    |  @25
   4738   |          |  D=A
   4739   |    0     |  @0
   4740   |          |  A=M
   4741   |          |  M=D
   4742   |    0     |  @0
   4743   |          |  M=M+1
          |          |        // call Math.multiply 2
   4744   |RAM[4792] |  @Math.multiply$ret.27
   4745   |          |  D=A
   4746   |    0     |  @0
   4747   |          |  A=M
   4748   |          |  M=D
   4749   |    0     |  @0
   4750   |          |  M=M+1
   4751   |    1     |  @1
   4752   |          |  D=M
   4753   |    0     |  @0
   4754   |          |  A=M
   4755   |          |  M=D
   4756   |    0     |  @0
   4757   |          |  M=M+1
   4758   |    2     |  @2
   4759   |          |  D=M
   4760   |    0     |  @0
   4761   |          |  A=M
   4762   |          |  M=D
   4763   |    0     |  @0
   4764   |          |  M=M+1
   4765   |    3     |  @3
   4766   |          |  D=M
   4767   |    0     |  @0
   4768   |          |  A=M
   4769   |          |  M=D
   4770   |    0     |  @0
   4771   |          |  M=M+1
   4772   |    4     |  @4
   4773   |          |  D=M
   4774   |    0     |  @0
   4775   |          |  A=M
   4776   |          |  M=D
   4777   |    0     |  @0
   4778   |          |  M=M+1
   4779   |    0     |  @0
   4780   |          |  D=M
   4781   |    2     |  @2
   4782   |          |  M=D
   4783   |    7     |  @7
   4784   |          |  D=A
   4785   |    2     |  @2
   4786   |          |  M=M-D
   4787   |    0     |  @0
   4788   |          |  D=M
   4789   |    1     |  @1
   4790   |          |  M=D
   4791   | RAM[22]  |  @Math.multiply
   4792   |          |  0;JMP
   4793   |ROM[4792] |  (Math.multiply$ret.27)
          |          |        // push local 3
   4793   |    3     |  @3
   4794   |          |  D=A
   4795   |    1     |  @1
   4796   |          |  A=M
   4797   |          |  A=A+D
   4798   |          |  D=M
   4799   |    0     |  @0
   4800   |          |  A=M
   4801   |          |  M=D
   4802   |    0     |  @0
   4803   |          |  M=M+1
          |          |        // call Math.divide 2
   4804   |RAM[4852] |  @Math.divide$ret.28
   4805   |          |  D=A
   4806   |    0     |  @0
   4807   |          |  A=M
   4808   |          |  M=D
   4809   |    0     |  @0
   4810   |          |  M=M+1
   4811   |    1     |  @1
   4812   |          |  D=M
   4813   |    0     |  @0
   4814   |          |  A=M
   4815   |          |  M=D
   4816   |    0     |  @0
   4817   |          |  M=M+1
   4818   |    2     |  @2
   4819   |          |  D=M
   4820   |    0     |  @0
   4821   |          |  A=M
   4822   |          |  M=D
   4823   |    0     |  @0
   4824   |          |  M=M+1
   4825   |    3     |  @3
   4826   |          |  D=M
   4827   |    0     |  @0
   4828   |          |  A=M
   4829   |          |  M=D
   4830   |    0     |  @0
   4831   |          |  M=M+1
   4832   |    4     |  @4
   4833   |          |  D=M
   4834   |    0     |  @0
   4835   |          |  A=M
   4836   |          |  M=D
   4837   |    0     |  @0
   4838   |          |  M=M+1
   4839   |    0     |  @0
   4840   |          |  D=M
   4841   |    2     |  @2
   4842   |          |  M=D
   4843   |    7     |  @7
   4844   |          |  D=A
   4845   |    2     |  @2
   4846   |          |  M=M-D
   4847   |    0     |  @0
   4848   |          |  D=M
   4849   |    1     |  @1
   4850   |          |  M=D
   4851   | RAM[23]  |  @Math.divide
   4852   |          |  0;JMP
   4853   |ROM[4852] |  (Math.divide$ret.28)
          |          |        // pop local 0
   4853   |    0     |  @0
   4854   |          |  D=A
   4855   |    1     |  @1
   4856   |          |  D=D+M
   4857   | RAM[13]  |  @R13
   4858   |          |  M=D
   4859   |    0     |  @0
   4860   |          |  AM=M-1
   4861   |          |  D=M
   4862   | RAM[13]  |  @R13
   4863   |          |  A=M
   4864   |          |  M=D
          |          |        // push this 0
   4865   |    0     |  @0
   4866   |          |  D=A
   4867   |    3     |  @3
   4868   |          |  A=M
   4869   |          |  A=A+D
   4870   |          |  D=M
   4871   |    0     |  @0
   4872   |          |  A=M
   4873   |          |  M=D
   4874   |    0     |  @0
   4875   |          |  M=M+1
          |          |        // push local 0
   4876   |    0     |  @0
   4877   |          |  D=A
   4878   |    1     |  @1
   4879   |          |  A=M
   4880   |          |  A=A+D
   4881   |          |  D=M
   4882   |    0     |  @0
   4883   |          |  A=M
   4884   |          |  M=D
   4885   |    0     |  @0
   4886   |          |  M=M+1
          |          |        // push local 4
   4887   |    4     |  @4
   4888   |          |  D=A
   4889   |    1     |  @1
   4890   |          |  A=M
   4891   |          |  A=A+D
   4892   |          |  D=M
   4893   |    0     |  @0
   4894   |          |  A=M
   4895   |          |  M=D
   4896   |    0     |  @0
   4897   |          |  M=M+1
          |          |        // call Math.multiply 2
   4898   |RAM[4946] |  @Math.multiply$ret.29
   4899   |          |  D=A
   4900   |    0     |  @0
   4901   |          |  A=M
   4902   |          |  M=D
   4903   |    0     |  @0
   4904   |          |  M=M+1
   4905   |    1     |  @1
   4906   |          |  D=M
   4907   |    0     |  @0
   4908   |          |  A=M
   4909   |          |  M=D
   4910   |    0     |  @0
   4911   |          |  M=M+1
   4912   |    2     |  @2
   4913   |          |  D=M
   4914   |    0     |  @0
   4915   |          |  A=M
   4916   |          |  M=D
   4917   |    0     |  @0
   4918   |          |  M=M+1
   4919   |    3     |  @3
   4920   |          |  D=M
   4921   |    0     |  @0
   4922   |          |  A=M
   4923   |          |  M=D
   4924   |    0     |  @0
   4925   |          |  M=M+1
   4926   |    4     |  @4
   4927   |          |  D=M
   4928   |    0     |  @0
   4929   |          |  A=M
   4930   |          |  M=D
   4931   |    0     |  @0
   4932   |          |  M=M+1
   4933   |    0     |  @0
   4934   |          |  D=M
   4935   |    2     |  @2
   4936   |          |  M=D
   4937   |    7     |  @7
   4938   |          |  D=A
   4939   |    2     |  @2
   4940   |          |  M=M-D
   4941   |    0     |  @0
   4942   |          |  D=M
   4943   |    1     |  @1
   4944   |          |  M=D
   4945   | RAM[22]  |  @Math.multiply
   4946   |          |  0;JMP
   4947   |ROM[4946] |  (Math.multiply$ret.29)
          |          |        // add
   4947   |    0     |  @0
   4948   |          |  AM=M-1
   4949   |          |  D=M
   4950   |          |  A=A-1
   4951   |          |  M=M+D
          |          |        // pop local 0
   4952   |    0     |  @0
   4953   |          |  D=A
   4954   |    1     |  @1
   4955   |          |  D=D+M
   4956   | RAM[13]  |  @R13
   4957   |          |  M=D
   4958   |    0     |  @0
   4959   |          |  AM=M-1
   4960   |          |  D=M
   4961   | RAM[13]  |  @R13
   4962   |          |  A=M
   4963   |          |  M=D
          |          |        // label Ball.bounce_TRUE_4
   4964   |ROM[4963] |  (Ball.bounce_TRUE_4)
          |          |        // label Ball.bounce_TRUE_3
   4964   |ROM[4963] |  (Ball.bounce_TRUE_3)
          |          |        // label Ball.bounce_TRUE_2
   4964   |ROM[4963] |  (Ball.bounce_TRUE_2)
          |          |        // push pointer 0
   4964   |    3     |  @3
   4965   |          |  D=M
   4966   |    0     |  @0
   4967   |          |  A=M
   4968   |          |  M=D
   4969   |    0     |  @0
   4970   |          |  M=M+1
          |          |        // push local 0
   4971   |    0     |  @0
   4972   |          |  D=A
   4973   |    1     |  @1
   4974   |          |  A=M
   4975   |          |  A=A+D
   4976   |          |  D=M
   4977   |    0     |  @0
   4978   |          |  A=M
   4979   |          |  M=D
   4980   |    0     |  @0
   4981   |          |  M=M+1
          |          |        // push local 1
   4982   |    1     |  @1
   4983   |          |  D=A
   4984   |    1     |  @1
   4985   |          |  A=M
   4986   |          |  A=A+D
   4987   |          |  D=M
   4988   |    0     |  @0
   4989   |          |  A=M
   4990   |          |  M=D
   4991   |    0     |  @0
   4992   |          |  M=M+1
          |          |        // call Ball.setDestination 3
   4993   |RAM[5041] |  @Ball.setDestination$ret.30
   4994   |          |  D=A
   4995   |    0     |  @0
   4996   |          |  A=M
   4997   |          |  M=D
   4998   |    0     |  @0
   4999   |          |  M=M+1
   5000   |    1     |  @1
   5001   |          |  D=M
   5002   |    0     |  @0
   5003   |          |  A=M
   5004   |          |  M=D
   5005   |    0     |  @0
   5006   |          |  M=M+1
   5007   |    2     |  @2
   5008   |          |  D=M
   5009   |    0     |  @0
   5010   |          |  A=M
   5011   |          |  M=D
   5012   |    0     |  @0
   5013   |          |  M=M+1
   5014   |    3     |  @3
   5015   |          |  D=M
   5016   |    0     |  @0
   5017   |          |  A=M
   5018   |          |  M=D
   5019   |    0     |  @0
   5020   |          |  M=M+1
   5021   |    4     |  @4
   5022   |          |  D=M
   5023   |    0     |  @0
   5024   |          |  A=M
   5025   |          |  M=D
   5026   |    0     |  @0
   5027   |          |  M=M+1
   5028   |    0     |  @0
   5029   |          |  D=M
   5030   |    2     |  @2
   5031   |          |  M=D
   5032   |    8     |  @8
   5033   |          |  D=A
   5034   |    2     |  @2
   5035   |          |  M=M-D
   5036   |    0     |  @0
   5037   |          |  D=M
   5038   |    1     |  @1
   5039   |          |  M=D
   5040   |RAM[1378] |  @Ball.setDestination
   5041   |          |  0;JMP
   5042   |ROM[5041] |  (Ball.setDestination$ret.30)
          |          |        // pop temp 0
   5042   |    0     |  @0
   5043   |          |  D=A
   5044   |    5     |  @5
   5045   |          |  D=D+A
   5046   | RAM[13]  |  @R13
   5047   |          |  M=D
   5048   |    0     |  @0
   5049   |          |  AM=M-1
   5050   |          |  D=M
   5051   | RAM[13]  |  @R13
   5052   |          |  A=M
   5053   |          |  M=D
          |          |        // push constant 0
   5054   |    0     |  @0
   5055   |          |  D=A
   5056   |    0     |  @0
   5057   |          |  A=M
   5058   |          |  M=D
   5059   |    0     |  @0
   5060   |          |  M=M+1
          |          |  
          |          |  
          |          |  
          |          |  
          |          |  
          |          |        // /**
          |          |        // * A graphical Pong bat.
          |          |        // * Displayed as a filled horizontal rectangle that has
          |          |        // * a screen location, a width and a height.
          |          |        // * Has methods for drawing, erasing, moving left and right,
          |          |        // * and changing its width (to make the hitting action more challenging).
          |          |        // * This class should have been called "paddle", following the
          |          |        // * standard Pong terminology. But, unaware of this terminology,
          |          |        // * we called it "bat", and then decided to stick to it.
          |          |        // *//** Constructs a new bat with the given location and width. *//*
          |          |        // FIELD  int x         -> this     0
          |          |        // FIELD  int y         -> this     1
          |          |        // FIELD  int width     -> this     2
          |          |        // FIELD  int height    -> this     3
          |          |        // FIELD  int direction -> this     4
          |          |        // */
          |          |        // 
          |          |        // function Bat.new 0
   5061   |ROM[5060] |  (Bat.new)
   5061   |    0     |  @0
   5062   |          |  D=M
   5063   |    1     |  @1
   5064   |          |  M=D
          |          |        // /*
          |          |        // ARG    int Ax      -> argument 0
          |          |        // ARG    int Ay      -> argument 1
          |          |        // ARG    int Awidth  -> argument 2
          |          |        // ARG    int Aheight -> argument 3
          |          |        // */
          |          |        // push constant 5
   5065   |    5     |  @5
   5066   |          |  D=A
   5067   |    0     |  @0
   5068   |          |  A=M
   5069   |          |  M=D
   5070   |    0     |  @0
   5071   |          |  M=M+1
          |          |        // call Memory.alloc 1
   5072   |RAM[5120] |  @Memory.alloc$ret.31
   5073   |          |  D=A
   5074   |    0     |  @0
   5075   |          |  A=M
   5076   |          |  M=D
   5077   |    0     |  @0
   5078   |          |  M=M+1
   5079   |    1     |  @1
   5080   |          |  D=M
   5081   |    0     |  @0
   5082   |          |  A=M
   5083   |          |  M=D
   5084   |    0     |  @0
   5085   |          |  M=M+1
   5086   |    2     |  @2
   5087   |          |  D=M
   5088   |    0     |  @0
   5089   |          |  A=M
   5090   |          |  M=D
   5091   |    0     |  @0
   5092   |          |  M=M+1
   5093   |    3     |  @3
   5094   |          |  D=M
   5095   |    0     |  @0
   5096   |          |  A=M
   5097   |          |  M=D
   5098   |    0     |  @0
   5099   |          |  M=M+1
   5100   |    4     |  @4
   5101   |          |  D=M
   5102   |    0     |  @0
   5103   |          |  A=M
   5104   |          |  M=D
   5105   |    0     |  @0
   5106   |          |  M=M+1
   5107   |    0     |  @0
   5108   |          |  D=M
   5109   |    2     |  @2
   5110   |          |  M=D
   5111   |    6     |  @6
   5112   |          |  D=A
   5113   |    2     |  @2
   5114   |          |  M=M-D
   5115   |    0     |  @0
   5116   |          |  D=M
   5117   |    1     |  @1
   5118   |          |  M=D
   5119   | RAM[17]  |  @Memory.alloc
   5120   |          |  0;JMP
   5121   |ROM[5120] |  (Memory.alloc$ret.31)
          |          |        // pop pointer 0
   5121   |    0     |  @0
   5122   |          |  AM=M-1
   5123   |          |  D=M
   5124   |    3     |  @3
   5125   |          |  M=D
          |          |        // push argument 0
   5126   |    0     |  @0
   5127   |          |  D=A
   5128   |    2     |  @2
   5129   |          |  A=M
   5130   |          |  A=A+D
   5131   |          |  D=M
   5132   |    0     |  @0
   5133   |          |  A=M
   5134   |          |  M=D
   5135   |    0     |  @0
   5136   |          |  M=M+1
          |          |        // pop this 0
   5137   |    0     |  @0
   5138   |          |  D=A
   5139   |    3     |  @3
   5140   |          |  D=D+M
   5141   | RAM[13]  |  @R13
   5142   |          |  M=D
   5143   |    0     |  @0
   5144   |          |  AM=M-1
   5145   |          |  D=M
   5146   | RAM[13]  |  @R13
   5147   |          |  A=M
   5148   |          |  M=D
          |          |        // push argument 1
   5149   |    1     |  @1
   5150   |          |  D=A
   5151   |    2     |  @2
   5152   |          |  A=M
   5153   |          |  A=A+D
   5154   |          |  D=M
   5155   |    0     |  @0
   5156   |          |  A=M
   5157   |          |  M=D
   5158   |    0     |  @0
   5159   |          |  M=M+1
          |          |        // pop this 1
   5160   |    1     |  @1
   5161   |          |  D=A
   5162   |    3     |  @3
   5163   |          |  D=D+M
   5164   | RAM[13]  |  @R13
   5165   |          |  M=D
   5166   |    0     |  @0
   5167   |          |  AM=M-1
   5168   |          |  D=M
   5169   | RAM[13]  |  @R13
   5170   |          |  A=M
   5171   |          |  M=D
          |          |        // push argument 2
   5172   |    2     |  @2
   5173   |          |  D=A
   5174   |    2     |  @2
   5175   |          |  A=M
   5176   |          |  A=A+D
   5177   |          |  D=M
   5178   |    0     |  @0
   5179   |          |  A=M
   5180   |          |  M=D
   5181   |    0     |  @0
   5182   |          |  M=M+1
          |          |        // pop this 2
   5183   |    2     |  @2
   5184   |          |  D=A
   5185   |    3     |  @3
   5186   |          |  D=D+M
   5187   | RAM[13]  |  @R13
   5188   |          |  M=D
   5189   |    0     |  @0
   5190   |          |  AM=M-1
   5191   |          |  D=M
   5192   | RAM[13]  |  @R13
   5193   |          |  A=M
   5194   |          |  M=D
          |          |        // push argument 3
   5195   |    3     |  @3
   5196   |          |  D=A
   5197   |    2     |  @2
   5198   |          |  A=M
   5199   |          |  A=A+D
   5200   |          |  D=M
   5201   |    0     |  @0
   5202   |          |  A=M
   5203   |          |  M=D
   5204   |    0     |  @0
   5205   |          |  M=M+1
          |          |        // pop this 3
   5206   |    3     |  @3
   5207   |          |  D=A
   5208   |    3     |  @3
   5209   |          |  D=D+M
   5210   | RAM[13]  |  @R13
   5211   |          |  M=D
   5212   |    0     |  @0
   5213   |          |  AM=M-1
   5214   |          |  D=M
   5215   | RAM[13]  |  @R13
   5216   |          |  A=M
   5217   |          |  M=D
          |          |        // push constant 2
   5218   |    2     |  @2
   5219   |          |  D=A
   5220   |    0     |  @0
   5221   |          |  A=M
   5222   |          |  M=D
   5223   |    0     |  @0
   5224   |          |  M=M+1
          |          |        // pop this 4
   5225   |    4     |  @4
   5226   |          |  D=A
   5227   |    3     |  @3
   5228   |          |  D=D+M
   5229   | RAM[13]  |  @R13
   5230   |          |  M=D
   5231   |    0     |  @0
   5232   |          |  AM=M-1
   5233   |          |  D=M
   5234   | RAM[13]  |  @R13
   5235   |          |  A=M
   5236   |          |  M=D
          |          |        // push pointer 0
   5237   |    3     |  @3
   5238   |          |  D=M
   5239   |    0     |  @0
   5240   |          |  A=M
   5241   |          |  M=D
   5242   |    0     |  @0
   5243   |          |  M=M+1
          |          |        // call Bat.show 1
   5244   |RAM[5292] |  @Bat.show$ret.32
   5245   |          |  D=A
   5246   |    0     |  @0
   5247   |          |  A=M
   5248   |          |  M=D
   5249   |    0     |  @0
   5250   |          |  M=M+1
   5251   |    1     |  @1
   5252   |          |  D=M
   5253   |    0     |  @0
   5254   |          |  A=M
   5255   |          |  M=D
   5256   |    0     |  @0
   5257   |          |  M=M+1
   5258   |    2     |  @2
   5259   |          |  D=M
   5260   |    0     |  @0
   5261   |          |  A=M
   5262   |          |  M=D
   5263   |    0     |  @0
   5264   |          |  M=M+1
   5265   |    3     |  @3
   5266   |          |  D=M
   5267   |    0     |  @0
   5268   |          |  A=M
   5269   |          |  M=D
   5270   |    0     |  @0
   5271   |          |  M=M+1
   5272   |    4     |  @4
   5273   |          |  D=M
   5274   |    0     |  @0
   5275   |          |  A=M
   5276   |          |  M=D
   5277   |    0     |  @0
   5278   |          |  M=M+1
   5279   |    0     |  @0
   5280   |          |  D=M
   5281   |    2     |  @2
   5282   |          |  M=D
   5283   |    6     |  @6
   5284   |          |  D=A
   5285   |    2     |  @2
   5286   |          |  M=M-D
   5287   |    0     |  @0
   5288   |          |  D=M
   5289   |    1     |  @1
   5290   |          |  M=D
   5291   |RAM[5504] |  @Bat.show
   5292   |          |  0;JMP
   5293   |ROM[5292] |  (Bat.show$ret.32)
          |          |        // pop temp 0
   5293   |    0     |  @0
   5294   |          |  D=A
   5295   |    5     |  @5
   5296   |          |  D=D+A
   5297   | RAM[13]  |  @R13
   5298   |          |  M=D
   5299   |    0     |  @0
   5300   |          |  AM=M-1
   5301   |          |  D=M
   5302   | RAM[13]  |  @R13
   5303   |          |  A=M
   5304   |          |  M=D
          |          |        // push pointer 0
   5305   |    3     |  @3
   5306   |          |  D=M
   5307   |    0     |  @0
   5308   |          |  A=M
   5309   |          |  M=D
   5310   |    0     |  @0
   5311   |          |  M=M+1
          |          |        // return
   5312   |    1     |  @1
   5313   |          |  D=M
   5314   |    13    |  @13
   5315   |          |  M=D
   5316   |    5     |  @5
   5317   |          |  D=A
   5318   |    13    |  @13
   5319   |          |  D=M-D
   5320   |          |  A=D
   5321   |          |  D=M
   5322   |    14    |  @14
   5323   |          |  M=D
   5324   |    0     |  @0
   5325   |          |  AM=M-1
   5326   |          |  D=M
   5327   |    2     |  @2
   5328   |          |  A=M
   5329   |          |  M=D
   5330   |    2     |  @2
   5331   |          |  D=M+1
   5332   |    0     |  @0
   5333   |          |  M=D
   5334   |    13    |  @13
   5335   |          |  M=M-1
   5336   |          |  A=M
   5337   |          |  D=M
   5338   |    4     |  @4
   5339   |          |  M=D
   5340   |    13    |  @13
   5341   |          |  M=M-1
   5342   |          |  A=M
   5343   |          |  D=M
   5344   |    3     |  @3
   5345   |          |  M=D
   5346   |    13    |  @13
   5347   |          |  M=M-1
   5348   |          |  A=M
   5349   |          |  D=M
   5350   |    2     |  @2
   5351   |          |  M=D
   5352   |    13    |  @13
   5353   |          |  M=M-1
   5354   |          |  A=M
   5355   |          |  D=M
   5356   |    1     |  @1
   5357   |          |  M=D
   5358   |    14    |  @14
   5359   |          |  A=M
   5360   |          |  0;JMP
          |          |        // /** Deallocates the object's memory. */
          |          |        // function Bat.dispose 0
   5361   |ROM[5360] |  (Bat.dispose)
   5361   |    0     |  @0
   5362   |          |  D=M
   5363   |    1     |  @1
   5364   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   5365   |    0     |  @0
   5366   |          |  D=A
   5367   |    2     |  @2
   5368   |          |  A=M
   5369   |          |  A=A+D
   5370   |          |  D=M
   5371   |    0     |  @0
   5372   |          |  A=M
   5373   |          |  M=D
   5374   |    0     |  @0
   5375   |          |  M=M+1
          |          |        // pop pointer 0
   5376   |    0     |  @0
   5377   |          |  AM=M-1
   5378   |          |  D=M
   5379   |    3     |  @3
   5380   |          |  M=D
          |          |        // push pointer 0
   5381   |    3     |  @3
   5382   |          |  D=M
   5383   |    0     |  @0
   5384   |          |  A=M
   5385   |          |  M=D
   5386   |    0     |  @0
   5387   |          |  M=M+1
          |          |        // call Memory.deAlloc 1
   5388   |RAM[5436] |  @Memory.deAlloc$ret.33
   5389   |          |  D=A
   5390   |    0     |  @0
   5391   |          |  A=M
   5392   |          |  M=D
   5393   |    0     |  @0
   5394   |          |  M=M+1
   5395   |    1     |  @1
   5396   |          |  D=M
   5397   |    0     |  @0
   5398   |          |  A=M
   5399   |          |  M=D
   5400   |    0     |  @0
   5401   |          |  M=M+1
   5402   |    2     |  @2
   5403   |          |  D=M
   5404   |    0     |  @0
   5405   |          |  A=M
   5406   |          |  M=D
   5407   |    0     |  @0
   5408   |          |  M=M+1
   5409   |    3     |  @3
   5410   |          |  D=M
   5411   |    0     |  @0
   5412   |          |  A=M
   5413   |          |  M=D
   5414   |    0     |  @0
   5415   |          |  M=M+1
   5416   |    4     |  @4
   5417   |          |  D=M
   5418   |    0     |  @0
   5419   |          |  A=M
   5420   |          |  M=D
   5421   |    0     |  @0
   5422   |          |  M=M+1
   5423   |    0     |  @0
   5424   |          |  D=M
   5425   |    2     |  @2
   5426   |          |  M=D
   5427   |    6     |  @6
   5428   |          |  D=A
   5429   |    2     |  @2
   5430   |          |  M=M-D
   5431   |    0     |  @0
   5432   |          |  D=M
   5433   |    1     |  @1
   5434   |          |  M=D
   5435   | RAM[18]  |  @Memory.deAlloc
   5436   |          |  0;JMP
   5437   |ROM[5436] |  (Memory.deAlloc$ret.33)
          |          |        // pop temp 0
   5437   |    0     |  @0
   5438   |          |  D=A
   5439   |    5     |  @5
   5440   |          |  D=D+A
   5441   | RAM[13]  |  @R13
   5442   |          |  M=D
   5443   |    0     |  @0
   5444   |          |  AM=M-1
   5445   |          |  D=M
   5446   | RAM[13]  |  @R13
   5447   |          |  A=M
   5448   |          |  M=D
          |          |        // push constant 0
   5449   |    0     |  @0
   5450   |          |  D=A
   5451   |    0     |  @0
   5452   |          |  A=M
   5453   |          |  M=D
   5454   |    0     |  @0
   5455   |          |  M=M+1
          |          |        // return
   5456   |    1     |  @1
   5457   |          |  D=M
   5458   |    13    |  @13
   5459   |          |  M=D
   5460   |    5     |  @5
   5461   |          |  D=A
   5462   |    13    |  @13
   5463   |          |  D=M-D
   5464   |          |  A=D
   5465   |          |  D=M
   5466   |    14    |  @14
   5467   |          |  M=D
   5468   |    0     |  @0
   5469   |          |  AM=M-1
   5470   |          |  D=M
   5471   |    2     |  @2
   5472   |          |  A=M
   5473   |          |  M=D
   5474   |    2     |  @2
   5475   |          |  D=M+1
   5476   |    0     |  @0
   5477   |          |  M=D
   5478   |    13    |  @13
   5479   |          |  M=M-1
   5480   |          |  A=M
   5481   |          |  D=M
   5482   |    4     |  @4
   5483   |          |  M=D
   5484   |    13    |  @13
   5485   |          |  M=M-1
   5486   |          |  A=M
   5487   |          |  D=M
   5488   |    3     |  @3
   5489   |          |  M=D
   5490   |    13    |  @13
   5491   |          |  M=M-1
   5492   |          |  A=M
   5493   |          |  D=M
   5494   |    2     |  @2
   5495   |          |  M=D
   5496   |    13    |  @13
   5497   |          |  M=M-1
   5498   |          |  A=M
   5499   |          |  D=M
   5500   |    1     |  @1
   5501   |          |  M=D
   5502   |    14    |  @14
   5503   |          |  A=M
   5504   |          |  0;JMP
          |          |        // /** Shows the bat. */
          |          |        // function Bat.show 0
   5505   |ROM[5504] |  (Bat.show)
   5505   |    0     |  @0
   5506   |          |  D=M
   5507   |    1     |  @1
   5508   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   5509   |    0     |  @0
   5510   |          |  D=A
   5511   |    2     |  @2
   5512   |          |  A=M
   5513   |          |  A=A+D
   5514   |          |  D=M
   5515   |    0     |  @0
   5516   |          |  A=M
   5517   |          |  M=D
   5518   |    0     |  @0
   5519   |          |  M=M+1
          |          |        // pop pointer 0
   5520   |    0     |  @0
   5521   |          |  AM=M-1
   5522   |          |  D=M
   5523   |    3     |  @3
   5524   |          |  M=D
          |          |        // push constant 1
   5525   |    1     |  @1
   5526   |          |  D=A
   5527   |    0     |  @0
   5528   |          |  A=M
   5529   |          |  M=D
   5530   |    0     |  @0
   5531   |          |  M=M+1
          |          |        // neg
   5532   |    0     |  @0
   5533   |          |  A=M-1
   5534   |          |  M=-M
          |          |        // call Screen.setColor 1
   5535   |RAM[5583] |  @Screen.setColor$ret.34
   5536   |          |  D=A
   5537   |    0     |  @0
   5538   |          |  A=M
   5539   |          |  M=D
   5540   |    0     |  @0
   5541   |          |  M=M+1
   5542   |    1     |  @1
   5543   |          |  D=M
   5544   |    0     |  @0
   5545   |          |  A=M
   5546   |          |  M=D
   5547   |    0     |  @0
   5548   |          |  M=M+1
   5549   |    2     |  @2
   5550   |          |  D=M
   5551   |    0     |  @0
   5552   |          |  A=M
   5553   |          |  M=D
   5554   |    0     |  @0
   5555   |          |  M=M+1
   5556   |    3     |  @3
   5557   |          |  D=M
   5558   |    0     |  @0
   5559   |          |  A=M
   5560   |          |  M=D
   5561   |    0     |  @0
   5562   |          |  M=M+1
   5563   |    4     |  @4
   5564   |          |  D=M
   5565   |    0     |  @0
   5566   |          |  A=M
   5567   |          |  M=D
   5568   |    0     |  @0
   5569   |          |  M=M+1
   5570   |    0     |  @0
   5571   |          |  D=M
   5572   |    2     |  @2
   5573   |          |  M=D
   5574   |    6     |  @6
   5575   |          |  D=A
   5576   |    2     |  @2
   5577   |          |  M=M-D
   5578   |    0     |  @0
   5579   |          |  D=M
   5580   |    1     |  @1
   5581   |          |  M=D
   5582   | RAM[19]  |  @Screen.setColor
   5583   |          |  0;JMP
   5584   |ROM[5583] |  (Screen.setColor$ret.34)
          |          |        // pop temp 0
   5584   |    0     |  @0
   5585   |          |  D=A
   5586   |    5     |  @5
   5587   |          |  D=D+A
   5588   | RAM[13]  |  @R13
   5589   |          |  M=D
   5590   |    0     |  @0
   5591   |          |  AM=M-1
   5592   |          |  D=M
   5593   | RAM[13]  |  @R13
   5594   |          |  A=M
   5595   |          |  M=D
          |          |        // push pointer 0
   5596   |    3     |  @3
   5597   |          |  D=M
   5598   |    0     |  @0
   5599   |          |  A=M
   5600   |          |  M=D
   5601   |    0     |  @0
   5602   |          |  M=M+1
          |          |        // call Bat.draw 1
   5603   |RAM[5651] |  @Bat.draw$ret.35
   5604   |          |  D=A
   5605   |    0     |  @0
   5606   |          |  A=M
   5607   |          |  M=D
   5608   |    0     |  @0
   5609   |          |  M=M+1
   5610   |    1     |  @1
   5611   |          |  D=M
   5612   |    0     |  @0
   5613   |          |  A=M
   5614   |          |  M=D
   5615   |    0     |  @0
   5616   |          |  M=M+1
   5617   |    2     |  @2
   5618   |          |  D=M
   5619   |    0     |  @0
   5620   |          |  A=M
   5621   |          |  M=D
   5622   |    0     |  @0
   5623   |          |  M=M+1
   5624   |    3     |  @3
   5625   |          |  D=M
   5626   |    0     |  @0
   5627   |          |  A=M
   5628   |          |  M=D
   5629   |    0     |  @0
   5630   |          |  M=M+1
   5631   |    4     |  @4
   5632   |          |  D=M
   5633   |    0     |  @0
   5634   |          |  A=M
   5635   |          |  M=D
   5636   |    0     |  @0
   5637   |          |  M=M+1
   5638   |    0     |  @0
   5639   |          |  D=M
   5640   |    2     |  @2
   5641   |          |  M=D
   5642   |    6     |  @6
   5643   |          |  D=A
   5644   |    2     |  @2
   5645   |          |  M=M-D
   5646   |    0     |  @0
   5647   |          |  D=M
   5648   |    1     |  @1
   5649   |          |  M=D
   5650   |RAM[5931] |  @Bat.draw
   5651   |          |  0;JMP
   5652   |ROM[5651] |  (Bat.draw$ret.35)
          |          |        // pop temp 0
   5652   |    0     |  @0
   5653   |          |  D=A
   5654   |    5     |  @5
   5655   |          |  D=D+A
   5656   | RAM[13]  |  @R13
   5657   |          |  M=D
   5658   |    0     |  @0
   5659   |          |  AM=M-1
   5660   |          |  D=M
   5661   | RAM[13]  |  @R13
   5662   |          |  A=M
   5663   |          |  M=D
          |          |        // push constant 0
   5664   |    0     |  @0
   5665   |          |  D=A
   5666   |    0     |  @0
   5667   |          |  A=M
   5668   |          |  M=D
   5669   |    0     |  @0
   5670   |          |  M=M+1
          |          |        // return
   5671   |    1     |  @1
   5672   |          |  D=M
   5673   |    13    |  @13
   5674   |          |  M=D
   5675   |    5     |  @5
   5676   |          |  D=A
   5677   |    13    |  @13
   5678   |          |  D=M-D
   5679   |          |  A=D
   5680   |          |  D=M
   5681   |    14    |  @14
   5682   |          |  M=D
   5683   |    0     |  @0
   5684   |          |  AM=M-1
   5685   |          |  D=M
   5686   |    2     |  @2
   5687   |          |  A=M
   5688   |          |  M=D
   5689   |    2     |  @2
   5690   |          |  D=M+1
   5691   |    0     |  @0
   5692   |          |  M=D
   5693   |    13    |  @13
   5694   |          |  M=M-1
   5695   |          |  A=M
   5696   |          |  D=M
   5697   |    4     |  @4
   5698   |          |  M=D
   5699   |    13    |  @13
   5700   |          |  M=M-1
   5701   |          |  A=M
   5702   |          |  D=M
   5703   |    3     |  @3
   5704   |          |  M=D
   5705   |    13    |  @13
   5706   |          |  M=M-1
   5707   |          |  A=M
   5708   |          |  D=M
   5709   |    2     |  @2
   5710   |          |  M=D
   5711   |    13    |  @13
   5712   |          |  M=M-1
   5713   |          |  A=M
   5714   |          |  D=M
   5715   |    1     |  @1
   5716   |          |  M=D
   5717   |    14    |  @14
   5718   |          |  A=M
   5719   |          |  0;JMP
          |          |        // /** Hides the bat. */
          |          |        // function Bat.hide 0
   5720   |ROM[5719] |  (Bat.hide)
   5720   |    0     |  @0
   5721   |          |  D=M
   5722   |    1     |  @1
   5723   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   5724   |    0     |  @0
   5725   |          |  D=A
   5726   |    2     |  @2
   5727   |          |  A=M
   5728   |          |  A=A+D
   5729   |          |  D=M
   5730   |    0     |  @0
   5731   |          |  A=M
   5732   |          |  M=D
   5733   |    0     |  @0
   5734   |          |  M=M+1
          |          |        // pop pointer 0
   5735   |    0     |  @0
   5736   |          |  AM=M-1
   5737   |          |  D=M
   5738   |    3     |  @3
   5739   |          |  M=D
          |          |        // push constant 0
   5740   |    0     |  @0
   5741   |          |  D=A
   5742   |    0     |  @0
   5743   |          |  A=M
   5744   |          |  M=D
   5745   |    0     |  @0
   5746   |          |  M=M+1
          |          |        // call Screen.setColor 1
   5747   |RAM[5795] |  @Screen.setColor$ret.36
   5748   |          |  D=A
   5749   |    0     |  @0
   5750   |          |  A=M
   5751   |          |  M=D
   5752   |    0     |  @0
   5753   |          |  M=M+1
   5754   |    1     |  @1
   5755   |          |  D=M
   5756   |    0     |  @0
   5757   |          |  A=M
   5758   |          |  M=D
   5759   |    0     |  @0
   5760   |          |  M=M+1
   5761   |    2     |  @2
   5762   |          |  D=M
   5763   |    0     |  @0
   5764   |          |  A=M
   5765   |          |  M=D
   5766   |    0     |  @0
   5767   |          |  M=M+1
   5768   |    3     |  @3
   5769   |          |  D=M
   5770   |    0     |  @0
   5771   |          |  A=M
   5772   |          |  M=D
   5773   |    0     |  @0
   5774   |          |  M=M+1
   5775   |    4     |  @4
   5776   |          |  D=M
   5777   |    0     |  @0
   5778   |          |  A=M
   5779   |          |  M=D
   5780   |    0     |  @0
   5781   |          |  M=M+1
   5782   |    0     |  @0
   5783   |          |  D=M
   5784   |    2     |  @2
   5785   |          |  M=D
   5786   |    6     |  @6
   5787   |          |  D=A
   5788   |    2     |  @2
   5789   |          |  M=M-D
   5790   |    0     |  @0
   5791   |          |  D=M
   5792   |    1     |  @1
   5793   |          |  M=D
   5794   | RAM[19]  |  @Screen.setColor
   5795   |          |  0;JMP
   5796   |ROM[5795] |  (Screen.setColor$ret.36)
          |          |        // pop temp 0
   5796   |    0     |  @0
   5797   |          |  D=A
   5798   |    5     |  @5
   5799   |          |  D=D+A
   5800   | RAM[13]  |  @R13
   5801   |          |  M=D
   5802   |    0     |  @0
   5803   |          |  AM=M-1
   5804   |          |  D=M
   5805   | RAM[13]  |  @R13
   5806   |          |  A=M
   5807   |          |  M=D
          |          |        // push pointer 0
   5808   |    3     |  @3
   5809   |          |  D=M
   5810   |    0     |  @0
   5811   |          |  A=M
   5812   |          |  M=D
   5813   |    0     |  @0
   5814   |          |  M=M+1
          |          |        // call Bat.draw 1
   5815   |RAM[5863] |  @Bat.draw$ret.37
   5816   |          |  D=A
   5817   |    0     |  @0
   5818   |          |  A=M
   5819   |          |  M=D
   5820   |    0     |  @0
   5821   |          |  M=M+1
   5822   |    1     |  @1
   5823   |          |  D=M
   5824   |    0     |  @0
   5825   |          |  A=M
   5826   |          |  M=D
   5827   |    0     |  @0
   5828   |          |  M=M+1
   5829   |    2     |  @2
   5830   |          |  D=M
   5831   |    0     |  @0
   5832   |          |  A=M
   5833   |          |  M=D
   5834   |    0     |  @0
   5835   |          |  M=M+1
   5836   |    3     |  @3
   5837   |          |  D=M
   5838   |    0     |  @0
   5839   |          |  A=M
   5840   |          |  M=D
   5841   |    0     |  @0
   5842   |          |  M=M+1
   5843   |    4     |  @4
   5844   |          |  D=M
   5845   |    0     |  @0
   5846   |          |  A=M
   5847   |          |  M=D
   5848   |    0     |  @0
   5849   |          |  M=M+1
   5850   |    0     |  @0
   5851   |          |  D=M
   5852   |    2     |  @2
   5853   |          |  M=D
   5854   |    6     |  @6
   5855   |          |  D=A
   5856   |    2     |  @2
   5857   |          |  M=M-D
   5858   |    0     |  @0
   5859   |          |  D=M
   5860   |    1     |  @1
   5861   |          |  M=D
   5862   |RAM[5931] |  @Bat.draw
   5863   |          |  0;JMP
   5864   |ROM[5863] |  (Bat.draw$ret.37)
          |          |        // pop temp 0
   5864   |    0     |  @0
   5865   |          |  D=A
   5866   |    5     |  @5
   5867   |          |  D=D+A
   5868   | RAM[13]  |  @R13
   5869   |          |  M=D
   5870   |    0     |  @0
   5871   |          |  AM=M-1
   5872   |          |  D=M
   5873   | RAM[13]  |  @R13
   5874   |          |  A=M
   5875   |          |  M=D
          |          |        // push constant 0
   5876   |    0     |  @0
   5877   |          |  D=A
   5878   |    0     |  @0
   5879   |          |  A=M
   5880   |          |  M=D
   5881   |    0     |  @0
   5882   |          |  M=M+1
          |          |        // return
   5883   |    1     |  @1
   5884   |          |  D=M
   5885   |    13    |  @13
   5886   |          |  M=D
   5887   |    5     |  @5
   5888   |          |  D=A
   5889   |    13    |  @13
   5890   |          |  D=M-D
   5891   |          |  A=D
   5892   |          |  D=M
   5893   |    14    |  @14
   5894   |          |  M=D
   5895   |    0     |  @0
   5896   |          |  AM=M-1
   5897   |          |  D=M
   5898   |    2     |  @2
   5899   |          |  A=M
   5900   |          |  M=D
   5901   |    2     |  @2
   5902   |          |  D=M+1
   5903   |    0     |  @0
   5904   |          |  M=D
   5905   |    13    |  @13
   5906   |          |  M=M-1
   5907   |          |  A=M
   5908   |          |  D=M
   5909   |    4     |  @4
   5910   |          |  M=D
   5911   |    13    |  @13
   5912   |          |  M=M-1
   5913   |          |  A=M
   5914   |          |  D=M
   5915   |    3     |  @3
   5916   |          |  M=D
   5917   |    13    |  @13
   5918   |          |  M=M-1
   5919   |          |  A=M
   5920   |          |  D=M
   5921   |    2     |  @2
   5922   |          |  M=D
   5923   |    13    |  @13
   5924   |          |  M=M-1
   5925   |          |  A=M
   5926   |          |  D=M
   5927   |    1     |  @1
   5928   |          |  M=D
   5929   |    14    |  @14
   5930   |          |  A=M
   5931   |          |  0;JMP
          |          |        // /** Draws the bat. */
          |          |        // function Bat.draw 0
   5932   |ROM[5931] |  (Bat.draw)
   5932   |    0     |  @0
   5933   |          |  D=M
   5934   |    1     |  @1
   5935   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   5936   |    0     |  @0
   5937   |          |  D=A
   5938   |    2     |  @2
   5939   |          |  A=M
   5940   |          |  A=A+D
   5941   |          |  D=M
   5942   |    0     |  @0
   5943   |          |  A=M
   5944   |          |  M=D
   5945   |    0     |  @0
   5946   |          |  M=M+1
          |          |        // pop pointer 0
   5947   |    0     |  @0
   5948   |          |  AM=M-1
   5949   |          |  D=M
   5950   |    3     |  @3
   5951   |          |  M=D
          |          |        // push this 0
   5952   |    0     |  @0
   5953   |          |  D=A
   5954   |    3     |  @3
   5955   |          |  A=M
   5956   |          |  A=A+D
   5957   |          |  D=M
   5958   |    0     |  @0
   5959   |          |  A=M
   5960   |          |  M=D
   5961   |    0     |  @0
   5962   |          |  M=M+1
          |          |        // push this 1
   5963   |    1     |  @1
   5964   |          |  D=A
   5965   |    3     |  @3
   5966   |          |  A=M
   5967   |          |  A=A+D
   5968   |          |  D=M
   5969   |    0     |  @0
   5970   |          |  A=M
   5971   |          |  M=D
   5972   |    0     |  @0
   5973   |          |  M=M+1
          |          |        // push this 0
   5974   |    0     |  @0
   5975   |          |  D=A
   5976   |    3     |  @3
   5977   |          |  A=M
   5978   |          |  A=A+D
   5979   |          |  D=M
   5980   |    0     |  @0
   5981   |          |  A=M
   5982   |          |  M=D
   5983   |    0     |  @0
   5984   |          |  M=M+1
          |          |        // push this 2
   5985   |    2     |  @2
   5986   |          |  D=A
   5987   |    3     |  @3
   5988   |          |  A=M
   5989   |          |  A=A+D
   5990   |          |  D=M
   5991   |    0     |  @0
   5992   |          |  A=M
   5993   |          |  M=D
   5994   |    0     |  @0
   5995   |          |  M=M+1
          |          |        // add
   5996   |    0     |  @0
   5997   |          |  AM=M-1
   5998   |          |  D=M
   5999   |          |  A=A-1
   6000   |          |  M=M+D
          |          |        // push this 1
   6001   |    1     |  @1
   6002   |          |  D=A
   6003   |    3     |  @3
   6004   |          |  A=M
   6005   |          |  A=A+D
   6006   |          |  D=M
   6007   |    0     |  @0
   6008   |          |  A=M
   6009   |          |  M=D
   6010   |    0     |  @0
   6011   |          |  M=M+1
          |          |        // push this 3
   6012   |    3     |  @3
   6013   |          |  D=A
   6014   |    3     |  @3
   6015   |          |  A=M
   6016   |          |  A=A+D
   6017   |          |  D=M
   6018   |    0     |  @0
   6019   |          |  A=M
   6020   |          |  M=D
   6021   |    0     |  @0
   6022   |          |  M=M+1
          |          |        // add
   6023   |    0     |  @0
   6024   |          |  AM=M-1
   6025   |          |  D=M
   6026   |          |  A=A-1
   6027   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   6028   |RAM[6076] |  @Screen.drawRectangle$ret.38
   6029   |          |  D=A
   6030   |    0     |  @0
   6031   |          |  A=M
   6032   |          |  M=D
   6033   |    0     |  @0
   6034   |          |  M=M+1
   6035   |    1     |  @1
   6036   |          |  D=M
   6037   |    0     |  @0
   6038   |          |  A=M
   6039   |          |  M=D
   6040   |    0     |  @0
   6041   |          |  M=M+1
   6042   |    2     |  @2
   6043   |          |  D=M
   6044   |    0     |  @0
   6045   |          |  A=M
   6046   |          |  M=D
   6047   |    0     |  @0
   6048   |          |  M=M+1
   6049   |    3     |  @3
   6050   |          |  D=M
   6051   |    0     |  @0
   6052   |          |  A=M
   6053   |          |  M=D
   6054   |    0     |  @0
   6055   |          |  M=M+1
   6056   |    4     |  @4
   6057   |          |  D=M
   6058   |    0     |  @0
   6059   |          |  A=M
   6060   |          |  M=D
   6061   |    0     |  @0
   6062   |          |  M=M+1
   6063   |    0     |  @0
   6064   |          |  D=M
   6065   |    2     |  @2
   6066   |          |  M=D
   6067   |    9     |  @9
   6068   |          |  D=A
   6069   |    2     |  @2
   6070   |          |  M=M-D
   6071   |    0     |  @0
   6072   |          |  D=M
   6073   |    1     |  @1
   6074   |          |  M=D
   6075   | RAM[20]  |  @Screen.drawRectangle
   6076   |          |  0;JMP
   6077   |ROM[6076] |  (Screen.drawRectangle$ret.38)
          |          |        // pop temp 0
   6077   |    0     |  @0
   6078   |          |  D=A
   6079   |    5     |  @5
   6080   |          |  D=D+A
   6081   | RAM[13]  |  @R13
   6082   |          |  M=D
   6083   |    0     |  @0
   6084   |          |  AM=M-1
   6085   |          |  D=M
   6086   | RAM[13]  |  @R13
   6087   |          |  A=M
   6088   |          |  M=D
          |          |        // push constant 0
   6089   |    0     |  @0
   6090   |          |  D=A
   6091   |    0     |  @0
   6092   |          |  A=M
   6093   |          |  M=D
   6094   |    0     |  @0
   6095   |          |  M=M+1
          |          |        // return
   6096   |    1     |  @1
   6097   |          |  D=M
   6098   |    13    |  @13
   6099   |          |  M=D
   6100   |    5     |  @5
   6101   |          |  D=A
   6102   |    13    |  @13
   6103   |          |  D=M-D
   6104   |          |  A=D
   6105   |          |  D=M
   6106   |    14    |  @14
   6107   |          |  M=D
   6108   |    0     |  @0
   6109   |          |  AM=M-1
   6110   |          |  D=M
   6111   |    2     |  @2
   6112   |          |  A=M
   6113   |          |  M=D
   6114   |    2     |  @2
   6115   |          |  D=M+1
   6116   |    0     |  @0
   6117   |          |  M=D
   6118   |    13    |  @13
   6119   |          |  M=M-1
   6120   |          |  A=M
   6121   |          |  D=M
   6122   |    4     |  @4
   6123   |          |  M=D
   6124   |    13    |  @13
   6125   |          |  M=M-1
   6126   |          |  A=M
   6127   |          |  D=M
   6128   |    3     |  @3
   6129   |          |  M=D
   6130   |    13    |  @13
   6131   |          |  M=M-1
   6132   |          |  A=M
   6133   |          |  D=M
   6134   |    2     |  @2
   6135   |          |  M=D
   6136   |    13    |  @13
   6137   |          |  M=M-1
   6138   |          |  A=M
   6139   |          |  D=M
   6140   |    1     |  @1
   6141   |          |  M=D
   6142   |    14    |  @14
   6143   |          |  A=M
   6144   |          |  0;JMP
          |          |        // /** Sets the bat's direction (0=stop, 1=left, 2=right). */
          |          |        // function Bat.setDirection 0
   6145   |ROM[6144] |  (Bat.setDirection)
   6145   |    0     |  @0
   6146   |          |  D=M
   6147   |    1     |  @1
   6148   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this       -> argument 0
          |          |        // ARG    int Adirection -> argument 1
          |          |        // */
          |          |        // push argument 0
   6149   |    0     |  @0
   6150   |          |  D=A
   6151   |    2     |  @2
   6152   |          |  A=M
   6153   |          |  A=A+D
   6154   |          |  D=M
   6155   |    0     |  @0
   6156   |          |  A=M
   6157   |          |  M=D
   6158   |    0     |  @0
   6159   |          |  M=M+1
          |          |        // pop pointer 0
   6160   |    0     |  @0
   6161   |          |  AM=M-1
   6162   |          |  D=M
   6163   |    3     |  @3
   6164   |          |  M=D
          |          |        // push argument 1
   6165   |    1     |  @1
   6166   |          |  D=A
   6167   |    2     |  @2
   6168   |          |  A=M
   6169   |          |  A=A+D
   6170   |          |  D=M
   6171   |    0     |  @0
   6172   |          |  A=M
   6173   |          |  M=D
   6174   |    0     |  @0
   6175   |          |  M=M+1
          |          |        // pop this 4
   6176   |    4     |  @4
   6177   |          |  D=A
   6178   |    3     |  @3
   6179   |          |  D=D+M
   6180   | RAM[13]  |  @R13
   6181   |          |  M=D
   6182   |    0     |  @0
   6183   |          |  AM=M-1
   6184   |          |  D=M
   6185   | RAM[13]  |  @R13
   6186   |          |  A=M
   6187   |          |  M=D
          |          |        // push constant 0
   6188   |    0     |  @0
   6189   |          |  D=A
   6190   |    0     |  @0
   6191   |          |  A=M
   6192   |          |  M=D
   6193   |    0     |  @0
   6194   |          |  M=M+1
          |          |        // return
   6195   |    1     |  @1
   6196   |          |  D=M
   6197   |    13    |  @13
   6198   |          |  M=D
   6199   |    5     |  @5
   6200   |          |  D=A
   6201   |    13    |  @13
   6202   |          |  D=M-D
   6203   |          |  A=D
   6204   |          |  D=M
   6205   |    14    |  @14
   6206   |          |  M=D
   6207   |    0     |  @0
   6208   |          |  AM=M-1
   6209   |          |  D=M
   6210   |    2     |  @2
   6211   |          |  A=M
   6212   |          |  M=D
   6213   |    2     |  @2
   6214   |          |  D=M+1
   6215   |    0     |  @0
   6216   |          |  M=D
   6217   |    13    |  @13
   6218   |          |  M=M-1
   6219   |          |  A=M
   6220   |          |  D=M
   6221   |    4     |  @4
   6222   |          |  M=D
   6223   |    13    |  @13
   6224   |          |  M=M-1
   6225   |          |  A=M
   6226   |          |  D=M
   6227   |    3     |  @3
   6228   |          |  M=D
   6229   |    13    |  @13
   6230   |          |  M=M-1
   6231   |          |  A=M
   6232   |          |  D=M
   6233   |    2     |  @2
   6234   |          |  M=D
   6235   |    13    |  @13
   6236   |          |  M=M-1
   6237   |          |  A=M
   6238   |          |  D=M
   6239   |    1     |  @1
   6240   |          |  M=D
   6241   |    14    |  @14
   6242   |          |  A=M
   6243   |          |  0;JMP
          |          |        // /** Returns the bat's left edge. */
          |          |        // function Bat.getLeft 0
   6244   |ROM[6243] |  (Bat.getLeft)
   6244   |    0     |  @0
   6245   |          |  D=M
   6246   |    1     |  @1
   6247   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   6248   |    0     |  @0
   6249   |          |  D=A
   6250   |    2     |  @2
   6251   |          |  A=M
   6252   |          |  A=A+D
   6253   |          |  D=M
   6254   |    0     |  @0
   6255   |          |  A=M
   6256   |          |  M=D
   6257   |    0     |  @0
   6258   |          |  M=M+1
          |          |        // pop pointer 0
   6259   |    0     |  @0
   6260   |          |  AM=M-1
   6261   |          |  D=M
   6262   |    3     |  @3
   6263   |          |  M=D
          |          |        // push this 0
   6264   |    0     |  @0
   6265   |          |  D=A
   6266   |    3     |  @3
   6267   |          |  A=M
   6268   |          |  A=A+D
   6269   |          |  D=M
   6270   |    0     |  @0
   6271   |          |  A=M
   6272   |          |  M=D
   6273   |    0     |  @0
   6274   |          |  M=M+1
          |          |        // return
   6275   |    1     |  @1
   6276   |          |  D=M
   6277   |    13    |  @13
   6278   |          |  M=D
   6279   |    5     |  @5
   6280   |          |  D=A
   6281   |    13    |  @13
   6282   |          |  D=M-D
   6283   |          |  A=D
   6284   |          |  D=M
   6285   |    14    |  @14
   6286   |          |  M=D
   6287   |    0     |  @0
   6288   |          |  AM=M-1
   6289   |          |  D=M
   6290   |    2     |  @2
   6291   |          |  A=M
   6292   |          |  M=D
   6293   |    2     |  @2
   6294   |          |  D=M+1
   6295   |    0     |  @0
   6296   |          |  M=D
   6297   |    13    |  @13
   6298   |          |  M=M-1
   6299   |          |  A=M
   6300   |          |  D=M
   6301   |    4     |  @4
   6302   |          |  M=D
   6303   |    13    |  @13
   6304   |          |  M=M-1
   6305   |          |  A=M
   6306   |          |  D=M
   6307   |    3     |  @3
   6308   |          |  M=D
   6309   |    13    |  @13
   6310   |          |  M=M-1
   6311   |          |  A=M
   6312   |          |  D=M
   6313   |    2     |  @2
   6314   |          |  M=D
   6315   |    13    |  @13
   6316   |          |  M=M-1
   6317   |          |  A=M
   6318   |          |  D=M
   6319   |    1     |  @1
   6320   |          |  M=D
   6321   |    14    |  @14
   6322   |          |  A=M
   6323   |          |  0;JMP
          |          |        // /** Returns the bat's right edge. */
          |          |        // function Bat.getRight 0
   6324   |ROM[6323] |  (Bat.getRight)
   6324   |    0     |  @0
   6325   |          |  D=M
   6326   |    1     |  @1
   6327   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   6328   |    0     |  @0
   6329   |          |  D=A
   6330   |    2     |  @2
   6331   |          |  A=M
   6332   |          |  A=A+D
   6333   |          |  D=M
   6334   |    0     |  @0
   6335   |          |  A=M
   6336   |          |  M=D
   6337   |    0     |  @0
   6338   |          |  M=M+1
          |          |        // pop pointer 0
   6339   |    0     |  @0
   6340   |          |  AM=M-1
   6341   |          |  D=M
   6342   |    3     |  @3
   6343   |          |  M=D
          |          |        // push this 0
   6344   |    0     |  @0
   6345   |          |  D=A
   6346   |    3     |  @3
   6347   |          |  A=M
   6348   |          |  A=A+D
   6349   |          |  D=M
   6350   |    0     |  @0
   6351   |          |  A=M
   6352   |          |  M=D
   6353   |    0     |  @0
   6354   |          |  M=M+1
          |          |        // push this 2
   6355   |    2     |  @2
   6356   |          |  D=A
   6357   |    3     |  @3
   6358   |          |  A=M
   6359   |          |  A=A+D
   6360   |          |  D=M
   6361   |    0     |  @0
   6362   |          |  A=M
   6363   |          |  M=D
   6364   |    0     |  @0
   6365   |          |  M=M+1
          |          |        // add
   6366   |    0     |  @0
   6367   |          |  AM=M-1
   6368   |          |  D=M
   6369   |          |  A=A-1
   6370   |          |  M=M+D
          |          |        // return
   6371   |    1     |  @1
   6372   |          |  D=M
   6373   |    13    |  @13
   6374   |          |  M=D
   6375   |    5     |  @5
   6376   |          |  D=A
   6377   |    13    |  @13
   6378   |          |  D=M-D
   6379   |          |  A=D
   6380   |          |  D=M
   6381   |    14    |  @14
   6382   |          |  M=D
   6383   |    0     |  @0
   6384   |          |  AM=M-1
   6385   |          |  D=M
   6386   |    2     |  @2
   6387   |          |  A=M
   6388   |          |  M=D
   6389   |    2     |  @2
   6390   |          |  D=M+1
   6391   |    0     |  @0
   6392   |          |  M=D
   6393   |    13    |  @13
   6394   |          |  M=M-1
   6395   |          |  A=M
   6396   |          |  D=M
   6397   |    4     |  @4
   6398   |          |  M=D
   6399   |    13    |  @13
   6400   |          |  M=M-1
   6401   |          |  A=M
   6402   |          |  D=M
   6403   |    3     |  @3
   6404   |          |  M=D
   6405   |    13    |  @13
   6406   |          |  M=M-1
   6407   |          |  A=M
   6408   |          |  D=M
   6409   |    2     |  @2
   6410   |          |  M=D
   6411   |    13    |  @13
   6412   |          |  M=M-1
   6413   |          |  A=M
   6414   |          |  D=M
   6415   |    1     |  @1
   6416   |          |  M=D
   6417   |    14    |  @14
   6418   |          |  A=M
   6419   |          |  0;JMP
          |          |        // /** Sets the bat's width. */
          |          |        // function Bat.setWidth 0
   6420   |ROM[6419] |  (Bat.setWidth)
   6420   |    0     |  @0
   6421   |          |  D=M
   6422   |    1     |  @1
   6423   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this   -> argument 0
          |          |        // ARG    int Awidth -> argument 1
          |          |        // */
          |          |        // push argument 0
   6424   |    0     |  @0
   6425   |          |  D=A
   6426   |    2     |  @2
   6427   |          |  A=M
   6428   |          |  A=A+D
   6429   |          |  D=M
   6430   |    0     |  @0
   6431   |          |  A=M
   6432   |          |  M=D
   6433   |    0     |  @0
   6434   |          |  M=M+1
          |          |        // pop pointer 0
   6435   |    0     |  @0
   6436   |          |  AM=M-1
   6437   |          |  D=M
   6438   |    3     |  @3
   6439   |          |  M=D
          |          |        // push pointer 0
   6440   |    3     |  @3
   6441   |          |  D=M
   6442   |    0     |  @0
   6443   |          |  A=M
   6444   |          |  M=D
   6445   |    0     |  @0
   6446   |          |  M=M+1
          |          |        // call Bat.hide 1
   6447   |RAM[6495] |  @Bat.hide$ret.39
   6448   |          |  D=A
   6449   |    0     |  @0
   6450   |          |  A=M
   6451   |          |  M=D
   6452   |    0     |  @0
   6453   |          |  M=M+1
   6454   |    1     |  @1
   6455   |          |  D=M
   6456   |    0     |  @0
   6457   |          |  A=M
   6458   |          |  M=D
   6459   |    0     |  @0
   6460   |          |  M=M+1
   6461   |    2     |  @2
   6462   |          |  D=M
   6463   |    0     |  @0
   6464   |          |  A=M
   6465   |          |  M=D
   6466   |    0     |  @0
   6467   |          |  M=M+1
   6468   |    3     |  @3
   6469   |          |  D=M
   6470   |    0     |  @0
   6471   |          |  A=M
   6472   |          |  M=D
   6473   |    0     |  @0
   6474   |          |  M=M+1
   6475   |    4     |  @4
   6476   |          |  D=M
   6477   |    0     |  @0
   6478   |          |  A=M
   6479   |          |  M=D
   6480   |    0     |  @0
   6481   |          |  M=M+1
   6482   |    0     |  @0
   6483   |          |  D=M
   6484   |    2     |  @2
   6485   |          |  M=D
   6486   |    6     |  @6
   6487   |          |  D=A
   6488   |    2     |  @2
   6489   |          |  M=M-D
   6490   |    0     |  @0
   6491   |          |  D=M
   6492   |    1     |  @1
   6493   |          |  M=D
   6494   |RAM[5719] |  @Bat.hide
   6495   |          |  0;JMP
   6496   |ROM[6495] |  (Bat.hide$ret.39)
          |          |        // pop temp 0
   6496   |    0     |  @0
   6497   |          |  D=A
   6498   |    5     |  @5
   6499   |          |  D=D+A
   6500   | RAM[13]  |  @R13
   6501   |          |  M=D
   6502   |    0     |  @0
   6503   |          |  AM=M-1
   6504   |          |  D=M
   6505   | RAM[13]  |  @R13
   6506   |          |  A=M
   6507   |          |  M=D
          |          |        // push argument 1
   6508   |    1     |  @1
   6509   |          |  D=A
   6510   |    2     |  @2
   6511   |          |  A=M
   6512   |          |  A=A+D
   6513   |          |  D=M
   6514   |    0     |  @0
   6515   |          |  A=M
   6516   |          |  M=D
   6517   |    0     |  @0
   6518   |          |  M=M+1
          |          |        // pop this 2
   6519   |    2     |  @2
   6520   |          |  D=A
   6521   |    3     |  @3
   6522   |          |  D=D+M
   6523   | RAM[13]  |  @R13
   6524   |          |  M=D
   6525   |    0     |  @0
   6526   |          |  AM=M-1
   6527   |          |  D=M
   6528   | RAM[13]  |  @R13
   6529   |          |  A=M
   6530   |          |  M=D
          |          |        // push pointer 0
   6531   |    3     |  @3
   6532   |          |  D=M
   6533   |    0     |  @0
   6534   |          |  A=M
   6535   |          |  M=D
   6536   |    0     |  @0
   6537   |          |  M=M+1
          |          |        // call Bat.show 1
   6538   |RAM[6586] |  @Bat.show$ret.40
   6539   |          |  D=A
   6540   |    0     |  @0
   6541   |          |  A=M
   6542   |          |  M=D
   6543   |    0     |  @0
   6544   |          |  M=M+1
   6545   |    1     |  @1
   6546   |          |  D=M
   6547   |    0     |  @0
   6548   |          |  A=M
   6549   |          |  M=D
   6550   |    0     |  @0
   6551   |          |  M=M+1
   6552   |    2     |  @2
   6553   |          |  D=M
   6554   |    0     |  @0
   6555   |          |  A=M
   6556   |          |  M=D
   6557   |    0     |  @0
   6558   |          |  M=M+1
   6559   |    3     |  @3
   6560   |          |  D=M
   6561   |    0     |  @0
   6562   |          |  A=M
   6563   |          |  M=D
   6564   |    0     |  @0
   6565   |          |  M=M+1
   6566   |    4     |  @4
   6567   |          |  D=M
   6568   |    0     |  @0
   6569   |          |  A=M
   6570   |          |  M=D
   6571   |    0     |  @0
   6572   |          |  M=M+1
   6573   |    0     |  @0
   6574   |          |  D=M
   6575   |    2     |  @2
   6576   |          |  M=D
   6577   |    6     |  @6
   6578   |          |  D=A
   6579   |    2     |  @2
   6580   |          |  M=M-D
   6581   |    0     |  @0
   6582   |          |  D=M
   6583   |    1     |  @1
   6584   |          |  M=D
   6585   |RAM[5504] |  @Bat.show
   6586   |          |  0;JMP
   6587   |ROM[6586] |  (Bat.show$ret.40)
          |          |        // pop temp 0
   6587   |    0     |  @0
   6588   |          |  D=A
   6589   |    5     |  @5
   6590   |          |  D=D+A
   6591   | RAM[13]  |  @R13
   6592   |          |  M=D
   6593   |    0     |  @0
   6594   |          |  AM=M-1
   6595   |          |  D=M
   6596   | RAM[13]  |  @R13
   6597   |          |  A=M
   6598   |          |  M=D
          |          |        // push constant 0
   6599   |    0     |  @0
   6600   |          |  D=A
   6601   |    0     |  @0
   6602   |          |  A=M
   6603   |          |  M=D
   6604   |    0     |  @0
   6605   |          |  M=M+1
          |          |        // return
   6606   |    1     |  @1
   6607   |          |  D=M
   6608   |    13    |  @13
   6609   |          |  M=D
   6610   |    5     |  @5
   6611   |          |  D=A
   6612   |    13    |  @13
   6613   |          |  D=M-D
   6614   |          |  A=D
   6615   |          |  D=M
   6616   |    14    |  @14
   6617   |          |  M=D
   6618   |    0     |  @0
   6619   |          |  AM=M-1
   6620   |          |  D=M
   6621   |    2     |  @2
   6622   |          |  A=M
   6623   |          |  M=D
   6624   |    2     |  @2
   6625   |          |  D=M+1
   6626   |    0     |  @0
   6627   |          |  M=D
   6628   |    13    |  @13
   6629   |          |  M=M-1
   6630   |          |  A=M
   6631   |          |  D=M
   6632   |    4     |  @4
   6633   |          |  M=D
   6634   |    13    |  @13
   6635   |          |  M=M-1
   6636   |          |  A=M
   6637   |          |  D=M
   6638   |    3     |  @3
   6639   |          |  M=D
   6640   |    13    |  @13
   6641   |          |  M=M-1
   6642   |          |  A=M
   6643   |          |  D=M
   6644   |    2     |  @2
   6645   |          |  M=D
   6646   |    13    |  @13
   6647   |          |  M=M-1
   6648   |          |  A=M
   6649   |          |  D=M
   6650   |    1     |  @1
   6651   |          |  M=D
   6652   |    14    |  @14
   6653   |          |  A=M
   6654   |          |  0;JMP
          |          |        // /** Moves the bat one step in the bat's direction. */
          |          |        // function Bat.move 0
   6655   |ROM[6654] |  (Bat.move)
   6655   |    0     |  @0
   6656   |          |  D=M
   6657   |    1     |  @1
   6658   |          |  M=D
          |          |        // /*
          |          |        // ARG    Bat this -> argument 0
          |          |        // */
          |          |        // push argument 0
   6659   |    0     |  @0
   6660   |          |  D=A
   6661   |    2     |  @2
   6662   |          |  A=M
   6663   |          |  A=A+D
   6664   |          |  D=M
   6665   |    0     |  @0
   6666   |          |  A=M
   6667   |          |  M=D
   6668   |    0     |  @0
   6669   |          |  M=M+1
          |          |        // pop pointer 0
   6670   |    0     |  @0
   6671   |          |  AM=M-1
   6672   |          |  D=M
   6673   |    3     |  @3
   6674   |          |  M=D
          |          |        // push this 4
   6675   |    4     |  @4
   6676   |          |  D=A
   6677   |    3     |  @3
   6678   |          |  A=M
   6679   |          |  A=A+D
   6680   |          |  D=M
   6681   |    0     |  @0
   6682   |          |  A=M
   6683   |          |  M=D
   6684   |    0     |  @0
   6685   |          |  M=M+1
          |          |        // push constant 1
   6686   |    1     |  @1
   6687   |          |  D=A
   6688   |    0     |  @0
   6689   |          |  A=M
   6690   |          |  M=D
   6691   |    0     |  @0
   6692   |          |  M=M+1
          |          |        // eq
   6693   |    0     |  @0
   6694   |          |  AM=M-1
   6695   |          |  D=M
   6696   |          |  A=A-1
   6697   |          |  D=M-D
   6698   |          |  M=-1
   6699   |RAM[6703] |  @T18
   6700   |          |  D;JEQ
   6701   |    0     |  @0
   6702   |          |  A=M-1
   6703   |          |  M=0
   6704   |ROM[6703] |  (T18)
          |          |        // not
   6704   |    0     |  @0
   6705   |          |  A=M-1
   6706   |          |  M=!M
          |          |        // if-goto Bat.move_FALSE_0
   6707   |    0     |  @0
   6708   |          |  AM=M-1
   6709   |          |  D=M
   6710   |RAM[7255] |  @Bat.move_FALSE_0
   6711   |          |  D;JNE
          |          |        // push this 0
   6712   |    0     |  @0
   6713   |          |  D=A
   6714   |    3     |  @3
   6715   |          |  A=M
   6716   |          |  A=A+D
   6717   |          |  D=M
   6718   |    0     |  @0
   6719   |          |  A=M
   6720   |          |  M=D
   6721   |    0     |  @0
   6722   |          |  M=M+1
          |          |        // push constant 4
   6723   |    4     |  @4
   6724   |          |  D=A
   6725   |    0     |  @0
   6726   |          |  A=M
   6727   |          |  M=D
   6728   |    0     |  @0
   6729   |          |  M=M+1
          |          |        // sub
   6730   |    0     |  @0
   6731   |          |  AM=M-1
   6732   |          |  D=M
   6733   |          |  A=A-1
   6734   |          |  M=M-D
          |          |        // pop this 0
   6735   |    0     |  @0
   6736   |          |  D=A
   6737   |    3     |  @3
   6738   |          |  D=D+M
   6739   | RAM[13]  |  @R13
   6740   |          |  M=D
   6741   |    0     |  @0
   6742   |          |  AM=M-1
   6743   |          |  D=M
   6744   | RAM[13]  |  @R13
   6745   |          |  A=M
   6746   |          |  M=D
          |          |        // push this 0
   6747   |    0     |  @0
   6748   |          |  D=A
   6749   |    3     |  @3
   6750   |          |  A=M
   6751   |          |  A=A+D
   6752   |          |  D=M
   6753   |    0     |  @0
   6754   |          |  A=M
   6755   |          |  M=D
   6756   |    0     |  @0
   6757   |          |  M=M+1
          |          |        // push constant 0
   6758   |    0     |  @0
   6759   |          |  D=A
   6760   |    0     |  @0
   6761   |          |  A=M
   6762   |          |  M=D
   6763   |    0     |  @0
   6764   |          |  M=M+1
          |          |        // lt
   6765   |    0     |  @0
   6766   |          |  AM=M-1
   6767   |          |  D=M
   6768   |          |  A=A-1
   6769   |          |  D=M-D
   6770   |          |  M=-1
   6771   |RAM[6775] |  @T19
   6772   |          |  D;JLT
   6773   |    0     |  @0
   6774   |          |  A=M-1
   6775   |          |  M=0
   6776   |ROM[6775] |  (T19)
          |          |        // not
   6776   |    0     |  @0
   6777   |          |  A=M-1
   6778   |          |  M=!M
          |          |        // if-goto Bat.move_FALSE_1
   6779   |    0     |  @0
   6780   |          |  AM=M-1
   6781   |          |  D=M
   6782   |RAM[6804] |  @Bat.move_FALSE_1
   6783   |          |  D;JNE
          |          |        // push constant 0
   6784   |    0     |  @0
   6785   |          |  D=A
   6786   |    0     |  @0
   6787   |          |  A=M
   6788   |          |  M=D
   6789   |    0     |  @0
   6790   |          |  M=M+1
          |          |        // pop this 0
   6791   |    0     |  @0
   6792   |          |  D=A
   6793   |    3     |  @3
   6794   |          |  D=D+M
   6795   | RAM[13]  |  @R13
   6796   |          |  M=D
   6797   |    0     |  @0
   6798   |          |  AM=M-1
   6799   |          |  D=M
   6800   | RAM[13]  |  @R13
   6801   |          |  A=M
   6802   |          |  M=D
          |          |        // goto Bat.move_TRUE_1
   6803   |RAM[6804] |  @Bat.move_TRUE_1
   6804   |          |  0;JMP
          |          |        // label Bat.move_FALSE_1
   6805   |ROM[6804] |  (Bat.move_FALSE_1)
          |          |        // label Bat.move_TRUE_1
   6805   |ROM[6804] |  (Bat.move_TRUE_1)
          |          |        // push constant 0
   6805   |    0     |  @0
   6806   |          |  D=A
   6807   |    0     |  @0
   6808   |          |  A=M
   6809   |          |  M=D
   6810   |    0     |  @0
   6811   |          |  M=M+1
          |          |        // call Screen.setColor 1
   6812   |RAM[6860] |  @Screen.setColor$ret.41
   6813   |          |  D=A
   6814   |    0     |  @0
   6815   |          |  A=M
   6816   |          |  M=D
   6817   |    0     |  @0
   6818   |          |  M=M+1
   6819   |    1     |  @1
   6820   |          |  D=M
   6821   |    0     |  @0
   6822   |          |  A=M
   6823   |          |  M=D
   6824   |    0     |  @0
   6825   |          |  M=M+1
   6826   |    2     |  @2
   6827   |          |  D=M
   6828   |    0     |  @0
   6829   |          |  A=M
   6830   |          |  M=D
   6831   |    0     |  @0
   6832   |          |  M=M+1
   6833   |    3     |  @3
   6834   |          |  D=M
   6835   |    0     |  @0
   6836   |          |  A=M
   6837   |          |  M=D
   6838   |    0     |  @0
   6839   |          |  M=M+1
   6840   |    4     |  @4
   6841   |          |  D=M
   6842   |    0     |  @0
   6843   |          |  A=M
   6844   |          |  M=D
   6845   |    0     |  @0
   6846   |          |  M=M+1
   6847   |    0     |  @0
   6848   |          |  D=M
   6849   |    2     |  @2
   6850   |          |  M=D
   6851   |    6     |  @6
   6852   |          |  D=A
   6853   |    2     |  @2
   6854   |          |  M=M-D
   6855   |    0     |  @0
   6856   |          |  D=M
   6857   |    1     |  @1
   6858   |          |  M=D
   6859   | RAM[19]  |  @Screen.setColor
   6860   |          |  0;JMP
   6861   |ROM[6860] |  (Screen.setColor$ret.41)
          |          |        // pop temp 0
   6861   |    0     |  @0
   6862   |          |  D=A
   6863   |    5     |  @5
   6864   |          |  D=D+A
   6865   | RAM[13]  |  @R13
   6866   |          |  M=D
   6867   |    0     |  @0
   6868   |          |  AM=M-1
   6869   |          |  D=M
   6870   | RAM[13]  |  @R13
   6871   |          |  A=M
   6872   |          |  M=D
          |          |        // push this 0
   6873   |    0     |  @0
   6874   |          |  D=A
   6875   |    3     |  @3
   6876   |          |  A=M
   6877   |          |  A=A+D
   6878   |          |  D=M
   6879   |    0     |  @0
   6880   |          |  A=M
   6881   |          |  M=D
   6882   |    0     |  @0
   6883   |          |  M=M+1
          |          |        // push this 2
   6884   |    2     |  @2
   6885   |          |  D=A
   6886   |    3     |  @3
   6887   |          |  A=M
   6888   |          |  A=A+D
   6889   |          |  D=M
   6890   |    0     |  @0
   6891   |          |  A=M
   6892   |          |  M=D
   6893   |    0     |  @0
   6894   |          |  M=M+1
          |          |        // add
   6895   |    0     |  @0
   6896   |          |  AM=M-1
   6897   |          |  D=M
   6898   |          |  A=A-1
   6899   |          |  M=M+D
          |          |        // push constant 1
   6900   |    1     |  @1
   6901   |          |  D=A
   6902   |    0     |  @0
   6903   |          |  A=M
   6904   |          |  M=D
   6905   |    0     |  @0
   6906   |          |  M=M+1
          |          |        // add
   6907   |    0     |  @0
   6908   |          |  AM=M-1
   6909   |          |  D=M
   6910   |          |  A=A-1
   6911   |          |  M=M+D
          |          |        // push this 1
   6912   |    1     |  @1
   6913   |          |  D=A
   6914   |    3     |  @3
   6915   |          |  A=M
   6916   |          |  A=A+D
   6917   |          |  D=M
   6918   |    0     |  @0
   6919   |          |  A=M
   6920   |          |  M=D
   6921   |    0     |  @0
   6922   |          |  M=M+1
          |          |        // push this 0
   6923   |    0     |  @0
   6924   |          |  D=A
   6925   |    3     |  @3
   6926   |          |  A=M
   6927   |          |  A=A+D
   6928   |          |  D=M
   6929   |    0     |  @0
   6930   |          |  A=M
   6931   |          |  M=D
   6932   |    0     |  @0
   6933   |          |  M=M+1
          |          |        // push this 2
   6934   |    2     |  @2
   6935   |          |  D=A
   6936   |    3     |  @3
   6937   |          |  A=M
   6938   |          |  A=A+D
   6939   |          |  D=M
   6940   |    0     |  @0
   6941   |          |  A=M
   6942   |          |  M=D
   6943   |    0     |  @0
   6944   |          |  M=M+1
          |          |        // add
   6945   |    0     |  @0
   6946   |          |  AM=M-1
   6947   |          |  D=M
   6948   |          |  A=A-1
   6949   |          |  M=M+D
          |          |        // push constant 4
   6950   |    4     |  @4
   6951   |          |  D=A
   6952   |    0     |  @0
   6953   |          |  A=M
   6954   |          |  M=D
   6955   |    0     |  @0
   6956   |          |  M=M+1
          |          |        // add
   6957   |    0     |  @0
   6958   |          |  AM=M-1
   6959   |          |  D=M
   6960   |          |  A=A-1
   6961   |          |  M=M+D
          |          |        // push this 1
   6962   |    1     |  @1
   6963   |          |  D=A
   6964   |    3     |  @3
   6965   |          |  A=M
   6966   |          |  A=A+D
   6967   |          |  D=M
   6968   |    0     |  @0
   6969   |          |  A=M
   6970   |          |  M=D
   6971   |    0     |  @0
   6972   |          |  M=M+1
          |          |        // push this 3
   6973   |    3     |  @3
   6974   |          |  D=A
   6975   |    3     |  @3
   6976   |          |  A=M
   6977   |          |  A=A+D
   6978   |          |  D=M
   6979   |    0     |  @0
   6980   |          |  A=M
   6981   |          |  M=D
   6982   |    0     |  @0
   6983   |          |  M=M+1
          |          |        // add
   6984   |    0     |  @0
   6985   |          |  AM=M-1
   6986   |          |  D=M
   6987   |          |  A=A-1
   6988   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   6989   |RAM[7037] |  @Screen.drawRectangle$ret.42
   6990   |          |  D=A
   6991   |    0     |  @0
   6992   |          |  A=M
   6993   |          |  M=D
   6994   |    0     |  @0
   6995   |          |  M=M+1
   6996   |    1     |  @1
   6997   |          |  D=M
   6998   |    0     |  @0
   6999   |          |  A=M
   7000   |          |  M=D
   7001   |    0     |  @0
   7002   |          |  M=M+1
   7003   |    2     |  @2
   7004   |          |  D=M
   7005   |    0     |  @0
   7006   |          |  A=M
   7007   |          |  M=D
   7008   |    0     |  @0
   7009   |          |  M=M+1
   7010   |    3     |  @3
   7011   |          |  D=M
   7012   |    0     |  @0
   7013   |          |  A=M
   7014   |          |  M=D
   7015   |    0     |  @0
   7016   |          |  M=M+1
   7017   |    4     |  @4
   7018   |          |  D=M
   7019   |    0     |  @0
   7020   |          |  A=M
   7021   |          |  M=D
   7022   |    0     |  @0
   7023   |          |  M=M+1
   7024   |    0     |  @0
   7025   |          |  D=M
   7026   |    2     |  @2
   7027   |          |  M=D
   7028   |    9     |  @9
   7029   |          |  D=A
   7030   |    2     |  @2
   7031   |          |  M=M-D
   7032   |    0     |  @0
   7033   |          |  D=M
   7034   |    1     |  @1
   7035   |          |  M=D
   7036   | RAM[20]  |  @Screen.drawRectangle
   7037   |          |  0;JMP
   7038   |ROM[7037] |  (Screen.drawRectangle$ret.42)
          |          |        // pop temp 0
   7038   |    0     |  @0
   7039   |          |  D=A
   7040   |    5     |  @5
   7041   |          |  D=D+A
   7042   | RAM[13]  |  @R13
   7043   |          |  M=D
   7044   |    0     |  @0
   7045   |          |  AM=M-1
   7046   |          |  D=M
   7047   | RAM[13]  |  @R13
   7048   |          |  A=M
   7049   |          |  M=D
          |          |        // push constant 1
   7050   |    1     |  @1
   7051   |          |  D=A
   7052   |    0     |  @0
   7053   |          |  A=M
   7054   |          |  M=D
   7055   |    0     |  @0
   7056   |          |  M=M+1
          |          |        // neg
   7057   |    0     |  @0
   7058   |          |  A=M-1
   7059   |          |  M=-M
          |          |        // call Screen.setColor 1
   7060   |RAM[7108] |  @Screen.setColor$ret.43
   7061   |          |  D=A
   7062   |    0     |  @0
   7063   |          |  A=M
   7064   |          |  M=D
   7065   |    0     |  @0
   7066   |          |  M=M+1
   7067   |    1     |  @1
   7068   |          |  D=M
   7069   |    0     |  @0
   7070   |          |  A=M
   7071   |          |  M=D
   7072   |    0     |  @0
   7073   |          |  M=M+1
   7074   |    2     |  @2
   7075   |          |  D=M
   7076   |    0     |  @0
   7077   |          |  A=M
   7078   |          |  M=D
   7079   |    0     |  @0
   7080   |          |  M=M+1
   7081   |    3     |  @3
   7082   |          |  D=M
   7083   |    0     |  @0
   7084   |          |  A=M
   7085   |          |  M=D
   7086   |    0     |  @0
   7087   |          |  M=M+1
   7088   |    4     |  @4
   7089   |          |  D=M
   7090   |    0     |  @0
   7091   |          |  A=M
   7092   |          |  M=D
   7093   |    0     |  @0
   7094   |          |  M=M+1
   7095   |    0     |  @0
   7096   |          |  D=M
   7097   |    2     |  @2
   7098   |          |  M=D
   7099   |    6     |  @6
   7100   |          |  D=A
   7101   |    2     |  @2
   7102   |          |  M=M-D
   7103   |    0     |  @0
   7104   |          |  D=M
   7105   |    1     |  @1
   7106   |          |  M=D
   7107   | RAM[19]  |  @Screen.setColor
   7108   |          |  0;JMP
   7109   |ROM[7108] |  (Screen.setColor$ret.43)
          |          |        // pop temp 0
   7109   |    0     |  @0
   7110   |          |  D=A
   7111   |    5     |  @5
   7112   |          |  D=D+A
   7113   | RAM[13]  |  @R13
   7114   |          |  M=D
   7115   |    0     |  @0
   7116   |          |  AM=M-1
   7117   |          |  D=M
   7118   | RAM[13]  |  @R13
   7119   |          |  A=M
   7120   |          |  M=D
          |          |        // push this 0
   7121   |    0     |  @0
   7122   |          |  D=A
   7123   |    3     |  @3
   7124   |          |  A=M
   7125   |          |  A=A+D
   7126   |          |  D=M
   7127   |    0     |  @0
   7128   |          |  A=M
   7129   |          |  M=D
   7130   |    0     |  @0
   7131   |          |  M=M+1
          |          |        // push this 1
   7132   |    1     |  @1
   7133   |          |  D=A
   7134   |    3     |  @3
   7135   |          |  A=M
   7136   |          |  A=A+D
   7137   |          |  D=M
   7138   |    0     |  @0
   7139   |          |  A=M
   7140   |          |  M=D
   7141   |    0     |  @0
   7142   |          |  M=M+1
          |          |        // push this 0
   7143   |    0     |  @0
   7144   |          |  D=A
   7145   |    3     |  @3
   7146   |          |  A=M
   7147   |          |  A=A+D
   7148   |          |  D=M
   7149   |    0     |  @0
   7150   |          |  A=M
   7151   |          |  M=D
   7152   |    0     |  @0
   7153   |          |  M=M+1
          |          |        // push constant 3
   7154   |    3     |  @3
   7155   |          |  D=A
   7156   |    0     |  @0
   7157   |          |  A=M
   7158   |          |  M=D
   7159   |    0     |  @0
   7160   |          |  M=M+1
          |          |        // add
   7161   |    0     |  @0
   7162   |          |  AM=M-1
   7163   |          |  D=M
   7164   |          |  A=A-1
   7165   |          |  M=M+D
          |          |        // push this 1
   7166   |    1     |  @1
   7167   |          |  D=A
   7168   |    3     |  @3
   7169   |          |  A=M
   7170   |          |  A=A+D
   7171   |          |  D=M
   7172   |    0     |  @0
   7173   |          |  A=M
   7174   |          |  M=D
   7175   |    0     |  @0
   7176   |          |  M=M+1
          |          |        // push this 3
   7177   |    3     |  @3
   7178   |          |  D=A
   7179   |    3     |  @3
   7180   |          |  A=M
   7181   |          |  A=A+D
   7182   |          |  D=M
   7183   |    0     |  @0
   7184   |          |  A=M
   7185   |          |  M=D
   7186   |    0     |  @0
   7187   |          |  M=M+1
          |          |        // add
   7188   |    0     |  @0
   7189   |          |  AM=M-1
   7190   |          |  D=M
   7191   |          |  A=A-1
   7192   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   7193   |RAM[7241] |  @Screen.drawRectangle$ret.44
   7194   |          |  D=A
   7195   |    0     |  @0
   7196   |          |  A=M
   7197   |          |  M=D
   7198   |    0     |  @0
   7199   |          |  M=M+1
   7200   |    1     |  @1
   7201   |          |  D=M
   7202   |    0     |  @0
   7203   |          |  A=M
   7204   |          |  M=D
   7205   |    0     |  @0
   7206   |          |  M=M+1
   7207   |    2     |  @2
   7208   |          |  D=M
   7209   |    0     |  @0
   7210   |          |  A=M
   7211   |          |  M=D
   7212   |    0     |  @0
   7213   |          |  M=M+1
   7214   |    3     |  @3
   7215   |          |  D=M
   7216   |    0     |  @0
   7217   |          |  A=M
   7218   |          |  M=D
   7219   |    0     |  @0
   7220   |          |  M=M+1
   7221   |    4     |  @4
   7222   |          |  D=M
   7223   |    0     |  @0
   7224   |          |  A=M
   7225   |          |  M=D
   7226   |    0     |  @0
   7227   |          |  M=M+1
   7228   |    0     |  @0
   7229   |          |  D=M
   7230   |    2     |  @2
   7231   |          |  M=D
   7232   |    9     |  @9
   7233   |          |  D=A
   7234   |    2     |  @2
   7235   |          |  M=M-D
   7236   |    0     |  @0
   7237   |          |  D=M
   7238   |    1     |  @1
   7239   |          |  M=D
   7240   | RAM[20]  |  @Screen.drawRectangle
   7241   |          |  0;JMP
   7242   |ROM[7241] |  (Screen.drawRectangle$ret.44)
          |          |        // pop temp 0
   7242   |    0     |  @0
   7243   |          |  D=A
   7244   |    5     |  @5
   7245   |          |  D=D+A
   7246   | RAM[13]  |  @R13
   7247   |          |  M=D
   7248   |    0     |  @0
   7249   |          |  AM=M-1
   7250   |          |  D=M
   7251   | RAM[13]  |  @R13
   7252   |          |  A=M
   7253   |          |  M=D
          |          |        // goto Bat.move_TRUE_0
   7254   |RAM[7829] |  @Bat.move_TRUE_0
   7255   |          |  0;JMP
          |          |        // label Bat.move_FALSE_0
   7256   |ROM[7255] |  (Bat.move_FALSE_0)
          |          |        // push this 0
   7256   |    0     |  @0
   7257   |          |  D=A
   7258   |    3     |  @3
   7259   |          |  A=M
   7260   |          |  A=A+D
   7261   |          |  D=M
   7262   |    0     |  @0
   7263   |          |  A=M
   7264   |          |  M=D
   7265   |    0     |  @0
   7266   |          |  M=M+1
          |          |        // push constant 4
   7267   |    4     |  @4
   7268   |          |  D=A
   7269   |    0     |  @0
   7270   |          |  A=M
   7271   |          |  M=D
   7272   |    0     |  @0
   7273   |          |  M=M+1
          |          |        // add
   7274   |    0     |  @0
   7275   |          |  AM=M-1
   7276   |          |  D=M
   7277   |          |  A=A-1
   7278   |          |  M=M+D
          |          |        // pop this 0
   7279   |    0     |  @0
   7280   |          |  D=A
   7281   |    3     |  @3
   7282   |          |  D=D+M
   7283   | RAM[13]  |  @R13
   7284   |          |  M=D
   7285   |    0     |  @0
   7286   |          |  AM=M-1
   7287   |          |  D=M
   7288   | RAM[13]  |  @R13
   7289   |          |  A=M
   7290   |          |  M=D
          |          |        // push this 0
   7291   |    0     |  @0
   7292   |          |  D=A
   7293   |    3     |  @3
   7294   |          |  A=M
   7295   |          |  A=A+D
   7296   |          |  D=M
   7297   |    0     |  @0
   7298   |          |  A=M
   7299   |          |  M=D
   7300   |    0     |  @0
   7301   |          |  M=M+1
          |          |        // push this 2
   7302   |    2     |  @2
   7303   |          |  D=A
   7304   |    3     |  @3
   7305   |          |  A=M
   7306   |          |  A=A+D
   7307   |          |  D=M
   7308   |    0     |  @0
   7309   |          |  A=M
   7310   |          |  M=D
   7311   |    0     |  @0
   7312   |          |  M=M+1
          |          |        // add
   7313   |    0     |  @0
   7314   |          |  AM=M-1
   7315   |          |  D=M
   7316   |          |  A=A-1
   7317   |          |  M=M+D
          |          |        // push constant 511
   7318   |   511    |  @511
   7319   |          |  D=A
   7320   |    0     |  @0
   7321   |          |  A=M
   7322   |          |  M=D
   7323   |    0     |  @0
   7324   |          |  M=M+1
          |          |        // gt
   7325   |    0     |  @0
   7326   |          |  AM=M-1
   7327   |          |  D=M
   7328   |          |  A=A-1
   7329   |          |  D=M-D
   7330   |          |  M=-1
   7331   |RAM[7335] |  @T20
   7332   |          |  D;JGT
   7333   |    0     |  @0
   7334   |          |  A=M-1
   7335   |          |  M=0
   7336   |ROM[7335] |  (T20)
          |          |        // not
   7336   |    0     |  @0
   7337   |          |  A=M-1
   7338   |          |  M=!M
          |          |        // if-goto Bat.move_FALSE_2
   7339   |    0     |  @0
   7340   |          |  AM=M-1
   7341   |          |  D=M
   7342   |RAM[7380] |  @Bat.move_FALSE_2
   7343   |          |  D;JNE
          |          |        // push constant 511
   7344   |   511    |  @511
   7345   |          |  D=A
   7346   |    0     |  @0
   7347   |          |  A=M
   7348   |          |  M=D
   7349   |    0     |  @0
   7350   |          |  M=M+1
          |          |        // push this 2
   7351   |    2     |  @2
   7352   |          |  D=A
   7353   |    3     |  @3
   7354   |          |  A=M
   7355   |          |  A=A+D
   7356   |          |  D=M
   7357   |    0     |  @0
   7358   |          |  A=M
   7359   |          |  M=D
   7360   |    0     |  @0
   7361   |          |  M=M+1
          |          |        // sub
   7362   |    0     |  @0
   7363   |          |  AM=M-1
   7364   |          |  D=M
   7365   |          |  A=A-1
   7366   |          |  M=M-D
          |          |        // pop this 0
   7367   |    0     |  @0
   7368   |          |  D=A
   7369   |    3     |  @3
   7370   |          |  D=D+M
   7371   | RAM[13]  |  @R13
   7372   |          |  M=D
   7373   |    0     |  @0
   7374   |          |  AM=M-1
   7375   |          |  D=M
   7376   | RAM[13]  |  @R13
   7377   |          |  A=M
   7378   |          |  M=D
          |          |        // goto Bat.move_TRUE_2
   7379   |RAM[7380] |  @Bat.move_TRUE_2
   7380   |          |  0;JMP
          |          |        // label Bat.move_FALSE_2
   7381   |ROM[7380] |  (Bat.move_FALSE_2)
          |          |        // label Bat.move_TRUE_2
   7381   |ROM[7380] |  (Bat.move_TRUE_2)
          |          |        // push constant 0
   7381   |    0     |  @0
   7382   |          |  D=A
   7383   |    0     |  @0
   7384   |          |  A=M
   7385   |          |  M=D
   7386   |    0     |  @0
   7387   |          |  M=M+1
          |          |        // call Screen.setColor 1
   7388   |RAM[7436] |  @Screen.setColor$ret.45
   7389   |          |  D=A
   7390   |    0     |  @0
   7391   |          |  A=M
   7392   |          |  M=D
   7393   |    0     |  @0
   7394   |          |  M=M+1
   7395   |    1     |  @1
   7396   |          |  D=M
   7397   |    0     |  @0
   7398   |          |  A=M
   7399   |          |  M=D
   7400   |    0     |  @0
   7401   |          |  M=M+1
   7402   |    2     |  @2
   7403   |          |  D=M
   7404   |    0     |  @0
   7405   |          |  A=M
   7406   |          |  M=D
   7407   |    0     |  @0
   7408   |          |  M=M+1
   7409   |    3     |  @3
   7410   |          |  D=M
   7411   |    0     |  @0
   7412   |          |  A=M
   7413   |          |  M=D
   7414   |    0     |  @0
   7415   |          |  M=M+1
   7416   |    4     |  @4
   7417   |          |  D=M
   7418   |    0     |  @0
   7419   |          |  A=M
   7420   |          |  M=D
   7421   |    0     |  @0
   7422   |          |  M=M+1
   7423   |    0     |  @0
   7424   |          |  D=M
   7425   |    2     |  @2
   7426   |          |  M=D
   7427   |    6     |  @6
   7428   |          |  D=A
   7429   |    2     |  @2
   7430   |          |  M=M-D
   7431   |    0     |  @0
   7432   |          |  D=M
   7433   |    1     |  @1
   7434   |          |  M=D
   7435   | RAM[19]  |  @Screen.setColor
   7436   |          |  0;JMP
   7437   |ROM[7436] |  (Screen.setColor$ret.45)
          |          |        // pop temp 0
   7437   |    0     |  @0
   7438   |          |  D=A
   7439   |    5     |  @5
   7440   |          |  D=D+A
   7441   | RAM[13]  |  @R13
   7442   |          |  M=D
   7443   |    0     |  @0
   7444   |          |  AM=M-1
   7445   |          |  D=M
   7446   | RAM[13]  |  @R13
   7447   |          |  A=M
   7448   |          |  M=D
          |          |        // push this 0
   7449   |    0     |  @0
   7450   |          |  D=A
   7451   |    3     |  @3
   7452   |          |  A=M
   7453   |          |  A=A+D
   7454   |          |  D=M
   7455   |    0     |  @0
   7456   |          |  A=M
   7457   |          |  M=D
   7458   |    0     |  @0
   7459   |          |  M=M+1
          |          |        // push constant 4
   7460   |    4     |  @4
   7461   |          |  D=A
   7462   |    0     |  @0
   7463   |          |  A=M
   7464   |          |  M=D
   7465   |    0     |  @0
   7466   |          |  M=M+1
          |          |        // sub
   7467   |    0     |  @0
   7468   |          |  AM=M-1
   7469   |          |  D=M
   7470   |          |  A=A-1
   7471   |          |  M=M-D
          |          |        // push this 1
   7472   |    1     |  @1
   7473   |          |  D=A
   7474   |    3     |  @3
   7475   |          |  A=M
   7476   |          |  A=A+D
   7477   |          |  D=M
   7478   |    0     |  @0
   7479   |          |  A=M
   7480   |          |  M=D
   7481   |    0     |  @0
   7482   |          |  M=M+1
          |          |        // push this 0
   7483   |    0     |  @0
   7484   |          |  D=A
   7485   |    3     |  @3
   7486   |          |  A=M
   7487   |          |  A=A+D
   7488   |          |  D=M
   7489   |    0     |  @0
   7490   |          |  A=M
   7491   |          |  M=D
   7492   |    0     |  @0
   7493   |          |  M=M+1
          |          |        // push constant 1
   7494   |    1     |  @1
   7495   |          |  D=A
   7496   |    0     |  @0
   7497   |          |  A=M
   7498   |          |  M=D
   7499   |    0     |  @0
   7500   |          |  M=M+1
          |          |        // sub
   7501   |    0     |  @0
   7502   |          |  AM=M-1
   7503   |          |  D=M
   7504   |          |  A=A-1
   7505   |          |  M=M-D
          |          |        // push this 1
   7506   |    1     |  @1
   7507   |          |  D=A
   7508   |    3     |  @3
   7509   |          |  A=M
   7510   |          |  A=A+D
   7511   |          |  D=M
   7512   |    0     |  @0
   7513   |          |  A=M
   7514   |          |  M=D
   7515   |    0     |  @0
   7516   |          |  M=M+1
          |          |        // push this 3
   7517   |    3     |  @3
   7518   |          |  D=A
   7519   |    3     |  @3
   7520   |          |  A=M
   7521   |          |  A=A+D
   7522   |          |  D=M
   7523   |    0     |  @0
   7524   |          |  A=M
   7525   |          |  M=D
   7526   |    0     |  @0
   7527   |          |  M=M+1
          |          |        // add
   7528   |    0     |  @0
   7529   |          |  AM=M-1
   7530   |          |  D=M
   7531   |          |  A=A-1
   7532   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   7533   |RAM[7581] |  @Screen.drawRectangle$ret.46
   7534   |          |  D=A
   7535   |    0     |  @0
   7536   |          |  A=M
   7537   |          |  M=D
   7538   |    0     |  @0
   7539   |          |  M=M+1
   7540   |    1     |  @1
   7541   |          |  D=M
   7542   |    0     |  @0
   7543   |          |  A=M
   7544   |          |  M=D
   7545   |    0     |  @0
   7546   |          |  M=M+1
   7547   |    2     |  @2
   7548   |          |  D=M
   7549   |    0     |  @0
   7550   |          |  A=M
   7551   |          |  M=D
   7552   |    0     |  @0
   7553   |          |  M=M+1
   7554   |    3     |  @3
   7555   |          |  D=M
   7556   |    0     |  @0
   7557   |          |  A=M
   7558   |          |  M=D
   7559   |    0     |  @0
   7560   |          |  M=M+1
   7561   |    4     |  @4
   7562   |          |  D=M
   7563   |    0     |  @0
   7564   |          |  A=M
   7565   |          |  M=D
   7566   |    0     |  @0
   7567   |          |  M=M+1
   7568   |    0     |  @0
   7569   |          |  D=M
   7570   |    2     |  @2
   7571   |          |  M=D
   7572   |    9     |  @9
   7573   |          |  D=A
   7574   |    2     |  @2
   7575   |          |  M=M-D
   7576   |    0     |  @0
   7577   |          |  D=M
   7578   |    1     |  @1
   7579   |          |  M=D
   7580   | RAM[20]  |  @Screen.drawRectangle
   7581   |          |  0;JMP
   7582   |ROM[7581] |  (Screen.drawRectangle$ret.46)
          |          |        // pop temp 0
   7582   |    0     |  @0
   7583   |          |  D=A
   7584   |    5     |  @5
   7585   |          |  D=D+A
   7586   | RAM[13]  |  @R13
   7587   |          |  M=D
   7588   |    0     |  @0
   7589   |          |  AM=M-1
   7590   |          |  D=M
   7591   | RAM[13]  |  @R13
   7592   |          |  A=M
   7593   |          |  M=D
          |          |        // push constant 1
   7594   |    1     |  @1
   7595   |          |  D=A
   7596   |    0     |  @0
   7597   |          |  A=M
   7598   |          |  M=D
   7599   |    0     |  @0
   7600   |          |  M=M+1
          |          |        // neg
   7601   |    0     |  @0
   7602   |          |  A=M-1
   7603   |          |  M=-M
          |          |        // call Screen.setColor 1
   7604   |RAM[7652] |  @Screen.setColor$ret.47
   7605   |          |  D=A
   7606   |    0     |  @0
   7607   |          |  A=M
   7608   |          |  M=D
   7609   |    0     |  @0
   7610   |          |  M=M+1
   7611   |    1     |  @1
   7612   |          |  D=M
   7613   |    0     |  @0
   7614   |          |  A=M
   7615   |          |  M=D
   7616   |    0     |  @0
   7617   |          |  M=M+1
   7618   |    2     |  @2
   7619   |          |  D=M
   7620   |    0     |  @0
   7621   |          |  A=M
   7622   |          |  M=D
   7623   |    0     |  @0
   7624   |          |  M=M+1
   7625   |    3     |  @3
   7626   |          |  D=M
   7627   |    0     |  @0
   7628   |          |  A=M
   7629   |          |  M=D
   7630   |    0     |  @0
   7631   |          |  M=M+1
   7632   |    4     |  @4
   7633   |          |  D=M
   7634   |    0     |  @0
   7635   |          |  A=M
   7636   |          |  M=D
   7637   |    0     |  @0
   7638   |          |  M=M+1
   7639   |    0     |  @0
   7640   |          |  D=M
   7641   |    2     |  @2
   7642   |          |  M=D
   7643   |    6     |  @6
   7644   |          |  D=A
   7645   |    2     |  @2
   7646   |          |  M=M-D
   7647   |    0     |  @0
   7648   |          |  D=M
   7649   |    1     |  @1
   7650   |          |  M=D
   7651   | RAM[19]  |  @Screen.setColor
   7652   |          |  0;JMP
   7653   |ROM[7652] |  (Screen.setColor$ret.47)
          |          |        // pop temp 0
   7653   |    0     |  @0
   7654   |          |  D=A
   7655   |    5     |  @5
   7656   |          |  D=D+A
   7657   | RAM[13]  |  @R13
   7658   |          |  M=D
   7659   |    0     |  @0
   7660   |          |  AM=M-1
   7661   |          |  D=M
   7662   | RAM[13]  |  @R13
   7663   |          |  A=M
   7664   |          |  M=D
          |          |        // push this 0
   7665   |    0     |  @0
   7666   |          |  D=A
   7667   |    3     |  @3
   7668   |          |  A=M
   7669   |          |  A=A+D
   7670   |          |  D=M
   7671   |    0     |  @0
   7672   |          |  A=M
   7673   |          |  M=D
   7674   |    0     |  @0
   7675   |          |  M=M+1
          |          |        // push this 2
   7676   |    2     |  @2
   7677   |          |  D=A
   7678   |    3     |  @3
   7679   |          |  A=M
   7680   |          |  A=A+D
   7681   |          |  D=M
   7682   |    0     |  @0
   7683   |          |  A=M
   7684   |          |  M=D
   7685   |    0     |  @0
   7686   |          |  M=M+1
          |          |        // add
   7687   |    0     |  @0
   7688   |          |  AM=M-1
   7689   |          |  D=M
   7690   |          |  A=A-1
   7691   |          |  M=M+D
          |          |        // push constant 3
   7692   |    3     |  @3
   7693   |          |  D=A
   7694   |    0     |  @0
   7695   |          |  A=M
   7696   |          |  M=D
   7697   |    0     |  @0
   7698   |          |  M=M+1
          |          |        // sub
   7699   |    0     |  @0
   7700   |          |  AM=M-1
   7701   |          |  D=M
   7702   |          |  A=A-1
   7703   |          |  M=M-D
          |          |        // push this 1
   7704   |    1     |  @1
   7705   |          |  D=A
   7706   |    3     |  @3
   7707   |          |  A=M
   7708   |          |  A=A+D
   7709   |          |  D=M
   7710   |    0     |  @0
   7711   |          |  A=M
   7712   |          |  M=D
   7713   |    0     |  @0
   7714   |          |  M=M+1
          |          |        // push this 0
   7715   |    0     |  @0
   7716   |          |  D=A
   7717   |    3     |  @3
   7718   |          |  A=M
   7719   |          |  A=A+D
   7720   |          |  D=M
   7721   |    0     |  @0
   7722   |          |  A=M
   7723   |          |  M=D
   7724   |    0     |  @0
   7725   |          |  M=M+1
          |          |        // push this 2
   7726   |    2     |  @2
   7727   |          |  D=A
   7728   |    3     |  @3
   7729   |          |  A=M
   7730   |          |  A=A+D
   7731   |          |  D=M
   7732   |    0     |  @0
   7733   |          |  A=M
   7734   |          |  M=D
   7735   |    0     |  @0
   7736   |          |  M=M+1
          |          |        // add
   7737   |    0     |  @0
   7738   |          |  AM=M-1
   7739   |          |  D=M
   7740   |          |  A=A-1
   7741   |          |  M=M+D
          |          |        // push this 1
   7742   |    1     |  @1
   7743   |          |  D=A
   7744   |    3     |  @3
   7745   |          |  A=M
   7746   |          |  A=A+D
   7747   |          |  D=M
   7748   |    0     |  @0
   7749   |          |  A=M
   7750   |          |  M=D
   7751   |    0     |  @0
   7752   |          |  M=M+1
          |          |        // push this 3
   7753   |    3     |  @3
   7754   |          |  D=A
   7755   |    3     |  @3
   7756   |          |  A=M
   7757   |          |  A=A+D
   7758   |          |  D=M
   7759   |    0     |  @0
   7760   |          |  A=M
   7761   |          |  M=D
   7762   |    0     |  @0
   7763   |          |  M=M+1
          |          |        // add
   7764   |    0     |  @0
   7765   |          |  AM=M-1
   7766   |          |  D=M
   7767   |          |  A=A-1
   7768   |          |  M=M+D
          |          |        // call Screen.drawRectangle 4
   7769   |RAM[7817] |  @Screen.drawRectangle$ret.48
   7770   |          |  D=A
   7771   |    0     |  @0
   7772   |          |  A=M
   7773   |          |  M=D
   7774   |    0     |  @0
   7775   |          |  M=M+1
   7776   |    1     |  @1
   7777   |          |  D=M
   7778   |    0     |  @0
   7779   |          |  A=M
   7780   |          |  M=D
   7781   |    0     |  @0
   7782   |          |  M=M+1
   7783   |    2     |  @2
   7784   |          |  D=M
   7785   |    0     |  @0
   7786   |          |  A=M
   7787   |          |  M=D
   7788   |    0     |  @0
   7789   |          |  M=M+1
   7790   |    3     |  @3
   7791   |          |  D=M
   7792   |    0     |  @0
   7793   |          |  A=M
   7794   |          |  M=D
   7795   |    0     |  @0
   7796   |          |  M=M+1
   7797   |    4     |  @4
   7798   |          |  D=M
   7799   |    0     |  @0
   7800   |          |  A=M
   7801   |          |  M=D
   7802   |    0     |  @0
   7803   |          |  M=M+1
   7804   |    0     |  @0
   7805   |          |  D=M
   7806   |    2     |  @2
   7807   |          |  M=D
   7808   |    9     |  @9
   7809   |          |  D=A
   7810   |    2     |  @2
   7811   |          |  M=M-D
   7812   |    0     |  @0
   7813   |          |  D=M
   7814   |    1     |  @1
   7815   |          |  M=D
   7816   | RAM[20]  |  @Screen.drawRectangle
   7817   |          |  0;JMP
   7818   |ROM[7817] |  (Screen.drawRectangle$ret.48)
          |          |        // pop temp 0
   7818   |    0     |  @0
   7819   |          |  D=A
   7820   |    5     |  @5
   7821   |          |  D=D+A
   7822   | RAM[13]  |  @R13
   7823   |          |  M=D
   7824   |    0     |  @0
   7825   |          |  AM=M-1
   7826   |          |  D=M
   7827   | RAM[13]  |  @R13
   7828   |          |  A=M
   7829   |          |  M=D
          |          |        // label Bat.move_TRUE_0
   7830   |ROM[7829] |  (Bat.move_TRUE_0)
          |          |        // push constant 0
   7830   |    0     |  @0
   7831   |          |  D=A
   7832   |    0     |  @0
   7833   |          |  A=M
   7834   |          |  M=D
   7835   |    0     |  @0
   7836   |          |  M=M+1
          |          |  
          |          |  
          |          |  
          |          |  
          |          |  
          |          |        // /**
          |          |        // * The main class of the Pong game.
          |          |        // *//** Initializes a Pong game and starts running it. *//*
          |          |        // */
          |          |        // 
          |          |        // function Main.main 1
   7837   |ROM[7836] |  (Main.main)
   7837   |    0     |  @0
   7838   |          |  D=M
   7839   |    1     |  @1
   7840   |          |  M=D
   7841   |    0     |  @0
   7842   |          |  A=M
   7843   |          |  M=0
   7844   |    0     |  @0
   7845   |          |  M=M+1
          |          |        // /*
          |          |        // VAR    PongGame game -> local    0
          |          |        // */
          |          |        // call PongGame.newInstance 0
   7846   |RAM[7894] |  @PongGame.newInstance$ret.49
   7847   |          |  D=A
   7848   |    0     |  @0
   7849   |          |  A=M
   7850   |          |  M=D
   7851   |    0     |  @0
   7852   |          |  M=M+1
   7853   |    1     |  @1
   7854   |          |  D=M
   7855   |    0     |  @0
   7856   |          |  A=M
   7857   |          |  M=D
   7858   |    0     |  @0
   7859   |          |  M=M+1
   7860   |    2     |  @2
   7861   |          |  D=M
   7862   |    0     |  @0
   7863   |          |  A=M
   7864   |          |  M=D
   7865   |    0     |  @0
   7866   |          |  M=M+1
   7867   |    3     |  @3
   7868   |          |  D=M
   7869   |    0     |  @0
   7870   |          |  A=M
   7871   |          |  M=D
   7872   |    0     |  @0
   7873   |          |  M=M+1
   7874   |    4     |  @4
   7875   |          |  D=M
   7876   |    0     |  @0
   7877   |          |  A=M
   7878   |          |  M=D
   7879   |    0     |  @0
   7880   |          |  M=M+1
   7881   |    0     |  @0
   7882   |          |  D=M
   7883   |    2     |  @2
   7884   |          |  M=D
   7885   |    5     |  @5
   7886   |          |  D=A
   7887   |    2     |  @2
   7888   |          |  M=M-D
   7889   |    0     |  @0
   7890   |          |  D=M
   7891   |    1     |  @1
   7892   |          |  M=D
   7893   |RAM[9694] |  @PongGame.newInstance
   7894   |          |  0;JMP
   7895   |ROM[7894] |  (PongGame.newInstance$ret.49)
          |          |        // pop temp 0
   7895   |    0     |  @0
   7896   |          |  D=A
   7897   |    5     |  @5
   7898   |          |  D=D+A
   7899   | RAM[13]  |  @R13
   7900   |          |  M=D
   7901   |    0     |  @0
   7902   |          |  AM=M-1
   7903   |          |  D=M
   7904   | RAM[13]  |  @R13
   7905   |          |  A=M
   7906   |          |  M=D
          |          |        // call PongGame.getInstance 0
   7907   |RAM[7955] |  @PongGame.getInstance$ret.50
   7908   |          |  D=A
   7909   |    0     |  @0
   7910   |          |  A=M
   7911   |          |  M=D
   7912   |    0     |  @0
   7913   |          |  M=M+1
   7914   |    1     |  @1
   7915   |          |  D=M
   7916   |    0     |  @0
   7917   |          |  A=M
   7918   |          |  M=D
   7919   |    0     |  @0
   7920   |          |  M=M+1
   7921   |    2     |  @2
   7922   |          |  D=M
   7923   |    0     |  @0
   7924   |          |  A=M
   7925   |          |  M=D
   7926   |    0     |  @0
   7927   |          |  M=M+1
   7928   |    3     |  @3
   7929   |          |  D=M
   7930   |    0     |  @0
   7931   |          |  A=M
   7932   |          |  M=D
   7933   |    0     |  @0
   7934   |          |  M=M+1
   7935   |    4     |  @4
   7936   |          |  D=M
   7937   |    0     |  @0
   7938   |          |  A=M
   7939   |          |  M=D
   7940   |    0     |  @0
   7941   |          |  M=M+1
   7942   |    0     |  @0
   7943   |          |  D=M
   7944   |    2     |  @2
   7945   |          |  M=D
   7946   |    5     |  @5
   7947   |          |  D=A
   7948   |    2     |  @2
   7949   |          |  M=M-D
   7950   |    0     |  @0
   7951   |          |  D=M
   7952   |    1     |  @1
   7953   |          |  M=D
   7954   |RAM[9808] |  @PongGame.getInstance
   7955   |          |  0;JMP
   7956   |ROM[7955] |  (PongGame.getInstance$ret.50)
          |          |        // pop local 0
   7956   |    0     |  @0
   7957   |          |  D=A
   7958   |    1     |  @1
   7959   |          |  D=D+M
   7960   | RAM[13]  |  @R13
   7961   |          |  M=D
   7962   |    0     |  @0
   7963   |          |  AM=M-1
   7964   |          |  D=M
   7965   | RAM[13]  |  @R13
   7966   |          |  A=M
   7967   |          |  M=D
          |          |        // push local 0
   7968   |    0     |  @0
   7969   |          |  D=A
   7970   |    1     |  @1
   7971   |          |  A=M
   7972   |          |  A=A+D
   7973   |          |  D=M
   7974   |    0     |  @0
   7975   |          |  A=M
   7976   |          |  M=D
   7977   |    0     |  @0
   7978   |          |  M=M+1
          |          |        // call PongGame.run 1
   7979   |RAM[8027] |  @PongGame.run$ret.51
   7980   |          |  D=A
   7981   |    0     |  @0
   7982   |          |  A=M
   7983   |          |  M=D
   7984   |    0     |  @0
   7985   |          |  M=M+1
   7986   |    1     |  @1
   7987   |          |  D=M
   7988   |    0     |  @0
   7989   |          |  A=M
   7990   |          |  M=D
   7991   |    0     |  @0
   7992   |          |  M=M+1
   7993   |    2     |  @2
   7994   |          |  D=M
   7995   |    0     |  @0
   7996   |          |  A=M
   7997   |          |  M=D
   7998   |    0     |  @0
   7999   |          |  M=M+1
   8000   |    3     |  @3
   8001   |          |  D=M
   8002   |    0     |  @0
   8003   |          |  A=M
   8004   |          |  M=D
   8005   |    0     |  @0
   8006   |          |  M=M+1
   8007   |    4     |  @4
   8008   |          |  D=M
   8009   |    0     |  @0
   8010   |          |  A=M
   8011   |          |  M=D
   8012   |    0     |  @0
   8013   |          |  M=M+1
   8014   |    0     |  @0
   8015   |          |  D=M
   8016   |    2     |  @2
   8017   |          |  M=D
   8018   |    6     |  @6
   8019   |          |  D=A
   8020   |    2     |  @2
   8021   |          |  M=M-D
   8022   |    0     |  @0
   8023   |          |  D=M
   8024   |    1     |  @1
   8025   |          |  M=D
   8026   |RAM[9868] |  @PongGame.run
   8027   |          |  0;JMP
   8028   |ROM[8027] |  (PongGame.run$ret.51)
          |          |        // pop temp 0
   8028   |    0     |  @0
   8029   |          |  D=A
   8030   |    5     |  @5
   8031   |          |  D=D+A
   8032   | RAM[13]  |  @R13
   8033   |          |  M=D
   8034   |    0     |  @0
   8035   |          |  AM=M-1
   8036   |          |  D=M
   8037   | RAM[13]  |  @R13
   8038   |          |  A=M
   8039   |          |  M=D
          |          |        // push local 0
   8040   |    0     |  @0
   8041   |          |  D=A
   8042   |    1     |  @1
   8043   |          |  A=M
   8044   |          |  A=A+D
   8045   |          |  D=M
   8046   |    0     |  @0
   8047   |          |  A=M
   8048   |          |  M=D
   8049   |    0     |  @0
   8050   |          |  M=M+1
          |          |        // call PongGame.dispose 1
   8051   |RAM[8099] |  @PongGame.dispose$ret.52
   8052   |          |  D=A
   8053   |    0     |  @0
   8054   |          |  A=M
   8055   |          |  M=D
   8056   |    0     |  @0
   8057   |          |  M=M+1
   8058   |    1     |  @1
   8059   |          |  D=M
   8060   |    0     |  @0
   8061   |          |  A=M
   8062   |          |  M=D
   8063   |    0     |  @0
   8064   |          |  M=M+1
   8065   |    2     |  @2
   8066   |          |  D=M
   8067   |    0     |  @0
   8068   |          |  A=M
   8069   |          |  M=D
   8070   |    0     |  @0
   8071   |          |  M=M+1
   8072   |    3     |  @3
   8073   |          |  D=M
   8074   |    0     |  @0
   8075   |          |  A=M
   8076   |          |  M=D
   8077   |    0     |  @0
   8078   |          |  M=M+1
   8079   |    4     |  @4
   8080   |          |  D=M
   8081   |    0     |  @0
   8082   |          |  A=M
   8083   |          |  M=D
   8084   |    0     |  @0
   8085   |          |  M=M+1
   8086   |    0     |  @0
   8087   |          |  D=M
   8088   |    2     |  @2
   8089   |          |  M=D
   8090   |    6     |  @6
   8091   |          |  D=A
   8092   |    2     |  @2
   8093   |          |  M=M-D
   8094   |    0     |  @0
   8095   |          |  D=M
   8096   |    1     |  @1
   8097   |          |  M=D
   8098   |RAM[9406] |  @PongGame.dispose
   8099   |          |  0;JMP
   8100   |ROM[8099] |  (PongGame.dispose$ret.52)
          |          |        // pop temp 0
   8100   |    0     |  @0
   8101   |          |  D=A
   8102   |    5     |  @5
   8103   |          |  D=D+A
   8104   | RAM[13]  |  @R13
   8105   |          |  M=D
   8106   |    0     |  @0
   8107   |          |  AM=M-1
   8108   |          |  D=M
   8109   | RAM[13]  |  @R13
   8110   |          |  A=M
   8111   |          |  M=D
          |          |        // push constant 0
   8112   |    0     |  @0
   8113   |          |  D=A
   8114   |    0     |  @0
   8115   |          |  A=M
   8116   |          |  M=D
   8117   |    0     |  @0
   8118   |          |  M=M+1
          |          |  
          |          |  
          |          |  
          |          |  
          |          |  
          |          |        // /**
          |          |        // * Represents a Pong game.
          |          |        // *//** Constructs a new Pong game. *//*
          |          |        // STATIC PongGame instance -> static   0
          |          |        // FIELD  Bat      bat      -> this     0
          |          |        // FIELD  Ball     ball     -> this     1
          |          |        // FIELD  int      wall     -> this     2
          |          |        // FIELD  boolean  exit     -> this     3
          |          |        // FIELD  int      score    -> this     4
          |          |        // FIELD  int      lastWall -> this     5
          |          |        // FIELD  int      batWidth -> this     6
          |          |        // */
          |          |        // 
          |          |        // function PongGame.new 0
   8119   |ROM[8118] |  (PongGame.new)
   8119   |    0     |  @0
   8120   |          |  D=M
   8121   |    1     |  @1
   8122   |          |  M=D
          |          |        // /*
          |          |        // */
          |          |        // push constant 7
   8123   |    7     |  @7
   8124   |          |  D=A
   8125   |    0     |  @0
   8126   |          |  A=M
   8127   |          |  M=D
   8128   |    0     |  @0
   8129   |          |  M=M+1
          |          |        // call Memory.alloc 1
   8130   |RAM[8178] |  @Memory.alloc$ret.53
   8131   |          |  D=A
   8132   |    0     |  @0
   8133   |          |  A=M
   8134   |          |  M=D
   8135   |    0     |  @0
   8136   |          |  M=M+1
   8137   |    1     |  @1
   8138   |          |  D=M
   8139   |    0     |  @0
   8140   |          |  A=M
   8141   |          |  M=D
   8142   |    0     |  @0
   8143   |          |  M=M+1
   8144   |    2     |  @2
   8145   |          |  D=M
   8146   |    0     |  @0
   8147   |          |  A=M
   8148   |          |  M=D
   8149   |    0     |  @0
   8150   |          |  M=M+1
   8151   |    3     |  @3
   8152   |          |  D=M
   8153   |    0     |  @0
   8154   |          |  A=M
   8155   |          |  M=D
   8156   |    0     |  @0
   8157   |          |  M=M+1
   8158   |    4     |  @4
   8159   |          |  D=M
   8160   |    0     |  @0
   8161   |          |  A=M
   8162   |          |  M=D
   8163   |    0     |  @0
   8164   |          |  M=M+1
   8165   |    0     |  @0
   8166   |          |  D=M
   8167   |    2     |  @2
   8168   |          |  M=D
   8169   |    6     |  @6
   8170   |          |  D=A
   8171   |    2     |  @2
   8172   |          |  M=M-D
   8173   |    0     |  @0
   8174   |          |  D=M
   8175   |    1     |  @1
   8176   |          |  M=D
   8177   | RAM[17]  |  @Memory.alloc
   8178   |          |  0;JMP
   8179   |ROM[8178] |  (Memory.alloc$ret.53)
          |          |        // pop pointer 0
   8179   |    0     |  @0
   8180   |          |  AM=M-1
   8181   |          |  D=M
   8182   |    3     |  @3
   8183   |          |  M=D
          |          |        // call Screen.clearScreen 0
   8184   |RAM[8232] |  @Screen.clearScreen$ret.54
   8185   |          |  D=A
   8186   |    0     |  @0
   8187   |          |  A=M
   8188   |          |  M=D
   8189   |    0     |  @0
   8190   |          |  M=M+1
   8191   |    1     |  @1
   8192   |          |  D=M
   8193   |    0     |  @0
   8194   |          |  A=M
   8195   |          |  M=D
   8196   |    0     |  @0
   8197   |          |  M=M+1
   8198   |    2     |  @2
   8199   |          |  D=M
   8200   |    0     |  @0
   8201   |          |  A=M
   8202   |          |  M=D
   8203   |    0     |  @0
   8204   |          |  M=M+1
   8205   |    3     |  @3
   8206   |          |  D=M
   8207   |    0     |  @0
   8208   |          |  A=M
   8209   |          |  M=D
   8210   |    0     |  @0
   8211   |          |  M=M+1
   8212   |    4     |  @4
   8213   |          |  D=M
   8214   |    0     |  @0
   8215   |          |  A=M
   8216   |          |  M=D
   8217   |    0     |  @0
   8218   |          |  M=M+1
   8219   |    0     |  @0
   8220   |          |  D=M
   8221   |    2     |  @2
   8222   |          |  M=D
   8223   |    5     |  @5
   8224   |          |  D=A
   8225   |    2     |  @2
   8226   |          |  M=M-D
   8227   |    0     |  @0
   8228   |          |  D=M
   8229   |    1     |  @1
   8230   |          |  M=D
   8231   | RAM[24]  |  @Screen.clearScreen
   8232   |          |  0;JMP
   8233   |ROM[8232] |  (Screen.clearScreen$ret.54)
          |          |        // pop temp 0
   8233   |    0     |  @0
   8234   |          |  D=A
   8235   |    5     |  @5
   8236   |          |  D=D+A
   8237   | RAM[13]  |  @R13
   8238   |          |  M=D
   8239   |    0     |  @0
   8240   |          |  AM=M-1
   8241   |          |  D=M
   8242   | RAM[13]  |  @R13
   8243   |          |  A=M
   8244   |          |  M=D
          |          |        // push constant 50
   8245   |    50    |  @50
   8246   |          |  D=A
   8247   |    0     |  @0
   8248   |          |  A=M
   8249   |          |  M=D
   8250   |    0     |  @0
   8251   |          |  M=M+1
          |          |        // pop this 6
   8252   |    6     |  @6
   8253   |          |  D=A
   8254   |    3     |  @3
   8255   |          |  D=D+M
   8256   | RAM[13]  |  @R13
   8257   |          |  M=D
   8258   |    0     |  @0
   8259   |          |  AM=M-1
   8260   |          |  D=M
   8261   | RAM[13]  |  @R13
   8262   |          |  A=M
   8263   |          |  M=D
          |          |        // push constant 230
   8264   |   230    |  @230
   8265   |          |  D=A
   8266   |    0     |  @0
   8267   |          |  A=M
   8268   |          |  M=D
   8269   |    0     |  @0
   8270   |          |  M=M+1
          |          |        // push constant 229
   8271   |   229    |  @229
   8272   |          |  D=A
   8273   |    0     |  @0
   8274   |          |  A=M
   8275   |          |  M=D
   8276   |    0     |  @0
   8277   |          |  M=M+1
          |          |        // push this 6
   8278   |    6     |  @6
   8279   |          |  D=A
   8280   |    3     |  @3
   8281   |          |  A=M
   8282   |          |  A=A+D
   8283   |          |  D=M
   8284   |    0     |  @0
   8285   |          |  A=M
   8286   |          |  M=D
   8287   |    0     |  @0
   8288   |          |  M=M+1
          |          |        // push constant 7
   8289   |    7     |  @7
   8290   |          |  D=A
   8291   |    0     |  @0
   8292   |          |  A=M
   8293   |          |  M=D
   8294   |    0     |  @0
   8295   |          |  M=M+1
          |          |        // call Bat.new 4
   8296   |RAM[8344] |  @Bat.new$ret.55
   8297   |          |  D=A
   8298   |    0     |  @0
   8299   |          |  A=M
   8300   |          |  M=D
   8301   |    0     |  @0
   8302   |          |  M=M+1
   8303   |    1     |  @1
   8304   |          |  D=M
   8305   |    0     |  @0
   8306   |          |  A=M
   8307   |          |  M=D
   8308   |    0     |  @0
   8309   |          |  M=M+1
   8310   |    2     |  @2
   8311   |          |  D=M
   8312   |    0     |  @0
   8313   |          |  A=M
   8314   |          |  M=D
   8315   |    0     |  @0
   8316   |          |  M=M+1
   8317   |    3     |  @3
   8318   |          |  D=M
   8319   |    0     |  @0
   8320   |          |  A=M
   8321   |          |  M=D
   8322   |    0     |  @0
   8323   |          |  M=M+1
   8324   |    4     |  @4
   8325   |          |  D=M
   8326   |    0     |  @0
   8327   |          |  A=M
   8328   |          |  M=D
   8329   |    0     |  @0
   8330   |          |  M=M+1
   8331   |    0     |  @0
   8332   |          |  D=M
   8333   |    2     |  @2
   8334   |          |  M=D
   8335   |    9     |  @9
   8336   |          |  D=A
   8337   |    2     |  @2
   8338   |          |  M=M-D
   8339   |    0     |  @0
   8340   |          |  D=M
   8341   |    1     |  @1
   8342   |          |  M=D
   8343   |RAM[5060] |  @Bat.new
   8344   |          |  0;JMP
   8345   |ROM[8344] |  (Bat.new$ret.55)
          |          |        // pop this 0
   8345   |    0     |  @0
   8346   |          |  D=A
   8347   |    3     |  @3
   8348   |          |  D=D+M
   8349   | RAM[13]  |  @R13
   8350   |          |  M=D
   8351   |    0     |  @0
   8352   |          |  AM=M-1
   8353   |          |  D=M
   8354   | RAM[13]  |  @R13
   8355   |          |  A=M
   8356   |          |  M=D
          |          |        // push constant 253
   8357   |   253    |  @253
   8358   |          |  D=A
   8359   |    0     |  @0
   8360   |          |  A=M
   8361   |          |  M=D
   8362   |    0     |  @0
   8363   |          |  M=M+1
          |          |        // push constant 222
   8364   |   222    |  @222
   8365   |          |  D=A
   8366   |    0     |  @0
   8367   |          |  A=M
   8368   |          |  M=D
   8369   |    0     |  @0
   8370   |          |  M=M+1
          |          |        // push constant 0
   8371   |    0     |  @0
   8372   |          |  D=A
   8373   |    0     |  @0
   8374   |          |  A=M
   8375   |          |  M=D
   8376   |    0     |  @0
   8377   |          |  M=M+1
          |          |        // push constant 511
   8378   |   511    |  @511
   8379   |          |  D=A
   8380   |    0     |  @0
   8381   |          |  A=M
   8382   |          |  M=D
   8383   |    0     |  @0
   8384   |          |  M=M+1
          |          |        // push constant 0
   8385   |    0     |  @0
   8386   |          |  D=A
   8387   |    0     |  @0
   8388   |          |  A=M
   8389   |          |  M=D
   8390   |    0     |  @0
   8391   |          |  M=M+1
          |          |        // push constant 229
   8392   |   229    |  @229
   8393   |          |  D=A
   8394   |    0     |  @0
   8395   |          |  A=M
   8396   |          |  M=D
   8397   |    0     |  @0
   8398   |          |  M=M+1
          |          |        // call Ball.new 6
   8399   |RAM[8447] |  @Ball.new$ret.56
   8400   |          |  D=A
   8401   |    0     |  @0
   8402   |          |  A=M
   8403   |          |  M=D
   8404   |    0     |  @0
   8405   |          |  M=M+1
   8406   |    1     |  @1
   8407   |          |  D=M
   8408   |    0     |  @0
   8409   |          |  A=M
   8410   |          |  M=D
   8411   |    0     |  @0
   8412   |          |  M=M+1
   8413   |    2     |  @2
   8414   |          |  D=M
   8415   |    0     |  @0
   8416   |          |  A=M
   8417   |          |  M=D
   8418   |    0     |  @0
   8419   |          |  M=M+1
   8420   |    3     |  @3
   8421   |          |  D=M
   8422   |    0     |  @0
   8423   |          |  A=M
   8424   |          |  M=D
   8425   |    0     |  @0
   8426   |          |  M=M+1
   8427   |    4     |  @4
   8428   |          |  D=M
   8429   |    0     |  @0
   8430   |          |  A=M
   8431   |          |  M=D
   8432   |    0     |  @0
   8433   |          |  M=M+1
   8434   |    0     |  @0
   8435   |          |  D=M
   8436   |    2     |  @2
   8437   |          |  M=D
   8438   |    11    |  @11
   8439   |          |  D=A
   8440   |    2     |  @2
   8441   |          |  M=M-D
   8442   |    0     |  @0
   8443   |          |  D=M
   8444   |    1     |  @1
   8445   |          |  M=D
   8446   | RAM[60]  |  @Ball.new
   8447   |          |  0;JMP
   8448   |ROM[8447] |  (Ball.new$ret.56)
          |          |        // pop this 1
   8448   |    1     |  @1
   8449   |          |  D=A
   8450   |    3     |  @3
   8451   |          |  D=D+M
   8452   | RAM[13]  |  @R13
   8453   |          |  M=D
   8454   |    0     |  @0
   8455   |          |  AM=M-1
   8456   |          |  D=M
   8457   | RAM[13]  |  @R13
   8458   |          |  A=M
   8459   |          |  M=D
          |          |        // push this 1
   8460   |    1     |  @1
   8461   |          |  D=A
   8462   |    3     |  @3
   8463   |          |  A=M
   8464   |          |  A=A+D
   8465   |          |  D=M
   8466   |    0     |  @0
   8467   |          |  A=M
   8468   |          |  M=D
   8469   |    0     |  @0
   8470   |          |  M=M+1
          |          |        // push constant 400
   8471   |   400    |  @400
   8472   |          |  D=A
   8473   |    0     |  @0
   8474   |          |  A=M
   8475   |          |  M=D
   8476   |    0     |  @0
   8477   |          |  M=M+1
          |          |        // push constant 0
   8478   |    0     |  @0
   8479   |          |  D=A
   8480   |    0     |  @0
   8481   |          |  A=M
   8482   |          |  M=D
   8483   |    0     |  @0
   8484   |          |  M=M+1
          |          |        // call Ball.setDestination 3
   8485   |RAM[8533] |  @Ball.setDestination$ret.57
   8486   |          |  D=A
   8487   |    0     |  @0
   8488   |          |  A=M
   8489   |          |  M=D
   8490   |    0     |  @0
   8491   |          |  M=M+1
   8492   |    1     |  @1
   8493   |          |  D=M
   8494   |    0     |  @0
   8495   |          |  A=M
   8496   |          |  M=D
   8497   |    0     |  @0
   8498   |          |  M=M+1
   8499   |    2     |  @2
   8500   |          |  D=M
   8501   |    0     |  @0
   8502   |          |  A=M
   8503   |          |  M=D
   8504   |    0     |  @0
   8505   |          |  M=M+1
   8506   |    3     |  @3
   8507   |          |  D=M
   8508   |    0     |  @0
   8509   |          |  A=M
   8510   |          |  M=D
   8511   |    0     |  @0
   8512   |          |  M=M+1
   8513   |    4     |  @4
   8514   |          |  D=M
   8515   |    0     |  @0
   8516   |          |  A=M
   8517   |          |  M=D
   8518   |    0     |  @0
   8519   |          |  M=M+1
   8520   |    0     |  @0
   8521   |          |  D=M
   8522   |    2     |  @2
   8523   |          |  M=D
   8524   |    8     |  @8
   8525   |          |  D=A
   8526   |    2     |  @2
   8527   |          |  M=M-D
   8528   |    0     |  @0
   8529   |          |  D=M
   8530   |    1     |  @1
   8531   |          |  M=D
   8532   |RAM[1378] |  @Ball.setDestination
   8533   |          |  0;JMP
   8534   |ROM[8533] |  (Ball.setDestination$ret.57)
          |          |        // pop temp 0
   8534   |    0     |  @0
   8535   |          |  D=A
   8536   |    5     |  @5
   8537   |          |  D=D+A
   8538   | RAM[13]  |  @R13
   8539   |          |  M=D
   8540   |    0     |  @0
   8541   |          |  AM=M-1
   8542   |          |  D=M
   8543   | RAM[13]  |  @R13
   8544   |          |  A=M
   8545   |          |  M=D
          |          |        // push constant 0
   8546   |    0     |  @0
   8547   |          |  D=A
   8548   |    0     |  @0
   8549   |          |  A=M
   8550   |          |  M=D
   8551   |    0     |  @0
   8552   |          |  M=M+1
          |          |        // push constant 238
   8553   |   238    |  @238
   8554   |          |  D=A
   8555   |    0     |  @0
   8556   |          |  A=M
   8557   |          |  M=D
   8558   |    0     |  @0
   8559   |          |  M=M+1
          |          |        // push constant 511
   8560   |   511    |  @511
   8561   |          |  D=A
   8562   |    0     |  @0
   8563   |          |  A=M
   8564   |          |  M=D
   8565   |    0     |  @0
   8566   |          |  M=M+1
          |          |        // push constant 240
   8567   |   240    |  @240
   8568   |          |  D=A
   8569   |    0     |  @0
   8570   |          |  A=M
   8571   |          |  M=D
   8572   |    0     |  @0
   8573   |          |  M=M+1
          |          |        // call Screen.drawRectangle 4
   8574   |RAM[8622] |  @Screen.drawRectangle$ret.58
   8575   |          |  D=A
   8576   |    0     |  @0
   8577   |          |  A=M
   8578   |          |  M=D
   8579   |    0     |  @0
   8580   |          |  M=M+1
   8581   |    1     |  @1
   8582   |          |  D=M
   8583   |    0     |  @0
   8584   |          |  A=M
   8585   |          |  M=D
   8586   |    0     |  @0
   8587   |          |  M=M+1
   8588   |    2     |  @2
   8589   |          |  D=M
   8590   |    0     |  @0
   8591   |          |  A=M
   8592   |          |  M=D
   8593   |    0     |  @0
   8594   |          |  M=M+1
   8595   |    3     |  @3
   8596   |          |  D=M
   8597   |    0     |  @0
   8598   |          |  A=M
   8599   |          |  M=D
   8600   |    0     |  @0
   8601   |          |  M=M+1
   8602   |    4     |  @4
   8603   |          |  D=M
   8604   |    0     |  @0
   8605   |          |  A=M
   8606   |          |  M=D
   8607   |    0     |  @0
   8608   |          |  M=M+1
   8609   |    0     |  @0
   8610   |          |  D=M
   8611   |    2     |  @2
   8612   |          |  M=D
   8613   |    9     |  @9
   8614   |          |  D=A
   8615   |    2     |  @2
   8616   |          |  M=M-D
   8617   |    0     |  @0
   8618   |          |  D=M
   8619   |    1     |  @1
   8620   |          |  M=D
   8621   | RAM[20]  |  @Screen.drawRectangle
   8622   |          |  0;JMP
   8623   |ROM[8622] |  (Screen.drawRectangle$ret.58)
          |          |        // pop temp 0
   8623   |    0     |  @0
   8624   |          |  D=A
   8625   |    5     |  @5
   8626   |          |  D=D+A
   8627   | RAM[13]  |  @R13
   8628   |          |  M=D
   8629   |    0     |  @0
   8630   |          |  AM=M-1
   8631   |          |  D=M
   8632   | RAM[13]  |  @R13
   8633   |          |  A=M
   8634   |          |  M=D
          |          |        // push constant 22
   8635   |    22    |  @22
   8636   |          |  D=A
   8637   |    0     |  @0
   8638   |          |  A=M
   8639   |          |  M=D
   8640   |    0     |  @0
   8641   |          |  M=M+1
          |          |        // push constant 0
   8642   |    0     |  @0
   8643   |          |  D=A
   8644   |    0     |  @0
   8645   |          |  A=M
   8646   |          |  M=D
   8647   |    0     |  @0
   8648   |          |  M=M+1
          |          |        // call Output.moveCursor 2
   8649   |RAM[8697] |  @Output.moveCursor$ret.59
   8650   |          |  D=A
   8651   |    0     |  @0
   8652   |          |  A=M
   8653   |          |  M=D
   8654   |    0     |  @0
   8655   |          |  M=M+1
   8656   |    1     |  @1
   8657   |          |  D=M
   8658   |    0     |  @0
   8659   |          |  A=M
   8660   |          |  M=D
   8661   |    0     |  @0
   8662   |          |  M=M+1
   8663   |    2     |  @2
   8664   |          |  D=M
   8665   |    0     |  @0
   8666   |          |  A=M
   8667   |          |  M=D
   8668   |    0     |  @0
   8669   |          |  M=M+1
   8670   |    3     |  @3
   8671   |          |  D=M
   8672   |    0     |  @0
   8673   |          |  A=M
   8674   |          |  M=D
   8675   |    0     |  @0
   8676   |          |  M=M+1
   8677   |    4     |  @4
   8678   |          |  D=M
   8679   |    0     |  @0
   8680   |          |  A=M
   8681   |          |  M=D
   8682   |    0     |  @0
   8683   |          |  M=M+1
   8684   |    0     |  @0
   8685   |          |  D=M
   8686   |    2     |  @2
   8687   |          |  M=D
   8688   |    7     |  @7
   8689   |          |  D=A
   8690   |    2     |  @2
   8691   |          |  M=M-D
   8692   |    0     |  @0
   8693   |          |  D=M
   8694   |    1     |  @1
   8695   |          |  M=D
   8696   | RAM[25]  |  @Output.moveCursor
   8697   |          |  0;JMP
   8698   |ROM[8697] |  (Output.moveCursor$ret.59)
          |          |        // pop temp 0
   8698   |    0     |  @0
   8699   |          |  D=A
   8700   |    5     |  @5
   8701   |          |  D=D+A
   8702   | RAM[13]  |  @R13
   8703   |          |  M=D
   8704   |    0     |  @0
   8705   |          |  AM=M-1
   8706   |          |  D=M
   8707   | RAM[13]  |  @R13
   8708   |          |  A=M
   8709   |          |  M=D
          |          |        // push constant 8
   8710   |    8     |  @8
   8711   |          |  D=A
   8712   |    0     |  @0
   8713   |          |  A=M
   8714   |          |  M=D
   8715   |    0     |  @0
   8716   |          |  M=M+1
          |          |        // call String.new 1
   8717   |RAM[8765] |  @String.new$ret.60
   8718   |          |  D=A
   8719   |    0     |  @0
   8720   |          |  A=M
   8721   |          |  M=D
   8722   |    0     |  @0
   8723   |          |  M=M+1
   8724   |    1     |  @1
   8725   |          |  D=M
   8726   |    0     |  @0
   8727   |          |  A=M
   8728   |          |  M=D
   8729   |    0     |  @0
   8730   |          |  M=M+1
   8731   |    2     |  @2
   8732   |          |  D=M
   8733   |    0     |  @0
   8734   |          |  A=M
   8735   |          |  M=D
   8736   |    0     |  @0
   8737   |          |  M=M+1
   8738   |    3     |  @3
   8739   |          |  D=M
   8740   |    0     |  @0
   8741   |          |  A=M
   8742   |          |  M=D
   8743   |    0     |  @0
   8744   |          |  M=M+1
   8745   |    4     |  @4
   8746   |          |  D=M
   8747   |    0     |  @0
   8748   |          |  A=M
   8749   |          |  M=D
   8750   |    0     |  @0
   8751   |          |  M=M+1
   8752   |    0     |  @0
   8753   |          |  D=M
   8754   |    2     |  @2
   8755   |          |  M=D
   8756   |    6     |  @6
   8757   |          |  D=A
   8758   |    2     |  @2
   8759   |          |  M=M-D
   8760   |    0     |  @0
   8761   |          |  D=M
   8762   |    1     |  @1
   8763   |          |  M=D
   8764   | RAM[26]  |  @String.new
   8765   |          |  0;JMP
   8766   |ROM[8765] |  (String.new$ret.60)
          |          |        // push constant 83
   8766   |    83    |  @83
   8767   |          |  D=A
   8768   |    0     |  @0
   8769   |          |  A=M
   8770   |          |  M=D
   8771   |    0     |  @0
   8772   |          |  M=M+1
          |          |        // call String.appendChar 2
   8773   |RAM[8821] |  @String.appendChar$ret.61
   8774   |          |  D=A
   8775   |    0     |  @0
   8776   |          |  A=M
   8777   |          |  M=D
   8778   |    0     |  @0
   8779   |          |  M=M+1
   8780   |    1     |  @1
   8781   |          |  D=M
   8782   |    0     |  @0
   8783   |          |  A=M
   8784   |          |  M=D
   8785   |    0     |  @0
   8786   |          |  M=M+1
   8787   |    2     |  @2
   8788   |          |  D=M
   8789   |    0     |  @0
   8790   |          |  A=M
   8791   |          |  M=D
   8792   |    0     |  @0
   8793   |          |  M=M+1
   8794   |    3     |  @3
   8795   |          |  D=M
   8796   |    0     |  @0
   8797   |          |  A=M
   8798   |          |  M=D
   8799   |    0     |  @0
   8800   |          |  M=M+1
   8801   |    4     |  @4
   8802   |          |  D=M
   8803   |    0     |  @0
   8804   |          |  A=M
   8805   |          |  M=D
   8806   |    0     |  @0
   8807   |          |  M=M+1
   8808   |    0     |  @0
   8809   |          |  D=M
   8810   |    2     |  @2
   8811   |          |  M=D
   8812   |    7     |  @7
   8813   |          |  D=A
   8814   |    2     |  @2
   8815   |          |  M=M-D
   8816   |    0     |  @0
   8817   |          |  D=M
   8818   |    1     |  @1
   8819   |          |  M=D
   8820   | RAM[27]  |  @String.appendChar
   8821   |          |  0;JMP
   8822   |ROM[8821] |  (String.appendChar$ret.61)
          |          |        // push constant 99
   8822   |    99    |  @99
   8823   |          |  D=A
   8824   |    0     |  @0
   8825   |          |  A=M
   8826   |          |  M=D
   8827   |    0     |  @0
   8828   |          |  M=M+1
          |          |        // call String.appendChar 2
   8829   |RAM[8877] |  @String.appendChar$ret.62
   8830   |          |  D=A
   8831   |    0     |  @0
   8832   |          |  A=M
   8833   |          |  M=D
   8834   |    0     |  @0
   8835   |          |  M=M+1
   8836   |    1     |  @1
   8837   |          |  D=M
   8838   |    0     |  @0
   8839   |          |  A=M
   8840   |          |  M=D
   8841   |    0     |  @0
   8842   |          |  M=M+1
   8843   |    2     |  @2
   8844   |          |  D=M
   8845   |    0     |  @0
   8846   |          |  A=M
   8847   |          |  M=D
   8848   |    0     |  @0
   8849   |          |  M=M+1
   8850   |    3     |  @3
   8851   |          |  D=M
   8852   |    0     |  @0
   8853   |          |  A=M
   8854   |          |  M=D
   8855   |    0     |  @0
   8856   |          |  M=M+1
   8857   |    4     |  @4
   8858   |          |  D=M
   8859   |    0     |  @0
   8860   |          |  A=M
   8861   |          |  M=D
   8862   |    0     |  @0
   8863   |          |  M=M+1
   8864   |    0     |  @0
   8865   |          |  D=M
   8866   |    2     |  @2
   8867   |          |  M=D
   8868   |    7     |  @7
   8869   |          |  D=A
   8870   |    2     |  @2
   8871   |          |  M=M-D
   8872   |    0     |  @0
   8873   |          |  D=M
   8874   |    1     |  @1
   8875   |          |  M=D
   8876   | RAM[27]  |  @String.appendChar
   8877   |          |  0;JMP
   8878   |ROM[8877] |  (String.appendChar$ret.62)
          |          |        // push constant 111
   8878   |   111    |  @111
   8879   |          |  D=A
   8880   |    0     |  @0
   8881   |          |  A=M
   8882   |          |  M=D
   8883   |    0     |  @0
   8884   |          |  M=M+1
          |          |        // call String.appendChar 2
   8885   |RAM[8933] |  @String.appendChar$ret.63
   8886   |          |  D=A
   8887   |    0     |  @0
   8888   |          |  A=M
   8889   |          |  M=D
   8890   |    0     |  @0
   8891   |          |  M=M+1
   8892   |    1     |  @1
   8893   |          |  D=M
   8894   |    0     |  @0
   8895   |          |  A=M
   8896   |          |  M=D
   8897   |    0     |  @0
   8898   |          |  M=M+1
   8899   |    2     |  @2
   8900   |          |  D=M
   8901   |    0     |  @0
   8902   |          |  A=M
   8903   |          |  M=D
   8904   |    0     |  @0
   8905   |          |  M=M+1
   8906   |    3     |  @3
   8907   |          |  D=M
   8908   |    0     |  @0
   8909   |          |  A=M
   8910   |          |  M=D
   8911   |    0     |  @0
   8912   |          |  M=M+1
   8913   |    4     |  @4
   8914   |          |  D=M
   8915   |    0     |  @0
   8916   |          |  A=M
   8917   |          |  M=D
   8918   |    0     |  @0
   8919   |          |  M=M+1
   8920   |    0     |  @0
   8921   |          |  D=M
   8922   |    2     |  @2
   8923   |          |  M=D
   8924   |    7     |  @7
   8925   |          |  D=A
   8926   |    2     |  @2
   8927   |          |  M=M-D
   8928   |    0     |  @0
   8929   |          |  D=M
   8930   |    1     |  @1
   8931   |          |  M=D
   8932   | RAM[27]  |  @String.appendChar
   8933   |          |  0;JMP
   8934   |ROM[8933] |  (String.appendChar$ret.63)
          |          |        // push constant 114
   8934   |   114    |  @114
   8935   |          |  D=A
   8936   |    0     |  @0
   8937   |          |  A=M
   8938   |          |  M=D
   8939   |    0     |  @0
   8940   |          |  M=M+1
          |          |        // call String.appendChar 2
   8941   |RAM[8989] |  @String.appendChar$ret.64
   8942   |          |  D=A
   8943   |    0     |  @0
   8944   |          |  A=M
   8945   |          |  M=D
   8946   |    0     |  @0
   8947   |          |  M=M+1
   8948   |    1     |  @1
   8949   |          |  D=M
   8950   |    0     |  @0
   8951   |          |  A=M
   8952   |          |  M=D
   8953   |    0     |  @0
   8954   |          |  M=M+1
   8955   |    2     |  @2
   8956   |          |  D=M
   8957   |    0     |  @0
   8958   |          |  A=M
   8959   |          |  M=D
   8960   |    0     |  @0
   8961   |          |  M=M+1
   8962   |    3     |  @3
   8963   |          |  D=M
   8964   |    0     |  @0
   8965   |          |  A=M
   8966   |          |  M=D
   8967   |    0     |  @0
   8968   |          |  M=M+1
   8969   |    4     |  @4
   8970   |          |  D=M
   8971   |    0     |  @0
   8972   |          |  A=M
   8973   |          |  M=D
   8974   |    0     |  @0
   8975   |          |  M=M+1
   8976   |    0     |  @0
   8977   |          |  D=M
   8978   |    2     |  @2
   8979   |          |  M=D
   8980   |    7     |  @7
   8981   |          |  D=A
   8982   |    2     |  @2
   8983   |          |  M=M-D
   8984   |    0     |  @0
   8985   |          |  D=M
   8986   |    1     |  @1
   8987   |          |  M=D
   8988   | RAM[27]  |  @String.appendChar
   8989   |          |  0;JMP
   8990   |ROM[8989] |  (String.appendChar$ret.64)
          |          |        // push constant 101
   8990   |   101    |  @101
   8991   |          |  D=A
   8992   |    0     |  @0
   8993   |          |  A=M
   8994   |          |  M=D
   8995   |    0     |  @0
   8996   |          |  M=M+1
          |          |        // call String.appendChar 2
   8997   |RAM[9045] |  @String.appendChar$ret.65
   8998   |          |  D=A
   8999   |    0     |  @0
   9000   |          |  A=M
   9001   |          |  M=D
   9002   |    0     |  @0
   9003   |          |  M=M+1
   9004   |    1     |  @1
   9005   |          |  D=M
   9006   |    0     |  @0
   9007   |          |  A=M
   9008   |          |  M=D
   9009   |    0     |  @0
   9010   |          |  M=M+1
   9011   |    2     |  @2
   9012   |          |  D=M
   9013   |    0     |  @0
   9014   |          |  A=M
   9015   |          |  M=D
   9016   |    0     |  @0
   9017   |          |  M=M+1
   9018   |    3     |  @3
   9019   |          |  D=M
   9020   |    0     |  @0
   9021   |          |  A=M
   9022   |          |  M=D
   9023   |    0     |  @0
   9024   |          |  M=M+1
   9025   |    4     |  @4
   9026   |          |  D=M
   9027   |    0     |  @0
   9028   |          |  A=M
   9029   |          |  M=D
   9030   |    0     |  @0
   9031   |          |  M=M+1
   9032   |    0     |  @0
   9033   |          |  D=M
   9034   |    2     |  @2
   9035   |          |  M=D
   9036   |    7     |  @7
   9037   |          |  D=A
   9038   |    2     |  @2
   9039   |          |  M=M-D
   9040   |    0     |  @0
   9041   |          |  D=M
   9042   |    1     |  @1
   9043   |          |  M=D
   9044   | RAM[27]  |  @String.appendChar
   9045   |          |  0;JMP
   9046   |ROM[9045] |  (String.appendChar$ret.65)
          |          |        // push constant 58
   9046   |    58    |  @58
   9047   |          |  D=A
   9048   |    0     |  @0
   9049   |          |  A=M
   9050   |          |  M=D
   9051   |    0     |  @0
   9052   |          |  M=M+1
          |          |        // call String.appendChar 2
   9053   |RAM[9101] |  @String.appendChar$ret.66
   9054   |          |  D=A
   9055   |    0     |  @0
   9056   |          |  A=M
   9057   |          |  M=D
   9058   |    0     |  @0
   9059   |          |  M=M+1
   9060   |    1     |  @1
   9061   |          |  D=M
   9062   |    0     |  @0
   9063   |          |  A=M
   9064   |          |  M=D
   9065   |    0     |  @0
   9066   |          |  M=M+1
   9067   |    2     |  @2
   9068   |          |  D=M
   9069   |    0     |  @0
   9070   |          |  A=M
   9071   |          |  M=D
   9072   |    0     |  @0
   9073   |          |  M=M+1
   9074   |    3     |  @3
   9075   |          |  D=M
   9076   |    0     |  @0
   9077   |          |  A=M
   9078   |          |  M=D
   9079   |    0     |  @0
   9080   |          |  M=M+1
   9081   |    4     |  @4
   9082   |          |  D=M
   9083   |    0     |  @0
   9084   |          |  A=M
   9085   |          |  M=D
   9086   |    0     |  @0
   9087   |          |  M=M+1
   9088   |    0     |  @0
   9089   |          |  D=M
   9090   |    2     |  @2
   9091   |          |  M=D
   9092   |    7     |  @7
   9093   |          |  D=A
   9094   |    2     |  @2
   9095   |          |  M=M-D
   9096   |    0     |  @0
   9097   |          |  D=M
   9098   |    1     |  @1
   9099   |          |  M=D
   9100   | RAM[27]  |  @String.appendChar
   9101   |          |  0;JMP
   9102   |ROM[9101] |  (String.appendChar$ret.66)
          |          |        // push constant 32
   9102   |    32    |  @32
   9103   |          |  D=A
   9104   |    0     |  @0
   9105   |          |  A=M
   9106   |          |  M=D
   9107   |    0     |  @0
   9108   |          |  M=M+1
          |          |        // call String.appendChar 2
   9109   |RAM[9157] |  @String.appendChar$ret.67
   9110   |          |  D=A
   9111   |    0     |  @0
   9112   |          |  A=M
   9113   |          |  M=D
   9114   |    0     |  @0
   9115   |          |  M=M+1
   9116   |    1     |  @1
   9117   |          |  D=M
   9118   |    0     |  @0
   9119   |          |  A=M
   9120   |          |  M=D
   9121   |    0     |  @0
   9122   |          |  M=M+1
   9123   |    2     |  @2
   9124   |          |  D=M
   9125   |    0     |  @0
   9126   |          |  A=M
   9127   |          |  M=D
   9128   |    0     |  @0
   9129   |          |  M=M+1
   9130   |    3     |  @3
   9131   |          |  D=M
   9132   |    0     |  @0
   9133   |          |  A=M
   9134   |          |  M=D
   9135   |    0     |  @0
   9136   |          |  M=M+1
   9137   |    4     |  @4
   9138   |          |  D=M
   9139   |    0     |  @0
   9140   |          |  A=M
   9141   |          |  M=D
   9142   |    0     |  @0
   9143   |          |  M=M+1
   9144   |    0     |  @0
   9145   |          |  D=M
   9146   |    2     |  @2
   9147   |          |  M=D
   9148   |    7     |  @7
   9149   |          |  D=A
   9150   |    2     |  @2
   9151   |          |  M=M-D
   9152   |    0     |  @0
   9153   |          |  D=M
   9154   |    1     |  @1
   9155   |          |  M=D
   9156   | RAM[27]  |  @String.appendChar
   9157   |          |  0;JMP
   9158   |ROM[9157] |  (String.appendChar$ret.67)
          |          |        // push constant 48
   9158   |    48    |  @48
   9159   |          |  D=A
   9160   |    0     |  @0
   9161   |          |  A=M
   9162   |          |  M=D
   9163   |    0     |  @0
   9164   |          |  M=M+1
          |          |        // call String.appendChar 2
   9165   |RAM[9213] |  @String.appendChar$ret.68
   9166   |          |  D=A
   9167   |    0     |  @0
   9168   |          |  A=M
   9169   |          |  M=D
   9170   |    0     |  @0
   9171   |          |  M=M+1
   9172   |    1     |  @1
   9173   |          |  D=M
   9174   |    0     |  @0
   9175   |          |  A=M
   9176   |          |  M=D
   9177   |    0     |  @0
   9178   |          |  M=M+1
   9179   |    2     |  @2
   9180   |          |  D=M
   9181   |    0     |  @0
   9182   |          |  A=M
   9183   |          |  M=D
   9184   |    0     |  @0
   9185   |          |  M=M+1
   9186   |    3     |  @3
   9187   |          |  D=M
   9188   |    0     |  @0
   9189   |          |  A=M
   9190   |          |  M=D
   9191   |    0     |  @0
   9192   |          |  M=M+1
   9193   |    4     |  @4
   9194   |          |  D=M
   9195   |    0     |  @0
   9196   |          |  A=M
   9197   |          |  M=D
   9198   |    0     |  @0
   9199   |          |  M=M+1
   9200   |    0     |  @0
   9201   |          |  D=M
   9202   |    2     |  @2
   9203   |          |  M=D
   9204   |    7     |  @7
   9205   |          |  D=A
   9206   |    2     |  @2
   9207   |          |  M=M-D
   9208   |    0     |  @0
   9209   |          |  D=M
   9210   |    1     |  @1
   9211   |          |  M=D
   9212   | RAM[27]  |  @String.appendChar
   9213   |          |  0;JMP
   9214   |ROM[9213] |  (String.appendChar$ret.68)
          |          |        // call Output.printString 1
   9214   |RAM[9262] |  @Output.printString$ret.69
   9215   |          |  D=A
   9216   |    0     |  @0
   9217   |          |  A=M
   9218   |          |  M=D
   9219   |    0     |  @0
   9220   |          |  M=M+1
   9221   |    1     |  @1
   9222   |          |  D=M
   9223   |    0     |  @0
   9224   |          |  A=M
   9225   |          |  M=D
   9226   |    0     |  @0
   9227   |          |  M=M+1
   9228   |    2     |  @2
   9229   |          |  D=M
   9230   |    0     |  @0
   9231   |          |  A=M
   9232   |          |  M=D
   9233   |    0     |  @0
   9234   |          |  M=M+1
   9235   |    3     |  @3
   9236   |          |  D=M
   9237   |    0     |  @0
   9238   |          |  A=M
   9239   |          |  M=D
   9240   |    0     |  @0
   9241   |          |  M=M+1
   9242   |    4     |  @4
   9243   |          |  D=M
   9244   |    0     |  @0
   9245   |          |  A=M
   9246   |          |  M=D
   9247   |    0     |  @0
   9248   |          |  M=M+1
   9249   |    0     |  @0
   9250   |          |  D=M
   9251   |    2     |  @2
   9252   |          |  M=D
   9253   |    6     |  @6
   9254   |          |  D=A
   9255   |    2     |  @2
   9256   |          |  M=M-D
   9257   |    0     |  @0
   9258   |          |  D=M
   9259   |    1     |  @1
   9260   |          |  M=D
   9261   | RAM[28]  |  @Output.printString
   9262   |          |  0;JMP
   9263   |ROM[9262] |  (Output.printString$ret.69)
          |          |        // pop temp 0
   9263   |    0     |  @0
   9264   |          |  D=A
   9265   |    5     |  @5
   9266   |          |  D=D+A
   9267   | RAM[13]  |  @R13
   9268   |          |  M=D
   9269   |    0     |  @0
   9270   |          |  AM=M-1
   9271   |          |  D=M
   9272   | RAM[13]  |  @R13
   9273   |          |  A=M
   9274   |          |  M=D
          |          |        // push constant 0
   9275   |    0     |  @0
   9276   |          |  D=A
   9277   |    0     |  @0
   9278   |          |  A=M
   9279   |          |  M=D
   9280   |    0     |  @0
   9281   |          |  M=M+1
          |          |        // pop this 3
   9282   |    3     |  @3
   9283   |          |  D=A
   9284   |    3     |  @3
   9285   |          |  D=D+M
   9286   | RAM[13]  |  @R13
   9287   |          |  M=D
   9288   |    0     |  @0
   9289   |          |  AM=M-1
   9290   |          |  D=M
   9291   | RAM[13]  |  @R13
   9292   |          |  A=M
   9293   |          |  M=D
          |          |        // push constant 0
   9294   |    0     |  @0
   9295   |          |  D=A
   9296   |    0     |  @0
   9297   |          |  A=M
   9298   |          |  M=D
   9299   |    0     |  @0
   9300   |          |  M=M+1
          |          |        // pop this 4
   9301   |    4     |  @4
   9302   |          |  D=A
   9303   |    3     |  @3
   9304   |          |  D=D+M
   9305   | RAM[13]  |  @R13
   9306   |          |  M=D
   9307   |    0     |  @0
   9308   |          |  AM=M-1
   9309   |          |  D=M
   9310   | RAM[13]  |  @R13
   9311   |          |  A=M
   9312   |          |  M=D
          |          |        // push constant 0
   9313   |    0     |  @0
   9314   |          |  D=A
   9315   |    0     |  @0
   9316   |          |  A=M
   9317   |          |  M=D
   9318   |    0     |  @0
   9319   |          |  M=M+1
          |          |        // pop this 2
   9320   |    2     |  @2
   9321   |          |  D=A
   9322   |    3     |  @3
   9323   |          |  D=D+M
   9324   | RAM[13]  |  @R13
   9325   |          |  M=D
   9326   |    0     |  @0
   9327   |          |  AM=M-1
   9328   |          |  D=M
   9329   | RAM[13]  |  @R13
   9330   |          |  A=M
   9331   |          |  M=D
          |          |        // push constant 0
   9332   |    0     |  @0
   9333   |          |  D=A
   9334   |    0     |  @0
   9335   |          |  A=M
   9336   |          |  M=D
   9337   |    0     |  @0
   9338   |          |  M=M+1
          |          |        // pop this 5
   9339   |    5     |  @5
   9340   |          |  D=A
   9341   |    3     |  @3
   9342   |          |  D=D+M
   9343   | RAM[13]  |  @R13
   9344   |          |  M=D
   9345   |    0     |  @0
   9346   |          |  AM=M-1
   9347   |          |  D=M
   9348   | RAM[13]  |  @R13
   9349   |          |  A=M
   9350   |          |  M=D
          |          |        // push pointer 0
   9351   |    3     |  @3
   9352   |          |  D=M
   9353   |    0     |  @0
   9354   |          |  A=M
   9355   |          |  M=D
   9356   |    0     |  @0
   9357   |          |  M=M+1
          |          |        // return
   9358   |    1     |  @1
   9359   |          |  D=M
   9360   |    13    |  @13
   9361   |          |  M=D
   9362   |    5     |  @5
   9363   |          |  D=A
   9364   |    13    |  @13
   9365   |          |  D=M-D
   9366   |          |  A=D
   9367   |          |  D=M
   9368   |    14    |  @14
   9369   |          |  M=D
   9370   |    0     |  @0
   9371   |          |  AM=M-1
   9372   |          |  D=M
   9373   |    2     |  @2
   9374   |          |  A=M
   9375   |          |  M=D
   9376   |    2     |  @2
   9377   |          |  D=M+1
   9378   |    0     |  @0
   9379   |          |  M=D
   9380   |    13    |  @13
   9381   |          |  M=M-1
   9382   |          |  A=M
   9383   |          |  D=M
   9384   |    4     |  @4
   9385   |          |  M=D
   9386   |    13    |  @13
   9387   |          |  M=M-1
   9388   |          |  A=M
   9389   |          |  D=M
   9390   |    3     |  @3
   9391   |          |  M=D
   9392   |    13    |  @13
   9393   |          |  M=M-1
   9394   |          |  A=M
   9395   |          |  D=M
   9396   |    2     |  @2
   9397   |          |  M=D
   9398   |    13    |  @13
   9399   |          |  M=M-1
   9400   |          |  A=M
   9401   |          |  D=M
   9402   |    1     |  @1
   9403   |          |  M=D
   9404   |    14    |  @14
   9405   |          |  A=M
   9406   |          |  0;JMP
          |          |        // /** Deallocates the object's memory. */
          |          |        // function PongGame.dispose 0
   9407   |ROM[9406] |  (PongGame.dispose)
   9407   |    0     |  @0
   9408   |          |  D=M
   9409   |    1     |  @1
   9410   |          |  M=D
          |          |        // /*
          |          |        // ARG    PongGame this -> argument 0
          |          |        // */
          |          |        // push argument 0
   9411   |    0     |  @0
   9412   |          |  D=A
   9413   |    2     |  @2
   9414   |          |  A=M
   9415   |          |  A=A+D
   9416   |          |  D=M
   9417   |    0     |  @0
   9418   |          |  A=M
   9419   |          |  M=D
   9420   |    0     |  @0
   9421   |          |  M=M+1
          |          |        // pop pointer 0
   9422   |    0     |  @0
   9423   |          |  AM=M-1
   9424   |          |  D=M
   9425   |    3     |  @3
   9426   |          |  M=D
          |          |        // push this 0
   9427   |    0     |  @0
   9428   |          |  D=A
   9429   |    3     |  @3
   9430   |          |  A=M
   9431   |          |  A=A+D
   9432   |          |  D=M
   9433   |    0     |  @0
   9434   |          |  A=M
   9435   |          |  M=D
   9436   |    0     |  @0
   9437   |          |  M=M+1
          |          |        // call Bat.dispose 1
   9438   |RAM[9486] |  @Bat.dispose$ret.70
   9439   |          |  D=A
   9440   |    0     |  @0
   9441   |          |  A=M
   9442   |          |  M=D
   9443   |    0     |  @0
   9444   |          |  M=M+1
   9445   |    1     |  @1
   9446   |          |  D=M
   9447   |    0     |  @0
   9448   |          |  A=M
   9449   |          |  M=D
   9450   |    0     |  @0
   9451   |          |  M=M+1
   9452   |    2     |  @2
   9453   |          |  D=M
   9454   |    0     |  @0
   9455   |          |  A=M
   9456   |          |  M=D
   9457   |    0     |  @0
   9458   |          |  M=M+1
   9459   |    3     |  @3
   9460   |          |  D=M
   9461   |    0     |  @0
   9462   |          |  A=M
   9463   |          |  M=D
   9464   |    0     |  @0
   9465   |          |  M=M+1
   9466   |    4     |  @4
   9467   |          |  D=M
   9468   |    0     |  @0
   9469   |          |  A=M
   9470   |          |  M=D
   9471   |    0     |  @0
   9472   |          |  M=M+1
   9473   |    0     |  @0
   9474   |          |  D=M
   9475   |    2     |  @2
   9476   |          |  M=D
   9477   |    6     |  @6
   9478   |          |  D=A
   9479   |    2     |  @2
   9480   |          |  M=M-D
   9481   |    0     |  @0
   9482   |          |  D=M
   9483   |    1     |  @1
   9484   |          |  M=D
   9485   |RAM[5360] |  @Bat.dispose
   9486   |          |  0;JMP
   9487   |ROM[9486] |  (Bat.dispose$ret.70)
          |          |        // pop temp 0
   9487   |    0     |  @0
   9488   |          |  D=A
   9489   |    5     |  @5
   9490   |          |  D=D+A
   9491   | RAM[13]  |  @R13
   9492   |          |  M=D
   9493   |    0     |  @0
   9494   |          |  AM=M-1
   9495   |          |  D=M
   9496   | RAM[13]  |  @R13
   9497   |          |  A=M
   9498   |          |  M=D
          |          |        // push this 1
   9499   |    1     |  @1
   9500   |          |  D=A
   9501   |    3     |  @3
   9502   |          |  A=M
   9503   |          |  A=A+D
   9504   |          |  D=M
   9505   |    0     |  @0
   9506   |          |  A=M
   9507   |          |  M=D
   9508   |    0     |  @0
   9509   |          |  M=M+1
          |          |        // call Ball.dispose 1
   9510   |RAM[9558] |  @Ball.dispose$ret.71
   9511   |          |  D=A
   9512   |    0     |  @0
   9513   |          |  A=M
   9514   |          |  M=D
   9515   |    0     |  @0
   9516   |          |  M=M+1
   9517   |    1     |  @1
   9518   |          |  D=M
   9519   |    0     |  @0
   9520   |          |  A=M
   9521   |          |  M=D
   9522   |    0     |  @0
   9523   |          |  M=M+1
   9524   |    2     |  @2
   9525   |          |  D=M
   9526   |    0     |  @0
   9527   |          |  A=M
   9528   |          |  M=D
   9529   |    0     |  @0
   9530   |          |  M=M+1
   9531   |    3     |  @3
   9532   |          |  D=M
   9533   |    0     |  @0
   9534   |          |  A=M
   9535   |          |  M=D
   9536   |    0     |  @0
   9537   |          |  M=M+1
   9538   |    4     |  @4
   9539   |          |  D=M
   9540   |    0     |  @0
   9541   |          |  A=M
   9542   |          |  M=D
   9543   |    0     |  @0
   9544   |          |  M=M+1
   9545   |    0     |  @0
   9546   |          |  D=M
   9547   |    2     |  @2
   9548   |          |  M=D
   9549   |    6     |  @6
   9550   |          |  D=A
   9551   |    2     |  @2
   9552   |          |  M=M-D
   9553   |    0     |  @0
   9554   |          |  D=M
   9555   |    1     |  @1
   9556   |          |  M=D
   9557   | RAM[430] |  @Ball.dispose
   9558   |          |  0;JMP
   9559   |ROM[9558] |  (Ball.dispose$ret.71)
          |          |        // pop temp 0
   9559   |    0     |  @0
   9560   |          |  D=A
   9561   |    5     |  @5
   9562   |          |  D=D+A
   9563   | RAM[13]  |  @R13
   9564   |          |  M=D
   9565   |    0     |  @0
   9566   |          |  AM=M-1
   9567   |          |  D=M
   9568   | RAM[13]  |  @R13
   9569   |          |  A=M
   9570   |          |  M=D
          |          |        // push pointer 0
   9571   |    3     |  @3
   9572   |          |  D=M
   9573   |    0     |  @0
   9574   |          |  A=M
   9575   |          |  M=D
   9576   |    0     |  @0
   9577   |          |  M=M+1
          |          |        // call Memory.deAlloc 1
   9578   |RAM[9626] |  @Memory.deAlloc$ret.72
   9579   |          |  D=A
   9580   |    0     |  @0
   9581   |          |  A=M
   9582   |          |  M=D
   9583   |    0     |  @0
   9584   |          |  M=M+1
   9585   |    1     |  @1
   9586   |          |  D=M
   9587   |    0     |  @0
   9588   |          |  A=M
   9589   |          |  M=D
   9590   |    0     |  @0
   9591   |          |  M=M+1
   9592   |    2     |  @2
   9593   |          |  D=M
   9594   |    0     |  @0
   9595   |          |  A=M
   9596   |          |  M=D
   9597   |    0     |  @0
   9598   |          |  M=M+1
   9599   |    3     |  @3
   9600   |          |  D=M
   9601   |    0     |  @0
   9602   |          |  A=M
   9603   |          |  M=D
   9604   |    0     |  @0
   9605   |          |  M=M+1
   9606   |    4     |  @4
   9607   |          |  D=M
   9608   |    0     |  @0
   9609   |          |  A=M
   9610   |          |  M=D
   9611   |    0     |  @0
   9612   |          |  M=M+1
   9613   |    0     |  @0
   9614   |          |  D=M
   9615   |    2     |  @2
   9616   |          |  M=D
   9617   |    6     |  @6
   9618   |          |  D=A
   9619   |    2     |  @2
   9620   |          |  M=M-D
   9621   |    0     |  @0
   9622   |          |  D=M
   9623   |    1     |  @1
   9624   |          |  M=D
   9625   | RAM[18]  |  @Memory.deAlloc
   9626   |          |  0;JMP
   9627   |ROM[9626] |  (Memory.deAlloc$ret.72)
          |          |        // pop temp 0
   9627   |    0     |  @0
   9628   |          |  D=A
   9629   |    5     |  @5
   9630   |          |  D=D+A
   9631   | RAM[13]  |  @R13
   9632   |          |  M=D
   9633   |    0     |  @0
   9634   |          |  AM=M-1
   9635   |          |  D=M
   9636   | RAM[13]  |  @R13
   9637   |          |  A=M
   9638   |          |  M=D
          |          |        // push constant 0
   9639   |    0     |  @0
   9640   |          |  D=A
   9641   |    0     |  @0
   9642   |          |  A=M
   9643   |          |  M=D
   9644   |    0     |  @0
   9645   |          |  M=M+1
          |          |        // return
   9646   |    1     |  @1
   9647   |          |  D=M
   9648   |    13    |  @13
   9649   |          |  M=D
   9650   |    5     |  @5
   9651   |          |  D=A
   9652   |    13    |  @13
   9653   |          |  D=M-D
   9654   |          |  A=D
   9655   |          |  D=M
   9656   |    14    |  @14
   9657   |          |  M=D
   9658   |    0     |  @0
   9659   |          |  AM=M-1
   9660   |          |  D=M
   9661   |    2     |  @2
   9662   |          |  A=M
   9663   |          |  M=D
   9664   |    2     |  @2
   9665   |          |  D=M+1
   9666   |    0     |  @0
   9667   |          |  M=D
   9668   |    13    |  @13
   9669   |          |  M=M-1
   9670   |          |  A=M
   9671   |          |  D=M
   9672   |    4     |  @4
   9673   |          |  M=D
   9674   |    13    |  @13
   9675   |          |  M=M-1
   9676   |          |  A=M
   9677   |          |  D=M
   9678   |    3     |  @3
   9679   |          |  M=D
   9680   |    13    |  @13
   9681   |          |  M=M-1
   9682   |          |  A=M
   9683   |          |  D=M
   9684   |    2     |  @2
   9685   |          |  M=D
   9686   |    13    |  @13
   9687   |          |  M=M-1
   9688   |          |  A=M
   9689   |          |  D=M
   9690   |    1     |  @1
   9691   |          |  M=D
   9692   |    14    |  @14
   9693   |          |  A=M
   9694   |          |  0;JMP
          |          |        // /** Creates an instance of Pong game, and stores it. */
          |          |        // function PongGame.newInstance 0
   9695   |ROM[9694] |  (PongGame.newInstance)
   9695   |    0     |  @0
   9696   |          |  D=M
   9697   |    1     |  @1
   9698   |          |  M=D
          |          |        // /*
          |          |        // */
          |          |        // call PongGame.new 0
   9699   |RAM[9747] |  @PongGame.new$ret.73
   9700   |          |  D=A
   9701   |    0     |  @0
   9702   |          |  A=M
   9703   |          |  M=D
   9704   |    0     |  @0
   9705   |          |  M=M+1
   9706   |    1     |  @1
   9707   |          |  D=M
   9708   |    0     |  @0
   9709   |          |  A=M
   9710   |          |  M=D
   9711   |    0     |  @0
   9712   |          |  M=M+1
   9713   |    2     |  @2
   9714   |          |  D=M
   9715   |    0     |  @0
   9716   |          |  A=M
   9717   |          |  M=D
   9718   |    0     |  @0
   9719   |          |  M=M+1
   9720   |    3     |  @3
   9721   |          |  D=M
   9722   |    0     |  @0
   9723   |          |  A=M
   9724   |          |  M=D
   9725   |    0     |  @0
   9726   |          |  M=M+1
   9727   |    4     |  @4
   9728   |          |  D=M
   9729   |    0     |  @0
   9730   |          |  A=M
   9731   |          |  M=D
   9732   |    0     |  @0
   9733   |          |  M=M+1
   9734   |    0     |  @0
   9735   |          |  D=M
   9736   |    2     |  @2
   9737   |          |  M=D
   9738   |    5     |  @5
   9739   |          |  D=A
   9740   |    2     |  @2
   9741   |          |  M=M-D
   9742   |    0     |  @0
   9743   |          |  D=M
   9744   |    1     |  @1
   9745   |          |  M=D
   9746   |RAM[8118] |  @PongGame.new
   9747   |          |  0;JMP
   9748   |ROM[9747] |  (PongGame.new$ret.73)
          |          |        // pop static 0
   9748   |    0     |  @0
   9749   |          |  AM=M-1
   9750   |          |  D=M
   9751   | RAM[29]  |  @PongGame.0
   9752   |          |  M=D
          |          |        // push constant 0
   9753   |    0     |  @0
   9754   |          |  D=A
   9755   |    0     |  @0
   9756   |          |  A=M
   9757   |          |  M=D
   9758   |    0     |  @0
   9759   |          |  M=M+1
          |          |        // return
   9760   |    1     |  @1
   9761   |          |  D=M
   9762   |    13    |  @13
   9763   |          |  M=D
   9764   |    5     |  @5
   9765   |          |  D=A
   9766   |    13    |  @13
   9767   |          |  D=M-D
   9768   |          |  A=D
   9769   |          |  D=M
   9770   |    14    |  @14
   9771   |          |  M=D
   9772   |    0     |  @0
   9773   |          |  AM=M-1
   9774   |          |  D=M
   9775   |    2     |  @2
   9776   |          |  A=M
   9777   |          |  M=D
   9778   |    2     |  @2
   9779   |          |  D=M+1
   9780   |    0     |  @0
   9781   |          |  M=D
   9782   |    13    |  @13
   9783   |          |  M=M-1
   9784   |          |  A=M
   9785   |          |  D=M
   9786   |    4     |  @4
   9787   |          |  M=D
   9788   |    13    |  @13
   9789   |          |  M=M-1
   9790   |          |  A=M
   9791   |          |  D=M
   9792   |    3     |  @3
   9793   |          |  M=D
   9794   |    13    |  @13
   9795   |          |  M=M-1
   9796   |          |  A=M
   9797   |          |  D=M
   9798   |    2     |  @2
   9799   |          |  M=D
   9800   |    13    |  @13
   9801   |          |  M=M-1
   9802   |          |  A=M
   9803   |          |  D=M
   9804   |    1     |  @1
   9805   |          |  M=D
   9806   |    14    |  @14
   9807   |          |  A=M
   9808   |          |  0;JMP
          |          |        // /** Returns the single instance of this Pong game. */
          |          |        // function PongGame.getInstance 0
   9809   |ROM[9808] |  (PongGame.getInstance)
   9809   |    0     |  @0
   9810   |          |  D=M
   9811   |    1     |  @1
   9812   |          |  M=D
          |          |        // /*
          |          |        // */
          |          |        // push static 0
   9813   | RAM[29]  |  @PongGame.0
   9814   |          |  D=M
   9815   |    0     |  @0
   9816   |          |  A=M
   9817   |          |  M=D
   9818   |    0     |  @0
   9819   |          |  M=M+1
          |          |        // return
   9820   |    1     |  @1
   9821   |          |  D=M
   9822   |    13    |  @13
   9823   |          |  M=D
   9824   |    5     |  @5
   9825   |          |  D=A
   9826   |    13    |  @13
   9827   |          |  D=M-D
   9828   |          |  A=D
   9829   |          |  D=M
   9830   |    14    |  @14
   9831   |          |  M=D
   9832   |    0     |  @0
   9833   |          |  AM=M-1
   9834   |          |  D=M
   9835   |    2     |  @2
   9836   |          |  A=M
   9837   |          |  M=D
   9838   |    2     |  @2
   9839   |          |  D=M+1
   9840   |    0     |  @0
   9841   |          |  M=D
   9842   |    13    |  @13
   9843   |          |  M=M-1
   9844   |          |  A=M
   9845   |          |  D=M
   9846   |    4     |  @4
   9847   |          |  M=D
   9848   |    13    |  @13
   9849   |          |  M=M-1
   9850   |          |  A=M
   9851   |          |  D=M
   9852   |    3     |  @3
   9853   |          |  M=D
   9854   |    13    |  @13
   9855   |          |  M=M-1
   9856   |          |  A=M
   9857   |          |  D=M
   9858   |    2     |  @2
   9859   |          |  M=D
   9860   |    13    |  @13
   9861   |          |  M=M-1
   9862   |          |  A=M
   9863   |          |  D=M
   9864   |    1     |  @1
   9865   |          |  M=D
   9866   |    14    |  @14
   9867   |          |  A=M
   9868   |          |  0;JMP
          |          |        // /** Starts the game, and andles inputs from the user that control
          |          |        // *  the bat's movement direction. */
          |          |        // function PongGame.run 1
   9869   |ROM[9868] |  (PongGame.run)
   9869   |    0     |  @0
   9870   |          |  D=M
   9871   |    1     |  @1
   9872   |          |  M=D
   9873   |    0     |  @0
   9874   |          |  A=M
   9875   |          |  M=0
   9876   |    0     |  @0
   9877   |          |  M=M+1
          |          |        // /*
          |          |        // ARG    PongGame this -> argument 0
          |          |        // VAR    char     key  -> local    0
          |          |        // */
          |          |        // push argument 0
   9878   |    0     |  @0
   9879   |          |  D=A
   9880   |    2     |  @2
   9881   |          |  A=M
   9882   |          |  A=A+D
   9883   |          |  D=M
   9884   |    0     |  @0
   9885   |          |  A=M
   9886   |          |  M=D
   9887   |    0     |  @0
   9888   |          |  M=M+1
          |          |        // pop pointer 0
   9889   |    0     |  @0
   9890   |          |  AM=M-1
   9891   |          |  D=M
   9892   |    3     |  @3
   9893   |          |  M=D
          |          |        // label PongGame.run_LOOP_START_0
   9894   |ROM[9893] |  (PongGame.run_LOOP_START_0)
          |          |        // push this 3
   9894   |    3     |  @3
   9895   |          |  D=A
   9896   |    3     |  @3
   9897   |          |  A=M
   9898   |          |  A=A+D
   9899   |          |  D=M
   9900   |    0     |  @0
   9901   |          |  A=M
   9902   |          |  M=D
   9903   |    0     |  @0
   9904   |          |  M=M+1
          |          |        // not
   9905   |    0     |  @0
   9906   |          |  A=M-1
   9907   |          |  M=!M
          |          |        // not
   9908   |    0     |  @0
   9909   |          |  A=M-1
   9910   |          |  M=!M
          |          |        // if-goto PongGame.run_LOOP_END_0
   9911   |    0     |  @0
   9912   |          |  AM=M-1
   9913   |          |  D=M
   9914   |RAM[10871]|  @PongGame.run_LOOP_END_0
   9915   |          |  D;JNE
          |          |        // label PongGame.run_LOOP_START_1
   9916   |ROM[9915] |  (PongGame.run_LOOP_START_1)
          |          |        // push local 0
   9916   |    0     |  @0
   9917   |          |  D=A
   9918   |    1     |  @1
   9919   |          |  A=M
   9920   |          |  A=A+D
   9921   |          |  D=M
   9922   |    0     |  @0
   9923   |          |  A=M
   9924   |          |  M=D
   9925   |    0     |  @0
   9926   |          |  M=M+1
          |          |        // push constant 0
   9927   |    0     |  @0
   9928   |          |  D=A
   9929   |    0     |  @0
   9930   |          |  A=M
   9931   |          |  M=D
   9932   |    0     |  @0
   9933   |          |  M=M+1
          |          |        // eq
   9934   |    0     |  @0
   9935   |          |  AM=M-1
   9936   |          |  D=M
   9937   |          |  A=A-1
   9938   |          |  D=M-D
   9939   |          |  M=-1
   9940   |RAM[9944] |  @T21
   9941   |          |  D;JEQ
   9942   |    0     |  @0
   9943   |          |  A=M-1
   9944   |          |  M=0
   9945   |ROM[9944] |  (T21)
          |          |        // push this 3
   9945   |    3     |  @3
   9946   |          |  D=A
   9947   |    3     |  @3
   9948   |          |  A=M
   9949   |          |  A=A+D
   9950   |          |  D=M
   9951   |    0     |  @0
   9952   |          |  A=M
   9953   |          |  M=D
   9954   |    0     |  @0
   9955   |          |  M=M+1
          |          |        // not
   9956   |    0     |  @0
   9957   |          |  A=M-1
   9958   |          |  M=!M
          |          |        // and
   9959   |    0     |  @0
   9960   |          |  AM=M-1
   9961   |          |  D=M
   9962   |          |  A=A-1
   9963   |          |  M=M&D
          |          |        // not
   9964   |    0     |  @0
   9965   |          |  A=M-1
   9966   |          |  M=!M
          |          |        // if-goto PongGame.run_LOOP_END_1
   9967   |    0     |  @0
   9968   |          |  AM=M-1
   9969   |          |  D=M
   9970   |RAM[10242]|  @PongGame.run_LOOP_END_1
   9971   |          |  D;JNE
          |          |        // call Keyboard.keyPressed 0
   9972   |RAM[10020]|  @Keyboard.keyPressed$ret.74
   9973   |          |  D=A
   9974   |    0     |  @0
   9975   |          |  A=M
   9976   |          |  M=D
   9977   |    0     |  @0
   9978   |          |  M=M+1
   9979   |    1     |  @1
   9980   |          |  D=M
   9981   |    0     |  @0
   9982   |          |  A=M
   9983   |          |  M=D
   9984   |    0     |  @0
   9985   |          |  M=M+1
   9986   |    2     |  @2
   9987   |          |  D=M
   9988   |    0     |  @0
   9989   |          |  A=M
   9990   |          |  M=D
   9991   |    0     |  @0
   9992   |          |  M=M+1
   9993   |    3     |  @3
   9994   |          |  D=M
   9995   |    0     |  @0
   9996   |          |  A=M
   9997   |          |  M=D
   9998   |    0     |  @0
   9999   |          |  M=M+1
  10000   |    4     |  @4
  10001   |          |  D=M
  10002   |    0     |  @0
  10003   |          |  A=M
  10004   |          |  M=D
  10005   |    0     |  @0
  10006   |          |  M=M+1
  10007   |    0     |  @0
  10008   |          |  D=M
  10009   |    2     |  @2
  10010   |          |  M=D
  10011   |    5     |  @5
  10012   |          |  D=A
  10013   |    2     |  @2
  10014   |          |  M=M-D
  10015   |    0     |  @0
  10016   |          |  D=M
  10017   |    1     |  @1
  10018   |          |  M=D
  10019   | RAM[30]  |  @Keyboard.keyPressed
  10020   |          |  0;JMP
  10021   |ROM[10020]|  (Keyboard.keyPressed$ret.74)
          |          |        // pop local 0
  10021   |    0     |  @0
  10022   |          |  D=A
  10023   |    1     |  @1
  10024   |          |  D=D+M
  10025   | RAM[13]  |  @R13
  10026   |          |  M=D
  10027   |    0     |  @0
  10028   |          |  AM=M-1
  10029   |          |  D=M
  10030   | RAM[13]  |  @R13
  10031   |          |  A=M
  10032   |          |  M=D
          |          |        // push this 0
  10033   |    0     |  @0
  10034   |          |  D=A
  10035   |    3     |  @3
  10036   |          |  A=M
  10037   |          |  A=A+D
  10038   |          |  D=M
  10039   |    0     |  @0
  10040   |          |  A=M
  10041   |          |  M=D
  10042   |    0     |  @0
  10043   |          |  M=M+1
          |          |        // call Bat.move 1
  10044   |RAM[10092]|  @Bat.move$ret.75
  10045   |          |  D=A
  10046   |    0     |  @0
  10047   |          |  A=M
  10048   |          |  M=D
  10049   |    0     |  @0
  10050   |          |  M=M+1
  10051   |    1     |  @1
  10052   |          |  D=M
  10053   |    0     |  @0
  10054   |          |  A=M
  10055   |          |  M=D
  10056   |    0     |  @0
  10057   |          |  M=M+1
  10058   |    2     |  @2
  10059   |          |  D=M
  10060   |    0     |  @0
  10061   |          |  A=M
  10062   |          |  M=D
  10063   |    0     |  @0
  10064   |          |  M=M+1
  10065   |    3     |  @3
  10066   |          |  D=M
  10067   |    0     |  @0
  10068   |          |  A=M
  10069   |          |  M=D
  10070   |    0     |  @0
  10071   |          |  M=M+1
  10072   |    4     |  @4
  10073   |          |  D=M
  10074   |    0     |  @0
  10075   |          |  A=M
  10076   |          |  M=D
  10077   |    0     |  @0
  10078   |          |  M=M+1
  10079   |    0     |  @0
  10080   |          |  D=M
  10081   |    2     |  @2
  10082   |          |  M=D
  10083   |    6     |  @6
  10084   |          |  D=A
  10085   |    2     |  @2
  10086   |          |  M=M-D
  10087   |    0     |  @0
  10088   |          |  D=M
  10089   |    1     |  @1
  10090   |          |  M=D
  10091   |RAM[6654] |  @Bat.move
  10092   |          |  0;JMP
  10093   |ROM[10092]|  (Bat.move$ret.75)
          |          |        // pop temp 0
  10093   |    0     |  @0
  10094   |          |  D=A
  10095   |    5     |  @5
  10096   |          |  D=D+A
  10097   | RAM[13]  |  @R13
  10098   |          |  M=D
  10099   |    0     |  @0
  10100   |          |  AM=M-1
  10101   |          |  D=M
  10102   | RAM[13]  |  @R13
  10103   |          |  A=M
  10104   |          |  M=D
          |          |        // push pointer 0
  10105   |    3     |  @3
  10106   |          |  D=M
  10107   |    0     |  @0
  10108   |          |  A=M
  10109   |          |  M=D
  10110   |    0     |  @0
  10111   |          |  M=M+1
          |          |        // call PongGame.moveBall 1
  10112   |RAM[10160]|  @PongGame.moveBall$ret.76
  10113   |          |  D=A
  10114   |    0     |  @0
  10115   |          |  A=M
  10116   |          |  M=D
  10117   |    0     |  @0
  10118   |          |  M=M+1
  10119   |    1     |  @1
  10120   |          |  D=M
  10121   |    0     |  @0
  10122   |          |  A=M
  10123   |          |  M=D
  10124   |    0     |  @0
  10125   |          |  M=M+1
  10126   |    2     |  @2
  10127   |          |  D=M
  10128   |    0     |  @0
  10129   |          |  A=M
  10130   |          |  M=D
  10131   |    0     |  @0
  10132   |          |  M=M+1
  10133   |    3     |  @3
  10134   |          |  D=M
  10135   |    0     |  @0
  10136   |          |  A=M
  10137   |          |  M=D
  10138   |    0     |  @0
  10139   |          |  M=M+1
  10140   |    4     |  @4
  10141   |          |  D=M
  10142   |    0     |  @0
  10143   |          |  A=M
  10144   |          |  M=D
  10145   |    0     |  @0
  10146   |          |  M=M+1
  10147   |    0     |  @0
  10148   |          |  D=M
  10149   |    2     |  @2
  10150   |          |  M=D
  10151   |    6     |  @6
  10152   |          |  D=A
  10153   |    2     |  @2
  10154   |          |  M=M-D
  10155   |    0     |  @0
  10156   |          |  D=M
  10157   |    1     |  @1
  10158   |          |  M=D
  10159   |RAM[11644]|  @PongGame.moveBall
  10160   |          |  0;JMP
  10161   |ROM[10160]|  (PongGame.moveBall$ret.76)
          |          |        // pop temp 0
  10161   |    0     |  @0
  10162   |          |  D=A
  10163   |    5     |  @5
  10164   |          |  D=D+A
  10165   | RAM[13]  |  @R13
  10166   |          |  M=D
  10167   |    0     |  @0
  10168   |          |  AM=M-1
  10169   |          |  D=M
  10170   | RAM[13]  |  @R13
  10171   |          |  A=M
  10172   |          |  M=D
          |          |        // push constant 50
  10173   |    50    |  @50
  10174   |          |  D=A
  10175   |    0     |  @0
  10176   |          |  A=M
  10177   |          |  M=D
  10178   |    0     |  @0
  10179   |          |  M=M+1
          |          |        // call Sys.wait 1
  10180   |RAM[10228]|  @Sys.wait$ret.77
  10181   |          |  D=A
  10182   |    0     |  @0
  10183   |          |  A=M
  10184   |          |  M=D
  10185   |    0     |  @0
  10186   |          |  M=M+1
  10187   |    1     |  @1
  10188   |          |  D=M
  10189   |    0     |  @0
  10190   |          |  A=M
  10191   |          |  M=D
  10192   |    0     |  @0
  10193   |          |  M=M+1
  10194   |    2     |  @2
  10195   |          |  D=M
  10196   |    0     |  @0
  10197   |          |  A=M
  10198   |          |  M=D
  10199   |    0     |  @0
  10200   |          |  M=M+1
  10201   |    3     |  @3
  10202   |          |  D=M
  10203   |    0     |  @0
  10204   |          |  A=M
  10205   |          |  M=D
  10206   |    0     |  @0
  10207   |          |  M=M+1
  10208   |    4     |  @4
  10209   |          |  D=M
  10210   |    0     |  @0
  10211   |          |  A=M
  10212   |          |  M=D
  10213   |    0     |  @0
  10214   |          |  M=M+1
  10215   |    0     |  @0
  10216   |          |  D=M
  10217   |    2     |  @2
  10218   |          |  M=D
  10219   |    6     |  @6
  10220   |          |  D=A
  10221   |    2     |  @2
  10222   |          |  M=M-D
  10223   |    0     |  @0
  10224   |          |  D=M
  10225   |    1     |  @1
  10226   |          |  M=D
  10227   | RAM[31]  |  @Sys.wait
  10228   |          |  0;JMP
  10229   |ROM[10228]|  (Sys.wait$ret.77)
          |          |        // pop temp 0
  10229   |    0     |  @0
  10230   |          |  D=A
  10231   |    5     |  @5
  10232   |          |  D=D+A
  10233   | RAM[13]  |  @R13
  10234   |          |  M=D
  10235   |    0     |  @0
  10236   |          |  AM=M-1
  10237   |          |  D=M
  10238   | RAM[13]  |  @R13
  10239   |          |  A=M
  10240   |          |  M=D
          |          |        // goto PongGame.run_LOOP_START_1
  10241   |RAM[9915] |  @PongGame.run_LOOP_START_1
  10242   |          |  0;JMP
          |          |        // label PongGame.run_LOOP_END_1
  10243   |ROM[10242]|  (PongGame.run_LOOP_END_1)
          |          |        // push local 0
  10243   |    0     |  @0
  10244   |          |  D=A
  10245   |    1     |  @1
  10246   |          |  A=M
  10247   |          |  A=A+D
  10248   |          |  D=M
  10249   |    0     |  @0
  10250   |          |  A=M
  10251   |          |  M=D
  10252   |    0     |  @0
  10253   |          |  M=M+1
          |          |        // push constant 130
  10254   |   130    |  @130
  10255   |          |  D=A
  10256   |    0     |  @0
  10257   |          |  A=M
  10258   |          |  M=D
  10259   |    0     |  @0
  10260   |          |  M=M+1
          |          |        // eq
  10261   |    0     |  @0
  10262   |          |  AM=M-1
  10263   |          |  D=M
  10264   |          |  A=A-1
  10265   |          |  D=M-D
  10266   |          |  M=-1
  10267   |RAM[10271]|  @T22
  10268   |          |  D;JEQ
  10269   |    0     |  @0
  10270   |          |  A=M-1
  10271   |          |  M=0
  10272   |ROM[10271]|  (T22)
          |          |        // not
  10272   |    0     |  @0
  10273   |          |  A=M-1
  10274   |          |  M=!M
          |          |        // if-goto PongGame.run_FALSE_0
  10275   |    0     |  @0
  10276   |          |  AM=M-1
  10277   |          |  D=M
  10278   |RAM[10360]|  @PongGame.run_FALSE_0
  10279   |          |  D;JNE
          |          |        // push this 0
  10280   |    0     |  @0
  10281   |          |  D=A
  10282   |    3     |  @3
  10283   |          |  A=M
  10284   |          |  A=A+D
  10285   |          |  D=M
  10286   |    0     |  @0
  10287   |          |  A=M
  10288   |          |  M=D
  10289   |    0     |  @0
  10290   |          |  M=M+1
          |          |        // push constant 1
  10291   |    1     |  @1
  10292   |          |  D=A
  10293   |    0     |  @0
  10294   |          |  A=M
  10295   |          |  M=D
  10296   |    0     |  @0
  10297   |          |  M=M+1
          |          |        // call Bat.setDirection 2
  10298   |RAM[10346]|  @Bat.setDirection$ret.78
  10299   |          |  D=A
  10300   |    0     |  @0
  10301   |          |  A=M
  10302   |          |  M=D
  10303   |    0     |  @0
  10304   |          |  M=M+1
  10305   |    1     |  @1
  10306   |          |  D=M
  10307   |    0     |  @0
  10308   |          |  A=M
  10309   |          |  M=D
  10310   |    0     |  @0
  10311   |          |  M=M+1
  10312   |    2     |  @2
  10313   |          |  D=M
  10314   |    0     |  @0
  10315   |          |  A=M
  10316   |          |  M=D
  10317   |    0     |  @0
  10318   |          |  M=M+1
  10319   |    3     |  @3
  10320   |          |  D=M
  10321   |    0     |  @0
  10322   |          |  A=M
  10323   |          |  M=D
  10324   |    0     |  @0
  10325   |          |  M=M+1
  10326   |    4     |  @4
  10327   |          |  D=M
  10328   |    0     |  @0
  10329   |          |  A=M
  10330   |          |  M=D
  10331   |    0     |  @0
  10332   |          |  M=M+1
  10333   |    0     |  @0
  10334   |          |  D=M
  10335   |    2     |  @2
  10336   |          |  M=D
  10337   |    7     |  @7
  10338   |          |  D=A
  10339   |    2     |  @2
  10340   |          |  M=M-D
  10341   |    0     |  @0
  10342   |          |  D=M
  10343   |    1     |  @1
  10344   |          |  M=D
  10345   |RAM[6144] |  @Bat.setDirection
  10346   |          |  0;JMP
  10347   |ROM[10346]|  (Bat.setDirection$ret.78)
          |          |        // pop temp 0
  10347   |    0     |  @0
  10348   |          |  D=A
  10349   |    5     |  @5
  10350   |          |  D=D+A
  10351   | RAM[13]  |  @R13
  10352   |          |  M=D
  10353   |    0     |  @0
  10354   |          |  AM=M-1
  10355   |          |  D=M
  10356   | RAM[13]  |  @R13
  10357   |          |  A=M
  10358   |          |  M=D
          |          |        // goto PongGame.run_TRUE_0
  10359   |RAM[10539]|  @PongGame.run_TRUE_0
  10360   |          |  0;JMP
          |          |        // label PongGame.run_FALSE_0
  10361   |ROM[10360]|  (PongGame.run_FALSE_0)
          |          |        // push local 0
  10361   |    0     |  @0
  10362   |          |  D=A
  10363   |    1     |  @1
  10364   |          |  A=M
  10365   |          |  A=A+D
  10366   |          |  D=M
  10367   |    0     |  @0
  10368   |          |  A=M
  10369   |          |  M=D
  10370   |    0     |  @0
  10371   |          |  M=M+1
          |          |        // push constant 132
  10372   |   132    |  @132
  10373   |          |  D=A
  10374   |    0     |  @0
  10375   |          |  A=M
  10376   |          |  M=D
  10377   |    0     |  @0
  10378   |          |  M=M+1
          |          |        // eq
  10379   |    0     |  @0
  10380   |          |  AM=M-1
  10381   |          |  D=M
  10382   |          |  A=A-1
  10383   |          |  D=M-D
  10384   |          |  M=-1
  10385   |RAM[10389]|  @T23
  10386   |          |  D;JEQ
  10387   |    0     |  @0
  10388   |          |  A=M-1
  10389   |          |  M=0
  10390   |ROM[10389]|  (T23)
          |          |        // not
  10390   |    0     |  @0
  10391   |          |  A=M-1
  10392   |          |  M=!M
          |          |        // if-goto PongGame.run_FALSE_1
  10393   |    0     |  @0
  10394   |          |  AM=M-1
  10395   |          |  D=M
  10396   |RAM[10478]|  @PongGame.run_FALSE_1
  10397   |          |  D;JNE
          |          |        // push this 0
  10398   |    0     |  @0
  10399   |          |  D=A
  10400   |    3     |  @3
  10401   |          |  A=M
  10402   |          |  A=A+D
  10403   |          |  D=M
  10404   |    0     |  @0
  10405   |          |  A=M
  10406   |          |  M=D
  10407   |    0     |  @0
  10408   |          |  M=M+1
          |          |        // push constant 2
  10409   |    2     |  @2
  10410   |          |  D=A
  10411   |    0     |  @0
  10412   |          |  A=M
  10413   |          |  M=D
  10414   |    0     |  @0
  10415   |          |  M=M+1
          |          |        // call Bat.setDirection 2
  10416   |RAM[10464]|  @Bat.setDirection$ret.79
  10417   |          |  D=A
  10418   |    0     |  @0
  10419   |          |  A=M
  10420   |          |  M=D
  10421   |    0     |  @0
  10422   |          |  M=M+1
  10423   |    1     |  @1
  10424   |          |  D=M
  10425   |    0     |  @0
  10426   |          |  A=M
  10427   |          |  M=D
  10428   |    0     |  @0
  10429   |          |  M=M+1
  10430   |    2     |  @2
  10431   |          |  D=M
  10432   |    0     |  @0
  10433   |          |  A=M
  10434   |          |  M=D
  10435   |    0     |  @0
  10436   |          |  M=M+1
  10437   |    3     |  @3
  10438   |          |  D=M
  10439   |    0     |  @0
  10440   |          |  A=M
  10441   |          |  M=D
  10442   |    0     |  @0
  10443   |          |  M=M+1
  10444   |    4     |  @4
  10445   |          |  D=M
  10446   |    0     |  @0
  10447   |          |  A=M
  10448   |          |  M=D
  10449   |    0     |  @0
  10450   |          |  M=M+1
  10451   |    0     |  @0
  10452   |          |  D=M
  10453   |    2     |  @2
  10454   |          |  M=D
  10455   |    7     |  @7
  10456   |          |  D=A
  10457   |    2     |  @2
  10458   |          |  M=M-D
  10459   |    0     |  @0
  10460   |          |  D=M
  10461   |    1     |  @1
  10462   |          |  M=D
  10463   |RAM[6144] |  @Bat.setDirection
  10464   |          |  0;JMP
  10465   |ROM[10464]|  (Bat.setDirection$ret.79)
          |          |        // pop temp 0
  10465   |    0     |  @0
  10466   |          |  D=A
  10467   |    5     |  @5
  10468   |          |  D=D+A
  10469   | RAM[13]  |  @R13
  10470   |          |  M=D
  10471   |    0     |  @0
  10472   |          |  AM=M-1
  10473   |          |  D=M
  10474   | RAM[13]  |  @R13
  10475   |          |  A=M
  10476   |          |  M=D
          |          |        // goto PongGame.run_TRUE_1
  10477   |RAM[10539]|  @PongGame.run_TRUE_1
  10478   |          |  0;JMP
          |          |        // label PongGame.run_FALSE_1
  10479   |ROM[10478]|  (PongGame.run_FALSE_1)
          |          |        // push local 0
  10479   |    0     |  @0
  10480   |          |  D=A
  10481   |    1     |  @1
  10482   |          |  A=M
  10483   |          |  A=A+D
  10484   |          |  D=M
  10485   |    0     |  @0
  10486   |          |  A=M
  10487   |          |  M=D
  10488   |    0     |  @0
  10489   |          |  M=M+1
          |          |        // push constant 140
  10490   |   140    |  @140
  10491   |          |  D=A
  10492   |    0     |  @0
  10493   |          |  A=M
  10494   |          |  M=D
  10495   |    0     |  @0
  10496   |          |  M=M+1
          |          |        // eq
  10497   |    0     |  @0
  10498   |          |  AM=M-1
  10499   |          |  D=M
  10500   |          |  A=A-1
  10501   |          |  D=M-D
  10502   |          |  M=-1
  10503   |RAM[10507]|  @T24
  10504   |          |  D;JEQ
  10505   |    0     |  @0
  10506   |          |  A=M-1
  10507   |          |  M=0
  10508   |ROM[10507]|  (T24)
          |          |        // not
  10508   |    0     |  @0
  10509   |          |  A=M-1
  10510   |          |  M=!M
          |          |        // if-goto PongGame.run_FALSE_2
  10511   |    0     |  @0
  10512   |          |  AM=M-1
  10513   |          |  D=M
  10514   |RAM[10539]|  @PongGame.run_FALSE_2
  10515   |          |  D;JNE
          |          |        // push constant 1
  10516   |    1     |  @1
  10517   |          |  D=A
  10518   |    0     |  @0
  10519   |          |  A=M
  10520   |          |  M=D
  10521   |    0     |  @0
  10522   |          |  M=M+1
          |          |        // neg
  10523   |    0     |  @0
  10524   |          |  A=M-1
  10525   |          |  M=-M
          |          |        // pop this 3
  10526   |    3     |  @3
  10527   |          |  D=A
  10528   |    3     |  @3
  10529   |          |  D=D+M
  10530   | RAM[13]  |  @R13
  10531   |          |  M=D
  10532   |    0     |  @0
  10533   |          |  AM=M-1
  10534   |          |  D=M
  10535   | RAM[13]  |  @R13
  10536   |          |  A=M
  10537   |          |  M=D
          |          |        // goto PongGame.run_TRUE_2
  10538   |RAM[10539]|  @PongGame.run_TRUE_2
  10539   |          |  0;JMP
          |          |        // label PongGame.run_FALSE_2
  10540   |ROM[10539]|  (PongGame.run_FALSE_2)
          |          |        // label PongGame.run_TRUE_2
  10540   |ROM[10539]|  (PongGame.run_TRUE_2)
          |          |        // label PongGame.run_TRUE_1
  10540   |ROM[10539]|  (PongGame.run_TRUE_1)
          |          |        // label PongGame.run_TRUE_0
  10540   |ROM[10539]|  (PongGame.run_TRUE_0)
          |          |        // label PongGame.run_LOOP_START_3
  10540   |ROM[10539]|  (PongGame.run_LOOP_START_3)
          |          |        // push local 0
  10540   |    0     |  @0
  10541   |          |  D=A
  10542   |    1     |  @1
  10543   |          |  A=M
  10544   |          |  A=A+D
  10545   |          |  D=M
  10546   |    0     |  @0
  10547   |          |  A=M
  10548   |          |  M=D
  10549   |    0     |  @0
  10550   |          |  M=M+1
          |          |        // push constant 0
  10551   |    0     |  @0
  10552   |          |  D=A
  10553   |    0     |  @0
  10554   |          |  A=M
  10555   |          |  M=D
  10556   |    0     |  @0
  10557   |          |  M=M+1
          |          |        // eq
  10558   |    0     |  @0
  10559   |          |  AM=M-1
  10560   |          |  D=M
  10561   |          |  A=A-1
  10562   |          |  D=M-D
  10563   |          |  M=-1
  10564   |RAM[10568]|  @T25
  10565   |          |  D;JEQ
  10566   |    0     |  @0
  10567   |          |  A=M-1
  10568   |          |  M=0
  10569   |ROM[10568]|  (T25)
          |          |        // not
  10569   |    0     |  @0
  10570   |          |  A=M-1
  10571   |          |  M=!M
          |          |        // push this 3
  10572   |    3     |  @3
  10573   |          |  D=A
  10574   |    3     |  @3
  10575   |          |  A=M
  10576   |          |  A=A+D
  10577   |          |  D=M
  10578   |    0     |  @0
  10579   |          |  A=M
  10580   |          |  M=D
  10581   |    0     |  @0
  10582   |          |  M=M+1
          |          |        // not
  10583   |    0     |  @0
  10584   |          |  A=M-1
  10585   |          |  M=!M
          |          |        // and
  10586   |    0     |  @0
  10587   |          |  AM=M-1
  10588   |          |  D=M
  10589   |          |  A=A-1
  10590   |          |  M=M&D
          |          |        // not
  10591   |    0     |  @0
  10592   |          |  A=M-1
  10593   |          |  M=!M
          |          |        // if-goto PongGame.run_LOOP_END_3
  10594   |    0     |  @0
  10595   |          |  AM=M-1
  10596   |          |  D=M
  10597   |RAM[10869]|  @PongGame.run_LOOP_END_3
  10598   |          |  D;JNE
          |          |        // call Keyboard.keyPressed 0
  10599   |RAM[10647]|  @Keyboard.keyPressed$ret.80
  10600   |          |  D=A
  10601   |    0     |  @0
  10602   |          |  A=M
  10603   |          |  M=D
  10604   |    0     |  @0
  10605   |          |  M=M+1
  10606   |    1     |  @1
  10607   |          |  D=M
  10608   |    0     |  @0
  10609   |          |  A=M
  10610   |          |  M=D
  10611   |    0     |  @0
  10612   |          |  M=M+1
  10613   |    2     |  @2
  10614   |          |  D=M
  10615   |    0     |  @0
  10616   |          |  A=M
  10617   |          |  M=D
  10618   |    0     |  @0
  10619   |          |  M=M+1
  10620   |    3     |  @3
  10621   |          |  D=M
  10622   |    0     |  @0
  10623   |          |  A=M
  10624   |          |  M=D
  10625   |    0     |  @0
  10626   |          |  M=M+1
  10627   |    4     |  @4
  10628   |          |  D=M
  10629   |    0     |  @0
  10630   |          |  A=M
  10631   |          |  M=D
  10632   |    0     |  @0
  10633   |          |  M=M+1
  10634   |    0     |  @0
  10635   |          |  D=M
  10636   |    2     |  @2
  10637   |          |  M=D
  10638   |    5     |  @5
  10639   |          |  D=A
  10640   |    2     |  @2
  10641   |          |  M=M-D
  10642   |    0     |  @0
  10643   |          |  D=M
  10644   |    1     |  @1
  10645   |          |  M=D
  10646   | RAM[30]  |  @Keyboard.keyPressed
  10647   |          |  0;JMP
  10648   |ROM[10647]|  (Keyboard.keyPressed$ret.80)
          |          |        // pop local 0
  10648   |    0     |  @0
  10649   |          |  D=A
  10650   |    1     |  @1
  10651   |          |  D=D+M
  10652   | RAM[13]  |  @R13
  10653   |          |  M=D
  10654   |    0     |  @0
  10655   |          |  AM=M-1
  10656   |          |  D=M
  10657   | RAM[13]  |  @R13
  10658   |          |  A=M
  10659   |          |  M=D
          |          |        // push this 0
  10660   |    0     |  @0
  10661   |          |  D=A
  10662   |    3     |  @3
  10663   |          |  A=M
  10664   |          |  A=A+D
  10665   |          |  D=M
  10666   |    0     |  @0
  10667   |          |  A=M
  10668   |          |  M=D
  10669   |    0     |  @0
  10670   |          |  M=M+1
          |          |        // call Bat.move 1
  10671   |RAM[10719]|  @Bat.move$ret.81
  10672   |          |  D=A
  10673   |    0     |  @0
  10674   |          |  A=M
  10675   |          |  M=D
  10676   |    0     |  @0
  10677   |          |  M=M+1
  10678   |    1     |  @1
  10679   |          |  D=M
  10680   |    0     |  @0
  10681   |          |  A=M
  10682   |          |  M=D
  10683   |    0     |  @0
  10684   |          |  M=M+1
  10685   |    2     |  @2
  10686   |          |  D=M
  10687   |    0     |  @0
  10688   |          |  A=M
  10689   |          |  M=D
  10690   |    0     |  @0
  10691   |          |  M=M+1
  10692   |    3     |  @3
  10693   |          |  D=M
  10694   |    0     |  @0
  10695   |          |  A=M
  10696   |          |  M=D
  10697   |    0     |  @0
  10698   |          |  M=M+1
  10699   |    4     |  @4
  10700   |          |  D=M
  10701   |    0     |  @0
  10702   |          |  A=M
  10703   |          |  M=D
  10704   |    0     |  @0
  10705   |          |  M=M+1
  10706   |    0     |  @0
  10707   |          |  D=M
  10708   |    2     |  @2
  10709   |          |  M=D
  10710   |    6     |  @6
  10711   |          |  D=A
  10712   |    2     |  @2
  10713   |          |  M=M-D
  10714   |    0     |  @0
  10715   |          |  D=M
  10716   |    1     |  @1
  10717   |          |  M=D
  10718   |RAM[6654] |  @Bat.move
  10719   |          |  0;JMP
  10720   |ROM[10719]|  (Bat.move$ret.81)
          |          |        // pop temp 0
  10720   |    0     |  @0
  10721   |          |  D=A
  10722   |    5     |  @5
  10723   |          |  D=D+A
  10724   | RAM[13]  |  @R13
  10725   |          |  M=D
  10726   |    0     |  @0
  10727   |          |  AM=M-1
  10728   |          |  D=M
  10729   | RAM[13]  |  @R13
  10730   |          |  A=M
  10731   |          |  M=D
          |          |        // push pointer 0
  10732   |    3     |  @3
  10733   |          |  D=M
  10734   |    0     |  @0
  10735   |          |  A=M
  10736   |          |  M=D
  10737   |    0     |  @0
  10738   |          |  M=M+1
          |          |        // call PongGame.moveBall 1
  10739   |RAM[10787]|  @PongGame.moveBall$ret.82
  10740   |          |  D=A
  10741   |    0     |  @0
  10742   |          |  A=M
  10743   |          |  M=D
  10744   |    0     |  @0
  10745   |          |  M=M+1
  10746   |    1     |  @1
  10747   |          |  D=M
  10748   |    0     |  @0
  10749   |          |  A=M
  10750   |          |  M=D
  10751   |    0     |  @0
  10752   |          |  M=M+1
  10753   |    2     |  @2
  10754   |          |  D=M
  10755   |    0     |  @0
  10756   |          |  A=M
  10757   |          |  M=D
  10758   |    0     |  @0
  10759   |          |  M=M+1
  10760   |    3     |  @3
  10761   |          |  D=M
  10762   |    0     |  @0
  10763   |          |  A=M
  10764   |          |  M=D
  10765   |    0     |  @0
  10766   |          |  M=M+1
  10767   |    4     |  @4
  10768   |          |  D=M
  10769   |    0     |  @0
  10770   |          |  A=M
  10771   |          |  M=D
  10772   |    0     |  @0
  10773   |          |  M=M+1
  10774   |    0     |  @0
  10775   |          |  D=M
  10776   |    2     |  @2
  10777   |          |  M=D
  10778   |    6     |  @6
  10779   |          |  D=A
  10780   |    2     |  @2
  10781   |          |  M=M-D
  10782   |    0     |  @0
  10783   |          |  D=M
  10784   |    1     |  @1
  10785   |          |  M=D
  10786   |RAM[11644]|  @PongGame.moveBall
  10787   |          |  0;JMP
  10788   |ROM[10787]|  (PongGame.moveBall$ret.82)
          |          |        // pop temp 0
  10788   |    0     |  @0
  10789   |          |  D=A
  10790   |    5     |  @5
  10791   |          |  D=D+A
  10792   | RAM[13]  |  @R13
  10793   |          |  M=D
  10794   |    0     |  @0
  10795   |          |  AM=M-1
  10796   |          |  D=M
  10797   | RAM[13]  |  @R13
  10798   |          |  A=M
  10799   |          |  M=D
          |          |        // push constant 50
  10800   |    50    |  @50
  10801   |          |  D=A
  10802   |    0     |  @0
  10803   |          |  A=M
  10804   |          |  M=D
  10805   |    0     |  @0
  10806   |          |  M=M+1
          |          |        // call Sys.wait 1
  10807   |RAM[10855]|  @Sys.wait$ret.83
  10808   |          |  D=A
  10809   |    0     |  @0
  10810   |          |  A=M
  10811   |          |  M=D
  10812   |    0     |  @0
  10813   |          |  M=M+1
  10814   |    1     |  @1
  10815   |          |  D=M
  10816   |    0     |  @0
  10817   |          |  A=M
  10818   |          |  M=D
  10819   |    0     |  @0
  10820   |          |  M=M+1
  10821   |    2     |  @2
  10822   |          |  D=M
  10823   |    0     |  @0
  10824   |          |  A=M
  10825   |          |  M=D
  10826   |    0     |  @0
  10827   |          |  M=M+1
  10828   |    3     |  @3
  10829   |          |  D=M
  10830   |    0     |  @0
  10831   |          |  A=M
  10832   |          |  M=D
  10833   |    0     |  @0
  10834   |          |  M=M+1
  10835   |    4     |  @4
  10836   |          |  D=M
  10837   |    0     |  @0
  10838   |          |  A=M
  10839   |          |  M=D
  10840   |    0     |  @0
  10841   |          |  M=M+1
  10842   |    0     |  @0
  10843   |          |  D=M
  10844   |    2     |  @2
  10845   |          |  M=D
  10846   |    6     |  @6
  10847   |          |  D=A
  10848   |    2     |  @2
  10849   |          |  M=M-D
  10850   |    0     |  @0
  10851   |          |  D=M
  10852   |    1     |  @1
  10853   |          |  M=D
  10854   | RAM[31]  |  @Sys.wait
  10855   |          |  0;JMP
  10856   |ROM[10855]|  (Sys.wait$ret.83)
          |          |        // pop temp 0
  10856   |    0     |  @0
  10857   |          |  D=A
  10858   |    5     |  @5
  10859   |          |  D=D+A
  10860   | RAM[13]  |  @R13
  10861   |          |  M=D
  10862   |    0     |  @0
  10863   |          |  AM=M-1
  10864   |          |  D=M
  10865   | RAM[13]  |  @R13
  10866   |          |  A=M
  10867   |          |  M=D
          |          |        // goto PongGame.run_LOOP_START_3
  10868   |RAM[10539]|  @PongGame.run_LOOP_START_3
  10869   |          |  0;JMP
          |          |        // label PongGame.run_LOOP_END_3
  10870   |ROM[10869]|  (PongGame.run_LOOP_END_3)
          |          |        // goto PongGame.run_LOOP_START_0
  10870   |RAM[9893] |  @PongGame.run_LOOP_START_0
  10871   |          |  0;JMP
          |          |        // label PongGame.run_LOOP_END_0
  10872   |ROM[10871]|  (PongGame.run_LOOP_END_0)
          |          |        // push this 3
  10872   |    3     |  @3
  10873   |          |  D=A
  10874   |    3     |  @3
  10875   |          |  A=M
  10876   |          |  A=A+D
  10877   |          |  D=M
  10878   |    0     |  @0
  10879   |          |  A=M
  10880   |          |  M=D
  10881   |    0     |  @0
  10882   |          |  M=M+1
          |          |        // not
  10883   |    0     |  @0
  10884   |          |  A=M-1
  10885   |          |  M=!M
          |          |        // if-goto PongGame.run_FALSE_3
  10886   |    0     |  @0
  10887   |          |  AM=M-1
  10888   |          |  D=M
  10889   |RAM[11588]|  @PongGame.run_FALSE_3
  10890   |          |  D;JNE
          |          |        // push constant 10
  10891   |    10    |  @10
  10892   |          |  D=A
  10893   |    0     |  @0
  10894   |          |  A=M
  10895   |          |  M=D
  10896   |    0     |  @0
  10897   |          |  M=M+1
          |          |        // push constant 27
  10898   |    27    |  @27
  10899   |          |  D=A
  10900   |    0     |  @0
  10901   |          |  A=M
  10902   |          |  M=D
  10903   |    0     |  @0
  10904   |          |  M=M+1
          |          |        // call Output.moveCursor 2
  10905   |RAM[10953]|  @Output.moveCursor$ret.84
  10906   |          |  D=A
  10907   |    0     |  @0
  10908   |          |  A=M
  10909   |          |  M=D
  10910   |    0     |  @0
  10911   |          |  M=M+1
  10912   |    1     |  @1
  10913   |          |  D=M
  10914   |    0     |  @0
  10915   |          |  A=M
  10916   |          |  M=D
  10917   |    0     |  @0
  10918   |          |  M=M+1
  10919   |    2     |  @2
  10920   |          |  D=M
  10921   |    0     |  @0
  10922   |          |  A=M
  10923   |          |  M=D
  10924   |    0     |  @0
  10925   |          |  M=M+1
  10926   |    3     |  @3
  10927   |          |  D=M
  10928   |    0     |  @0
  10929   |          |  A=M
  10930   |          |  M=D
  10931   |    0     |  @0
  10932   |          |  M=M+1
  10933   |    4     |  @4
  10934   |          |  D=M
  10935   |    0     |  @0
  10936   |          |  A=M
  10937   |          |  M=D
  10938   |    0     |  @0
  10939   |          |  M=M+1
  10940   |    0     |  @0
  10941   |          |  D=M
  10942   |    2     |  @2
  10943   |          |  M=D
  10944   |    7     |  @7
  10945   |          |  D=A
  10946   |    2     |  @2
  10947   |          |  M=M-D
  10948   |    0     |  @0
  10949   |          |  D=M
  10950   |    1     |  @1
  10951   |          |  M=D
  10952   | RAM[25]  |  @Output.moveCursor
  10953   |          |  0;JMP
  10954   |ROM[10953]|  (Output.moveCursor$ret.84)
          |          |        // pop temp 0
  10954   |    0     |  @0
  10955   |          |  D=A
  10956   |    5     |  @5
  10957   |          |  D=D+A
  10958   | RAM[13]  |  @R13
  10959   |          |  M=D
  10960   |    0     |  @0
  10961   |          |  AM=M-1
  10962   |          |  D=M
  10963   | RAM[13]  |  @R13
  10964   |          |  A=M
  10965   |          |  M=D
          |          |        // push constant 9
  10966   |    9     |  @9
  10967   |          |  D=A
  10968   |    0     |  @0
  10969   |          |  A=M
  10970   |          |  M=D
  10971   |    0     |  @0
  10972   |          |  M=M+1
          |          |        // call String.new 1
  10973   |RAM[11021]|  @String.new$ret.85
  10974   |          |  D=A
  10975   |    0     |  @0
  10976   |          |  A=M
  10977   |          |  M=D
  10978   |    0     |  @0
  10979   |          |  M=M+1
  10980   |    1     |  @1
  10981   |          |  D=M
  10982   |    0     |  @0
  10983   |          |  A=M
  10984   |          |  M=D
  10985   |    0     |  @0
  10986   |          |  M=M+1
  10987   |    2     |  @2
  10988   |          |  D=M
  10989   |    0     |  @0
  10990   |          |  A=M
  10991   |          |  M=D
  10992   |    0     |  @0
  10993   |          |  M=M+1
  10994   |    3     |  @3
  10995   |          |  D=M
  10996   |    0     |  @0
  10997   |          |  A=M
  10998   |          |  M=D
  10999   |    0     |  @0
  11000   |          |  M=M+1
  11001   |    4     |  @4
  11002   |          |  D=M
  11003   |    0     |  @0
  11004   |          |  A=M
  11005   |          |  M=D
  11006   |    0     |  @0
  11007   |          |  M=M+1
  11008   |    0     |  @0
  11009   |          |  D=M
  11010   |    2     |  @2
  11011   |          |  M=D
  11012   |    6     |  @6
  11013   |          |  D=A
  11014   |    2     |  @2
  11015   |          |  M=M-D
  11016   |    0     |  @0
  11017   |          |  D=M
  11018   |    1     |  @1
  11019   |          |  M=D
  11020   | RAM[26]  |  @String.new
  11021   |          |  0;JMP
  11022   |ROM[11021]|  (String.new$ret.85)
          |          |        // push constant 71
  11022   |    71    |  @71
  11023   |          |  D=A
  11024   |    0     |  @0
  11025   |          |  A=M
  11026   |          |  M=D
  11027   |    0     |  @0
  11028   |          |  M=M+1
          |          |        // call String.appendChar 2
  11029   |RAM[11077]|  @String.appendChar$ret.86
  11030   |          |  D=A
  11031   |    0     |  @0
  11032   |          |  A=M
  11033   |          |  M=D
  11034   |    0     |  @0
  11035   |          |  M=M+1
  11036   |    1     |  @1
  11037   |          |  D=M
  11038   |    0     |  @0
  11039   |          |  A=M
  11040   |          |  M=D
  11041   |    0     |  @0
  11042   |          |  M=M+1
  11043   |    2     |  @2
  11044   |          |  D=M
  11045   |    0     |  @0
  11046   |          |  A=M
  11047   |          |  M=D
  11048   |    0     |  @0
  11049   |          |  M=M+1
  11050   |    3     |  @3
  11051   |          |  D=M
  11052   |    0     |  @0
  11053   |          |  A=M
  11054   |          |  M=D
  11055   |    0     |  @0
  11056   |          |  M=M+1
  11057   |    4     |  @4
  11058   |          |  D=M
  11059   |    0     |  @0
  11060   |          |  A=M
  11061   |          |  M=D
  11062   |    0     |  @0
  11063   |          |  M=M+1
  11064   |    0     |  @0
  11065   |          |  D=M
  11066   |    2     |  @2
  11067   |          |  M=D
  11068   |    7     |  @7
  11069   |          |  D=A
  11070   |    2     |  @2
  11071   |          |  M=M-D
  11072   |    0     |  @0
  11073   |          |  D=M
  11074   |    1     |  @1
  11075   |          |  M=D
  11076   | RAM[27]  |  @String.appendChar
  11077   |          |  0;JMP
  11078   |ROM[11077]|  (String.appendChar$ret.86)
          |          |        // push constant 97
  11078   |    97    |  @97
  11079   |          |  D=A
  11080   |    0     |  @0
  11081   |          |  A=M
  11082   |          |  M=D
  11083   |    0     |  @0
  11084   |          |  M=M+1
          |          |        // call String.appendChar 2
  11085   |RAM[11133]|  @String.appendChar$ret.87
  11086   |          |  D=A
  11087   |    0     |  @0
  11088   |          |  A=M
  11089   |          |  M=D
  11090   |    0     |  @0
  11091   |          |  M=M+1
  11092   |    1     |  @1
  11093   |          |  D=M
  11094   |    0     |  @0
  11095   |          |  A=M
  11096   |          |  M=D
  11097   |    0     |  @0
  11098   |          |  M=M+1
  11099   |    2     |  @2
  11100   |          |  D=M
  11101   |    0     |  @0
  11102   |          |  A=M
  11103   |          |  M=D
  11104   |    0     |  @0
  11105   |          |  M=M+1
  11106   |    3     |  @3
  11107   |          |  D=M
  11108   |    0     |  @0
  11109   |          |  A=M
  11110   |          |  M=D
  11111   |    0     |  @0
  11112   |          |  M=M+1
  11113   |    4     |  @4
  11114   |          |  D=M
  11115   |    0     |  @0
  11116   |          |  A=M
  11117   |          |  M=D
  11118   |    0     |  @0
  11119   |          |  M=M+1
  11120   |    0     |  @0
  11121   |          |  D=M
  11122   |    2     |  @2
  11123   |          |  M=D
  11124   |    7     |  @7
  11125   |          |  D=A
  11126   |    2     |  @2
  11127   |          |  M=M-D
  11128   |    0     |  @0
  11129   |          |  D=M
  11130   |    1     |  @1
  11131   |          |  M=D
  11132   | RAM[27]  |  @String.appendChar
  11133   |          |  0;JMP
  11134   |ROM[11133]|  (String.appendChar$ret.87)
          |          |        // push constant 109
  11134   |   109    |  @109
  11135   |          |  D=A
  11136   |    0     |  @0
  11137   |          |  A=M
  11138   |          |  M=D
  11139   |    0     |  @0
  11140   |          |  M=M+1
          |          |        // call String.appendChar 2
  11141   |RAM[11189]|  @String.appendChar$ret.88
  11142   |          |  D=A
  11143   |    0     |  @0
  11144   |          |  A=M
  11145   |          |  M=D
  11146   |    0     |  @0
  11147   |          |  M=M+1
  11148   |    1     |  @1
  11149   |          |  D=M
  11150   |    0     |  @0
  11151   |          |  A=M
  11152   |          |  M=D
  11153   |    0     |  @0
  11154   |          |  M=M+1
  11155   |    2     |  @2
  11156   |          |  D=M
  11157   |    0     |  @0
  11158   |          |  A=M
  11159   |          |  M=D
  11160   |    0     |  @0
  11161   |          |  M=M+1
  11162   |    3     |  @3
  11163   |          |  D=M
  11164   |    0     |  @0
  11165   |          |  A=M
  11166   |          |  M=D
  11167   |    0     |  @0
  11168   |          |  M=M+1
  11169   |    4     |  @4
  11170   |          |  D=M
  11171   |    0     |  @0
  11172   |          |  A=M
  11173   |          |  M=D
  11174   |    0     |  @0
  11175   |          |  M=M+1
  11176   |    0     |  @0
  11177   |          |  D=M
  11178   |    2     |  @2
  11179   |          |  M=D
  11180   |    7     |  @7
  11181   |          |  D=A
  11182   |    2     |  @2
  11183   |          |  M=M-D
  11184   |    0     |  @0
  11185   |          |  D=M
  11186   |    1     |  @1
  11187   |          |  M=D
  11188   | RAM[27]  |  @String.appendChar
  11189   |          |  0;JMP
  11190   |ROM[11189]|  (String.appendChar$ret.88)
          |          |        // push constant 101
  11190   |   101    |  @101
  11191   |          |  D=A
  11192   |    0     |  @0
  11193   |          |  A=M
  11194   |          |  M=D
  11195   |    0     |  @0
  11196   |          |  M=M+1
          |          |        // call String.appendChar 2
  11197   |RAM[11245]|  @String.appendChar$ret.89
  11198   |          |  D=A
  11199   |    0     |  @0
  11200   |          |  A=M
  11201   |          |  M=D
  11202   |    0     |  @0
  11203   |          |  M=M+1
  11204   |    1     |  @1
  11205   |          |  D=M
  11206   |    0     |  @0
  11207   |          |  A=M
  11208   |          |  M=D
  11209   |    0     |  @0
  11210   |          |  M=M+1
  11211   |    2     |  @2
  11212   |          |  D=M
  11213   |    0     |  @0
  11214   |          |  A=M
  11215   |          |  M=D
  11216   |    0     |  @0
  11217   |          |  M=M+1
  11218   |    3     |  @3
  11219   |          |  D=M
  11220   |    0     |  @0
  11221   |          |  A=M
  11222   |          |  M=D
  11223   |    0     |  @0
  11224   |          |  M=M+1
  11225   |    4     |  @4
  11226   |          |  D=M
  11227   |    0     |  @0
  11228   |          |  A=M
  11229   |          |  M=D
  11230   |    0     |  @0
  11231   |          |  M=M+1
  11232   |    0     |  @0
  11233   |          |  D=M
  11234   |    2     |  @2
  11235   |          |  M=D
  11236   |    7     |  @7
  11237   |          |  D=A
  11238   |    2     |  @2
  11239   |          |  M=M-D
  11240   |    0     |  @0
  11241   |          |  D=M
  11242   |    1     |  @1
  11243   |          |  M=D
  11244   | RAM[27]  |  @String.appendChar
  11245   |          |  0;JMP
  11246   |ROM[11245]|  (String.appendChar$ret.89)
          |          |        // push constant 32
  11246   |    32    |  @32
  11247   |          |  D=A
  11248   |    0     |  @0
  11249   |          |  A=M
  11250   |          |  M=D
  11251   |    0     |  @0
  11252   |          |  M=M+1
          |          |        // call String.appendChar 2
  11253   |RAM[11301]|  @String.appendChar$ret.90
  11254   |          |  D=A
  11255   |    0     |  @0
  11256   |          |  A=M
  11257   |          |  M=D
  11258   |    0     |  @0
  11259   |          |  M=M+1
  11260   |    1     |  @1
  11261   |          |  D=M
  11262   |    0     |  @0
  11263   |          |  A=M
  11264   |          |  M=D
  11265   |    0     |  @0
  11266   |          |  M=M+1
  11267   |    2     |  @2
  11268   |          |  D=M
  11269   |    0     |  @0
  11270   |          |  A=M
  11271   |          |  M=D
  11272   |    0     |  @0
  11273   |          |  M=M+1
  11274   |    3     |  @3
  11275   |          |  D=M
  11276   |    0     |  @0
  11277   |          |  A=M
  11278   |          |  M=D
  11279   |    0     |  @0
  11280   |          |  M=M+1
  11281   |    4     |  @4
  11282   |          |  D=M
  11283   |    0     |  @0
  11284   |          |  A=M
  11285   |          |  M=D
  11286   |    0     |  @0
  11287   |          |  M=M+1
  11288   |    0     |  @0
  11289   |          |  D=M
  11290   |    2     |  @2
  11291   |          |  M=D
  11292   |    7     |  @7
  11293   |          |  D=A
  11294   |    2     |  @2
  11295   |          |  M=M-D
  11296   |    0     |  @0
  11297   |          |  D=M
  11298   |    1     |  @1
  11299   |          |  M=D
  11300   | RAM[27]  |  @String.appendChar
  11301   |          |  0;JMP
  11302   |ROM[11301]|  (String.appendChar$ret.90)
          |          |        // push constant 79
  11302   |    79    |  @79
  11303   |          |  D=A
  11304   |    0     |  @0
  11305   |          |  A=M
  11306   |          |  M=D
  11307   |    0     |  @0
  11308   |          |  M=M+1
          |          |        // call String.appendChar 2
  11309   |RAM[11357]|  @String.appendChar$ret.91
  11310   |          |  D=A
  11311   |    0     |  @0
  11312   |          |  A=M
  11313   |          |  M=D
  11314   |    0     |  @0
  11315   |          |  M=M+1
  11316   |    1     |  @1
  11317   |          |  D=M
  11318   |    0     |  @0
  11319   |          |  A=M
  11320   |          |  M=D
  11321   |    0     |  @0
  11322   |          |  M=M+1
  11323   |    2     |  @2
  11324   |          |  D=M
  11325   |    0     |  @0
  11326   |          |  A=M
  11327   |          |  M=D
  11328   |    0     |  @0
  11329   |          |  M=M+1
  11330   |    3     |  @3
  11331   |          |  D=M
  11332   |    0     |  @0
  11333   |          |  A=M
  11334   |          |  M=D
  11335   |    0     |  @0
  11336   |          |  M=M+1
  11337   |    4     |  @4
  11338   |          |  D=M
  11339   |    0     |  @0
  11340   |          |  A=M
  11341   |          |  M=D
  11342   |    0     |  @0
  11343   |          |  M=M+1
  11344   |    0     |  @0
  11345   |          |  D=M
  11346   |    2     |  @2
  11347   |          |  M=D
  11348   |    7     |  @7
  11349   |          |  D=A
  11350   |    2     |  @2
  11351   |          |  M=M-D
  11352   |    0     |  @0
  11353   |          |  D=M
  11354   |    1     |  @1
  11355   |          |  M=D
  11356   | RAM[27]  |  @String.appendChar
  11357   |          |  0;JMP
  11358   |ROM[11357]|  (String.appendChar$ret.91)
          |          |        // push constant 118
  11358   |   118    |  @118
  11359   |          |  D=A
  11360   |    0     |  @0
  11361   |          |  A=M
  11362   |          |  M=D
  11363   |    0     |  @0
  11364   |          |  M=M+1
          |          |        // call String.appendChar 2
  11365   |RAM[11413]|  @String.appendChar$ret.92
  11366   |          |  D=A
  11367   |    0     |  @0
  11368   |          |  A=M
  11369   |          |  M=D
  11370   |    0     |  @0
  11371   |          |  M=M+1
  11372   |    1     |  @1
  11373   |          |  D=M
  11374   |    0     |  @0
  11375   |          |  A=M
  11376   |          |  M=D
  11377   |    0     |  @0
  11378   |          |  M=M+1
  11379   |    2     |  @2
  11380   |          |  D=M
  11381   |    0     |  @0
  11382   |          |  A=M
  11383   |          |  M=D
  11384   |    0     |  @0
  11385   |          |  M=M+1
  11386   |    3     |  @3
  11387   |          |  D=M
  11388   |    0     |  @0
  11389   |          |  A=M
  11390   |          |  M=D
  11391   |    0     |  @0
  11392   |          |  M=M+1
  11393   |    4     |  @4
  11394   |          |  D=M
  11395   |    0     |  @0
  11396   |          |  A=M
  11397   |          |  M=D
  11398   |    0     |  @0
  11399   |          |  M=M+1
  11400   |    0     |  @0
  11401   |          |  D=M
  11402   |    2     |  @2
  11403   |          |  M=D
  11404   |    7     |  @7
  11405   |          |  D=A
  11406   |    2     |  @2
  11407   |          |  M=M-D
  11408   |    0     |  @0
  11409   |          |  D=M
  11410   |    1     |  @1
  11411   |          |  M=D
  11412   | RAM[27]  |  @String.appendChar
  11413   |          |  0;JMP
  11414   |ROM[11413]|  (String.appendChar$ret.92)
          |          |        // push constant 101
  11414   |   101    |  @101
  11415   |          |  D=A
  11416   |    0     |  @0
  11417   |          |  A=M
  11418   |          |  M=D
  11419   |    0     |  @0
  11420   |          |  M=M+1
          |          |        // call String.appendChar 2
  11421   |RAM[11469]|  @String.appendChar$ret.93
  11422   |          |  D=A
  11423   |    0     |  @0
  11424   |          |  A=M
  11425   |          |  M=D
  11426   |    0     |  @0
  11427   |          |  M=M+1
  11428   |    1     |  @1
  11429   |          |  D=M
  11430   |    0     |  @0
  11431   |          |  A=M
  11432   |          |  M=D
  11433   |    0     |  @0
  11434   |          |  M=M+1
  11435   |    2     |  @2
  11436   |          |  D=M
  11437   |    0     |  @0
  11438   |          |  A=M
  11439   |          |  M=D
  11440   |    0     |  @0
  11441   |          |  M=M+1
  11442   |    3     |  @3
  11443   |          |  D=M
  11444   |    0     |  @0
  11445   |          |  A=M
  11446   |          |  M=D
  11447   |    0     |  @0
  11448   |          |  M=M+1
  11449   |    4     |  @4
  11450   |          |  D=M
  11451   |    0     |  @0
  11452   |          |  A=M
  11453   |          |  M=D
  11454   |    0     |  @0
  11455   |          |  M=M+1
  11456   |    0     |  @0
  11457   |          |  D=M
  11458   |    2     |  @2
  11459   |          |  M=D
  11460   |    7     |  @7
  11461   |          |  D=A
  11462   |    2     |  @2
  11463   |          |  M=M-D
  11464   |    0     |  @0
  11465   |          |  D=M
  11466   |    1     |  @1
  11467   |          |  M=D
  11468   | RAM[27]  |  @String.appendChar
  11469   |          |  0;JMP
  11470   |ROM[11469]|  (String.appendChar$ret.93)
          |          |        // push constant 114
  11470   |   114    |  @114
  11471   |          |  D=A
  11472   |    0     |  @0
  11473   |          |  A=M
  11474   |          |  M=D
  11475   |    0     |  @0
  11476   |          |  M=M+1
          |          |        // call String.appendChar 2
  11477   |RAM[11525]|  @String.appendChar$ret.94
  11478   |          |  D=A
  11479   |    0     |  @0
  11480   |          |  A=M
  11481   |          |  M=D
  11482   |    0     |  @0
  11483   |          |  M=M+1
  11484   |    1     |  @1
  11485   |          |  D=M
  11486   |    0     |  @0
  11487   |          |  A=M
  11488   |          |  M=D
  11489   |    0     |  @0
  11490   |          |  M=M+1
  11491   |    2     |  @2
  11492   |          |  D=M
  11493   |    0     |  @0
  11494   |          |  A=M
  11495   |          |  M=D
  11496   |    0     |  @0
  11497   |          |  M=M+1
  11498   |    3     |  @3
  11499   |          |  D=M
  11500   |    0     |  @0
  11501   |          |  A=M
  11502   |          |  M=D
  11503   |    0     |  @0
  11504   |          |  M=M+1
  11505   |    4     |  @4
  11506   |          |  D=M
  11507   |    0     |  @0
  11508   |          |  A=M
  11509   |          |  M=D
  11510   |    0     |  @0
  11511   |          |  M=M+1
  11512   |    0     |  @0
  11513   |          |  D=M
  11514   |    2     |  @2
  11515   |          |  M=D
  11516   |    7     |  @7
  11517   |          |  D=A
  11518   |    2     |  @2
  11519   |          |  M=M-D
  11520   |    0     |  @0
  11521   |          |  D=M
  11522   |    1     |  @1
  11523   |          |  M=D
  11524   | RAM[27]  |  @String.appendChar
  11525   |          |  0;JMP
  11526   |ROM[11525]|  (String.appendChar$ret.94)
          |          |        // call Output.printString 1
  11526   |RAM[11574]|  @Output.printString$ret.95
  11527   |          |  D=A
  11528   |    0     |  @0
  11529   |          |  A=M
  11530   |          |  M=D
  11531   |    0     |  @0
  11532   |          |  M=M+1
  11533   |    1     |  @1
  11534   |          |  D=M
  11535   |    0     |  @0
  11536   |          |  A=M
  11537   |          |  M=D
  11538   |    0     |  @0
  11539   |          |  M=M+1
  11540   |    2     |  @2
  11541   |          |  D=M
  11542   |    0     |  @0
  11543   |          |  A=M
  11544   |          |  M=D
  11545   |    0     |  @0
  11546   |          |  M=M+1
  11547   |    3     |  @3
  11548   |          |  D=M
  11549   |    0     |  @0
  11550   |          |  A=M
  11551   |          |  M=D
  11552   |    0     |  @0
  11553   |          |  M=M+1
  11554   |    4     |  @4
  11555   |          |  D=M
  11556   |    0     |  @0
  11557   |          |  A=M
  11558   |          |  M=D
  11559   |    0     |  @0
  11560   |          |  M=M+1
  11561   |    0     |  @0
  11562   |          |  D=M
  11563   |    2     |  @2
  11564   |          |  M=D
  11565   |    6     |  @6
  11566   |          |  D=A
  11567   |    2     |  @2
  11568   |          |  M=M-D
  11569   |    0     |  @0
  11570   |          |  D=M
  11571   |    1     |  @1
  11572   |          |  M=D
  11573   | RAM[28]  |  @Output.printString
  11574   |          |  0;JMP
  11575   |ROM[11574]|  (Output.printString$ret.95)
          |          |        // pop temp 0
  11575   |    0     |  @0
  11576   |          |  D=A
  11577   |    5     |  @5
  11578   |          |  D=D+A
  11579   | RAM[13]  |  @R13
  11580   |          |  M=D
  11581   |    0     |  @0
  11582   |          |  AM=M-1
  11583   |          |  D=M
  11584   | RAM[13]  |  @R13
  11585   |          |  A=M
  11586   |          |  M=D
          |          |        // goto PongGame.run_TRUE_3
  11587   |RAM[11588]|  @PongGame.run_TRUE_3
  11588   |          |  0;JMP
          |          |        // label PongGame.run_FALSE_3
  11589   |ROM[11588]|  (PongGame.run_FALSE_3)
          |          |        // label PongGame.run_TRUE_3
  11589   |ROM[11588]|  (PongGame.run_TRUE_3)
          |          |        // push constant 0
  11589   |    0     |  @0
  11590   |          |  D=A
  11591   |    0     |  @0
  11592   |          |  A=M
  11593   |          |  M=D
  11594   |    0     |  @0
  11595   |          |  M=M+1
          |          |        // return
  11596   |    1     |  @1
  11597   |          |  D=M
  11598   |    13    |  @13
  11599   |          |  M=D
  11600   |    5     |  @5
  11601   |          |  D=A
  11602   |    13    |  @13
  11603   |          |  D=M-D
  11604   |          |  A=D
  11605   |          |  D=M
  11606   |    14    |  @14
  11607   |          |  M=D
  11608   |    0     |  @0
  11609   |          |  AM=M-1
  11610   |          |  D=M
  11611   |    2     |  @2
  11612   |          |  A=M
  11613   |          |  M=D
  11614   |    2     |  @2
  11615   |          |  D=M+1
  11616   |    0     |  @0
  11617   |          |  M=D
  11618   |    13    |  @13
  11619   |          |  M=M-1
  11620   |          |  A=M
  11621   |          |  D=M
  11622   |    4     |  @4
  11623   |          |  M=D
  11624   |    13    |  @13
  11625   |          |  M=M-1
  11626   |          |  A=M
  11627   |          |  D=M
  11628   |    3     |  @3
  11629   |          |  M=D
  11630   |    13    |  @13
  11631   |          |  M=M-1
  11632   |          |  A=M
  11633   |          |  D=M
  11634   |    2     |  @2
  11635   |          |  M=D
  11636   |    13    |  @13
  11637   |          |  M=M-1
  11638   |          |  A=M
  11639   |          |  D=M
  11640   |    1     |  @1
  11641   |          |  M=D
  11642   |    14    |  @14
  11643   |          |  A=M
  11644   |          |  0;JMP
          |          |        // /**
          |          |        // * Handles ball movement, including bouncing.
          |          |        // * If the ball bounces off a wall, finds its new direction.
          |          |        // * If the ball bounces off the bat, increases the score by one
          |          |        // * and shrinks the bat's size, to make the game more challenging.
          |          |        // */
          |          |        // function PongGame.moveBall 5
  11645   |ROM[11644]|  (PongGame.moveBall)
  11645   |    0     |  @0
  11646   |          |  D=M
  11647   |    1     |  @1
  11648   |          |  M=D
  11649   |    0     |  @0
  11650   |          |  A=M
  11651   |          |  M=0
  11652   |    0     |  @0
  11653   |          |  M=M+1
  11654   |    0     |  @0
  11655   |          |  A=M
  11656   |          |  M=0
  11657   |    0     |  @0
  11658   |          |  M=M+1
  11659   |    0     |  @0
  11660   |          |  A=M
  11661   |          |  M=0
  11662   |    0     |  @0
  11663   |          |  M=M+1
  11664   |    0     |  @0
  11665   |          |  A=M
  11666   |          |  M=0
  11667   |    0     |  @0
  11668   |          |  M=M+1
  11669   |    0     |  @0
  11670   |          |  A=M
  11671   |          |  M=0
  11672   |    0     |  @0
  11673   |          |  M=M+1
          |          |        // /*
          |          |        // ARG    PongGame this              -> argument 0
          |          |        // VAR    int      bouncingDirection -> local    0
          |          |        // VAR    int      batLeft           -> local    1
          |          |        // VAR    int      batRight          -> local    2
          |          |        // VAR    int      ballLeft          -> local    3
          |          |        // VAR    int      ballRight         -> local    4
          |          |        // */
          |          |        // push argument 0
  11674   |    0     |  @0
  11675   |          |  D=A
  11676   |    2     |  @2
  11677   |          |  A=M
  11678   |          |  A=A+D
  11679   |          |  D=M
  11680   |    0     |  @0
  11681   |          |  A=M
  11682   |          |  M=D
  11683   |    0     |  @0
  11684   |          |  M=M+1
          |          |        // pop pointer 0
  11685   |    0     |  @0
  11686   |          |  AM=M-1
  11687   |          |  D=M
  11688   |    3     |  @3
  11689   |          |  M=D
          |          |        // push this 1
  11690   |    1     |  @1
  11691   |          |  D=A
  11692   |    3     |  @3
  11693   |          |  A=M
  11694   |          |  A=A+D
  11695   |          |  D=M
  11696   |    0     |  @0
  11697   |          |  A=M
  11698   |          |  M=D
  11699   |    0     |  @0
  11700   |          |  M=M+1
          |          |        // call Ball.move 1
  11701   |RAM[11749]|  @Ball.move$ret.96
  11702   |          |  D=A
  11703   |    0     |  @0
  11704   |          |  A=M
  11705   |          |  M=D
  11706   |    0     |  @0
  11707   |          |  M=M+1
  11708   |    1     |  @1
  11709   |          |  D=M
  11710   |    0     |  @0
  11711   |          |  A=M
  11712   |          |  M=D
  11713   |    0     |  @0
  11714   |          |  M=M+1
  11715   |    2     |  @2
  11716   |          |  D=M
  11717   |    0     |  @0
  11718   |          |  A=M
  11719   |          |  M=D
  11720   |    0     |  @0
  11721   |          |  M=M+1
  11722   |    3     |  @3
  11723   |          |  D=M
  11724   |    0     |  @0
  11725   |          |  A=M
  11726   |          |  M=D
  11727   |    0     |  @0
  11728   |          |  M=M+1
  11729   |    4     |  @4
  11730   |          |  D=M
  11731   |    0     |  @0
  11732   |          |  A=M
  11733   |          |  M=D
  11734   |    0     |  @0
  11735   |          |  M=M+1
  11736   |    0     |  @0
  11737   |          |  D=M
  11738   |    2     |  @2
  11739   |          |  M=D
  11740   |    6     |  @6
  11741   |          |  D=A
  11742   |    2     |  @2
  11743   |          |  M=M-D
  11744   |    0     |  @0
  11745   |          |  D=M
  11746   |    1     |  @1
  11747   |          |  M=D
  11748   |RAM[2275] |  @Ball.move
  11749   |          |  0;JMP
  11750   |ROM[11749]|  (Ball.move$ret.96)
          |          |        // pop this 2
  11750   |    2     |  @2
  11751   |          |  D=A
  11752   |    3     |  @3
  11753   |          |  D=D+M
  11754   | RAM[13]  |  @R13
  11755   |          |  M=D
  11756   |    0     |  @0
  11757   |          |  AM=M-1
  11758   |          |  D=M
  11759   | RAM[13]  |  @R13
  11760   |          |  A=M
  11761   |          |  M=D
          |          |        // push this 2
  11762   |    2     |  @2
  11763   |          |  D=A
  11764   |    3     |  @3
  11765   |          |  A=M
  11766   |          |  A=A+D
  11767   |          |  D=M
  11768   |    0     |  @0
  11769   |          |  A=M
  11770   |          |  M=D
  11771   |    0     |  @0
  11772   |          |  M=M+1
          |          |        // push constant 0
  11773   |    0     |  @0
  11774   |          |  D=A
  11775   |    0     |  @0
  11776   |          |  A=M
  11777   |          |  M=D
  11778   |    0     |  @0
  11779   |          |  M=M+1
          |          |        // gt
  11780   |    0     |  @0
  11781   |          |  AM=M-1
  11782   |          |  D=M
  11783   |          |  A=A-1
  11784   |          |  D=M-D
  11785   |          |  M=-1
  11786   |RAM[11790]|  @T26
  11787   |          |  D;JGT
  11788   |    0     |  @0
  11789   |          |  A=M-1
  11790   |          |  M=0
  11791   |ROM[11790]|  (T26)
          |          |        // push this 2
  11791   |    2     |  @2
  11792   |          |  D=A
  11793   |    3     |  @3
  11794   |          |  A=M
  11795   |          |  A=A+D
  11796   |          |  D=M
  11797   |    0     |  @0
  11798   |          |  A=M
  11799   |          |  M=D
  11800   |    0     |  @0
  11801   |          |  M=M+1
          |          |        // push this 5
  11802   |    5     |  @5
  11803   |          |  D=A
  11804   |    3     |  @3
  11805   |          |  A=M
  11806   |          |  A=A+D
  11807   |          |  D=M
  11808   |    0     |  @0
  11809   |          |  A=M
  11810   |          |  M=D
  11811   |    0     |  @0
  11812   |          |  M=M+1
          |          |        // eq
  11813   |    0     |  @0
  11814   |          |  AM=M-1
  11815   |          |  D=M
  11816   |          |  A=A-1
  11817   |          |  D=M-D
  11818   |          |  M=-1
  11819   |RAM[11823]|  @T27
  11820   |          |  D;JEQ
  11821   |    0     |  @0
  11822   |          |  A=M-1
  11823   |          |  M=0
  11824   |ROM[11823]|  (T27)
          |          |        // not
  11824   |    0     |  @0
  11825   |          |  A=M-1
  11826   |          |  M=!M
          |          |        // and
  11827   |    0     |  @0
  11828   |          |  AM=M-1
  11829   |          |  D=M
  11830   |          |  A=A-1
  11831   |          |  M=M&D
          |          |        // not
  11832   |    0     |  @0
  11833   |          |  A=M-1
  11834   |          |  M=!M
          |          |        // if-goto PongGame.moveBall_FALSE_0
  11835   |    0     |  @0
  11836   |          |  AM=M-1
  11837   |          |  D=M
  11838   |RAM[12851]|  @PongGame.moveBall_FALSE_0
  11839   |          |  D;JNE
          |          |        // push this 2
  11840   |    2     |  @2
  11841   |          |  D=A
  11842   |    3     |  @3
  11843   |          |  A=M
  11844   |          |  A=A+D
  11845   |          |  D=M
  11846   |    0     |  @0
  11847   |          |  A=M
  11848   |          |  M=D
  11849   |    0     |  @0
  11850   |          |  M=M+1
          |          |        // pop this 5
  11851   |    5     |  @5
  11852   |          |  D=A
  11853   |    3     |  @3
  11854   |          |  D=D+M
  11855   | RAM[13]  |  @R13
  11856   |          |  M=D
  11857   |    0     |  @0
  11858   |          |  AM=M-1
  11859   |          |  D=M
  11860   | RAM[13]  |  @R13
  11861   |          |  A=M
  11862   |          |  M=D
          |          |        // push constant 0
  11863   |    0     |  @0
  11864   |          |  D=A
  11865   |    0     |  @0
  11866   |          |  A=M
  11867   |          |  M=D
  11868   |    0     |  @0
  11869   |          |  M=M+1
          |          |        // pop local 0
  11870   |    0     |  @0
  11871   |          |  D=A
  11872   |    1     |  @1
  11873   |          |  D=D+M
  11874   | RAM[13]  |  @R13
  11875   |          |  M=D
  11876   |    0     |  @0
  11877   |          |  AM=M-1
  11878   |          |  D=M
  11879   | RAM[13]  |  @R13
  11880   |          |  A=M
  11881   |          |  M=D
          |          |        // push this 0
  11882   |    0     |  @0
  11883   |          |  D=A
  11884   |    3     |  @3
  11885   |          |  A=M
  11886   |          |  A=A+D
  11887   |          |  D=M
  11888   |    0     |  @0
  11889   |          |  A=M
  11890   |          |  M=D
  11891   |    0     |  @0
  11892   |          |  M=M+1
          |          |        // call Bat.getLeft 1
  11893   |RAM[11941]|  @Bat.getLeft$ret.97
  11894   |          |  D=A
  11895   |    0     |  @0
  11896   |          |  A=M
  11897   |          |  M=D
  11898   |    0     |  @0
  11899   |          |  M=M+1
  11900   |    1     |  @1
  11901   |          |  D=M
  11902   |    0     |  @0
  11903   |          |  A=M
  11904   |          |  M=D
  11905   |    0     |  @0
  11906   |          |  M=M+1
  11907   |    2     |  @2
  11908   |          |  D=M
  11909   |    0     |  @0
  11910   |          |  A=M
  11911   |          |  M=D
  11912   |    0     |  @0
  11913   |          |  M=M+1
  11914   |    3     |  @3
  11915   |          |  D=M
  11916   |    0     |  @0
  11917   |          |  A=M
  11918   |          |  M=D
  11919   |    0     |  @0
  11920   |          |  M=M+1
  11921   |    4     |  @4
  11922   |          |  D=M
  11923   |    0     |  @0
  11924   |          |  A=M
  11925   |          |  M=D
  11926   |    0     |  @0
  11927   |          |  M=M+1
  11928   |    0     |  @0
  11929   |          |  D=M
  11930   |    2     |  @2
  11931   |          |  M=D
  11932   |    6     |  @6
  11933   |          |  D=A
  11934   |    2     |  @2
  11935   |          |  M=M-D
  11936   |    0     |  @0
  11937   |          |  D=M
  11938   |    1     |  @1
  11939   |          |  M=D
  11940   |RAM[6243] |  @Bat.getLeft
  11941   |          |  0;JMP
  11942   |ROM[11941]|  (Bat.getLeft$ret.97)
          |          |        // pop local 1
  11942   |    1     |  @1
  11943   |          |  D=A
  11944   |    1     |  @1
  11945   |          |  D=D+M
  11946   | RAM[13]  |  @R13
  11947   |          |  M=D
  11948   |    0     |  @0
  11949   |          |  AM=M-1
  11950   |          |  D=M
  11951   | RAM[13]  |  @R13
  11952   |          |  A=M
  11953   |          |  M=D
          |          |        // push this 0
  11954   |    0     |  @0
  11955   |          |  D=A
  11956   |    3     |  @3
  11957   |          |  A=M
  11958   |          |  A=A+D
  11959   |          |  D=M
  11960   |    0     |  @0
  11961   |          |  A=M
  11962   |          |  M=D
  11963   |    0     |  @0
  11964   |          |  M=M+1
          |          |        // call Bat.getRight 1
  11965   |RAM[12013]|  @Bat.getRight$ret.98
  11966   |          |  D=A
  11967   |    0     |  @0
  11968   |          |  A=M
  11969   |          |  M=D
  11970   |    0     |  @0
  11971   |          |  M=M+1
  11972   |    1     |  @1
  11973   |          |  D=M
  11974   |    0     |  @0
  11975   |          |  A=M
  11976   |          |  M=D
  11977   |    0     |  @0
  11978   |          |  M=M+1
  11979   |    2     |  @2
  11980   |          |  D=M
  11981   |    0     |  @0
  11982   |          |  A=M
  11983   |          |  M=D
  11984   |    0     |  @0
  11985   |          |  M=M+1
  11986   |    3     |  @3
  11987   |          |  D=M
  11988   |    0     |  @0
  11989   |          |  A=M
  11990   |          |  M=D
  11991   |    0     |  @0
  11992   |          |  M=M+1
  11993   |    4     |  @4
  11994   |          |  D=M
  11995   |    0     |  @0
  11996   |          |  A=M
  11997   |          |  M=D
  11998   |    0     |  @0
  11999   |          |  M=M+1
  12000   |    0     |  @0
  12001   |          |  D=M
  12002   |    2     |  @2
  12003   |          |  M=D
  12004   |    6     |  @6
  12005   |          |  D=A
  12006   |    2     |  @2
  12007   |          |  M=M-D
  12008   |    0     |  @0
  12009   |          |  D=M
  12010   |    1     |  @1
  12011   |          |  M=D
  12012   |RAM[6323] |  @Bat.getRight
  12013   |          |  0;JMP
  12014   |ROM[12013]|  (Bat.getRight$ret.98)
          |          |        // pop local 2
  12014   |    2     |  @2
  12015   |          |  D=A
  12016   |    1     |  @1
  12017   |          |  D=D+M
  12018   | RAM[13]  |  @R13
  12019   |          |  M=D
  12020   |    0     |  @0
  12021   |          |  AM=M-1
  12022   |          |  D=M
  12023   | RAM[13]  |  @R13
  12024   |          |  A=M
  12025   |          |  M=D
          |          |        // push this 1
  12026   |    1     |  @1
  12027   |          |  D=A
  12028   |    3     |  @3
  12029   |          |  A=M
  12030   |          |  A=A+D
  12031   |          |  D=M
  12032   |    0     |  @0
  12033   |          |  A=M
  12034   |          |  M=D
  12035   |    0     |  @0
  12036   |          |  M=M+1
          |          |        // call Ball.getLeft 1
  12037   |RAM[12085]|  @Ball.getLeft$ret.99
  12038   |          |  D=A
  12039   |    0     |  @0
  12040   |          |  A=M
  12041   |          |  M=D
  12042   |    0     |  @0
  12043   |          |  M=M+1
  12044   |    1     |  @1
  12045   |          |  D=M
  12046   |    0     |  @0
  12047   |          |  A=M
  12048   |          |  M=D
  12049   |    0     |  @0
  12050   |          |  M=M+1
  12051   |    2     |  @2
  12052   |          |  D=M
  12053   |    0     |  @0
  12054   |          |  A=M
  12055   |          |  M=D
  12056   |    0     |  @0
  12057   |          |  M=M+1
  12058   |    3     |  @3
  12059   |          |  D=M
  12060   |    0     |  @0
  12061   |          |  A=M
  12062   |          |  M=D
  12063   |    0     |  @0
  12064   |          |  M=M+1
  12065   |    4     |  @4
  12066   |          |  D=M
  12067   |    0     |  @0
  12068   |          |  A=M
  12069   |          |  M=D
  12070   |    0     |  @0
  12071   |          |  M=M+1
  12072   |    0     |  @0
  12073   |          |  D=M
  12074   |    2     |  @2
  12075   |          |  M=D
  12076   |    6     |  @6
  12077   |          |  D=A
  12078   |    2     |  @2
  12079   |          |  M=M-D
  12080   |    0     |  @0
  12081   |          |  D=M
  12082   |    1     |  @1
  12083   |          |  M=D
  12084   |RAM[1206] |  @Ball.getLeft
  12085   |          |  0;JMP
  12086   |ROM[12085]|  (Ball.getLeft$ret.99)
          |          |        // pop local 3
  12086   |    3     |  @3
  12087   |          |  D=A
  12088   |    1     |  @1
  12089   |          |  D=D+M
  12090   | RAM[13]  |  @R13
  12091   |          |  M=D
  12092   |    0     |  @0
  12093   |          |  AM=M-1
  12094   |          |  D=M
  12095   | RAM[13]  |  @R13
  12096   |          |  A=M
  12097   |          |  M=D
          |          |        // push this 1
  12098   |    1     |  @1
  12099   |          |  D=A
  12100   |    3     |  @3
  12101   |          |  A=M
  12102   |          |  A=A+D
  12103   |          |  D=M
  12104   |    0     |  @0
  12105   |          |  A=M
  12106   |          |  M=D
  12107   |    0     |  @0
  12108   |          |  M=M+1
          |          |        // call Ball.getRight 1
  12109   |RAM[12157]|  @Ball.getRight$ret.100
  12110   |          |  D=A
  12111   |    0     |  @0
  12112   |          |  A=M
  12113   |          |  M=D
  12114   |    0     |  @0
  12115   |          |  M=M+1
  12116   |    1     |  @1
  12117   |          |  D=M
  12118   |    0     |  @0
  12119   |          |  A=M
  12120   |          |  M=D
  12121   |    0     |  @0
  12122   |          |  M=M+1
  12123   |    2     |  @2
  12124   |          |  D=M
  12125   |    0     |  @0
  12126   |          |  A=M
  12127   |          |  M=D
  12128   |    0     |  @0
  12129   |          |  M=M+1
  12130   |    3     |  @3
  12131   |          |  D=M
  12132   |    0     |  @0
  12133   |          |  A=M
  12134   |          |  M=D
  12135   |    0     |  @0
  12136   |          |  M=M+1
  12137   |    4     |  @4
  12138   |          |  D=M
  12139   |    0     |  @0
  12140   |          |  A=M
  12141   |          |  M=D
  12142   |    0     |  @0
  12143   |          |  M=M+1
  12144   |    0     |  @0
  12145   |          |  D=M
  12146   |    2     |  @2
  12147   |          |  M=D
  12148   |    6     |  @6
  12149   |          |  D=A
  12150   |    2     |  @2
  12151   |          |  M=M-D
  12152   |    0     |  @0
  12153   |          |  D=M
  12154   |    1     |  @1
  12155   |          |  M=D
  12156   |RAM[1286] |  @Ball.getRight
  12157   |          |  0;JMP
  12158   |ROM[12157]|  (Ball.getRight$ret.100)
          |          |        // pop local 4
  12158   |    4     |  @4
  12159   |          |  D=A
  12160   |    1     |  @1
  12161   |          |  D=D+M
  12162   | RAM[13]  |  @R13
  12163   |          |  M=D
  12164   |    0     |  @0
  12165   |          |  AM=M-1
  12166   |          |  D=M
  12167   | RAM[13]  |  @R13
  12168   |          |  A=M
  12169   |          |  M=D
          |          |        // push this 2
  12170   |    2     |  @2
  12171   |          |  D=A
  12172   |    3     |  @3
  12173   |          |  A=M
  12174   |          |  A=A+D
  12175   |          |  D=M
  12176   |    0     |  @0
  12177   |          |  A=M
  12178   |          |  M=D
  12179   |    0     |  @0
  12180   |          |  M=M+1
          |          |        // push constant 4
  12181   |    4     |  @4
  12182   |          |  D=A
  12183   |    0     |  @0
  12184   |          |  A=M
  12185   |          |  M=D
  12186   |    0     |  @0
  12187   |          |  M=M+1
          |          |        // eq
  12188   |    0     |  @0
  12189   |          |  AM=M-1
  12190   |          |  D=M
  12191   |          |  A=A-1
  12192   |          |  D=M-D
  12193   |          |  M=-1
  12194   |RAM[12198]|  @T28
  12195   |          |  D;JEQ
  12196   |    0     |  @0
  12197   |          |  A=M-1
  12198   |          |  M=0
  12199   |ROM[12198]|  (T28)
          |          |        // not
  12199   |    0     |  @0
  12200   |          |  A=M-1
  12201   |          |  M=!M
          |          |        // if-goto PongGame.moveBall_FALSE_1
  12202   |    0     |  @0
  12203   |          |  AM=M-1
  12204   |          |  D=M
  12205   |RAM[12766]|  @PongGame.moveBall_FALSE_1
  12206   |          |  D;JNE
          |          |        // push local 1
  12207   |    1     |  @1
  12208   |          |  D=A
  12209   |    1     |  @1
  12210   |          |  A=M
  12211   |          |  A=A+D
  12212   |          |  D=M
  12213   |    0     |  @0
  12214   |          |  A=M
  12215   |          |  M=D
  12216   |    0     |  @0
  12217   |          |  M=M+1
          |          |        // push local 4
  12218   |    4     |  @4
  12219   |          |  D=A
  12220   |    1     |  @1
  12221   |          |  A=M
  12222   |          |  A=A+D
  12223   |          |  D=M
  12224   |    0     |  @0
  12225   |          |  A=M
  12226   |          |  M=D
  12227   |    0     |  @0
  12228   |          |  M=M+1
          |          |        // gt
  12229   |    0     |  @0
  12230   |          |  AM=M-1
  12231   |          |  D=M
  12232   |          |  A=A-1
  12233   |          |  D=M-D
  12234   |          |  M=-1
  12235   |RAM[12239]|  @T29
  12236   |          |  D;JGT
  12237   |    0     |  @0
  12238   |          |  A=M-1
  12239   |          |  M=0
  12240   |ROM[12239]|  (T29)
          |          |        // push local 2
  12240   |    2     |  @2
  12241   |          |  D=A
  12242   |    1     |  @1
  12243   |          |  A=M
  12244   |          |  A=A+D
  12245   |          |  D=M
  12246   |    0     |  @0
  12247   |          |  A=M
  12248   |          |  M=D
  12249   |    0     |  @0
  12250   |          |  M=M+1
          |          |        // push local 3
  12251   |    3     |  @3
  12252   |          |  D=A
  12253   |    1     |  @1
  12254   |          |  A=M
  12255   |          |  A=A+D
  12256   |          |  D=M
  12257   |    0     |  @0
  12258   |          |  A=M
  12259   |          |  M=D
  12260   |    0     |  @0
  12261   |          |  M=M+1
          |          |        // lt
  12262   |    0     |  @0
  12263   |          |  AM=M-1
  12264   |          |  D=M
  12265   |          |  A=A-1
  12266   |          |  D=M-D
  12267   |          |  M=-1
  12268   |RAM[12272]|  @T30
  12269   |          |  D;JLT
  12270   |    0     |  @0
  12271   |          |  A=M-1
  12272   |          |  M=0
  12273   |ROM[12272]|  (T30)
          |          |        // or
  12273   |    0     |  @0
  12274   |          |  AM=M-1
  12275   |          |  D=M
  12276   |          |  A=A-1
  12277   |          |  M=M|D
          |          |        // pop this 3
  12278   |    3     |  @3
  12279   |          |  D=A
  12280   |    3     |  @3
  12281   |          |  D=D+M
  12282   | RAM[13]  |  @R13
  12283   |          |  M=D
  12284   |    0     |  @0
  12285   |          |  AM=M-1
  12286   |          |  D=M
  12287   | RAM[13]  |  @R13
  12288   |          |  A=M
  12289   |          |  M=D
          |          |        // push this 3
  12290   |    3     |  @3
  12291   |          |  D=A
  12292   |    3     |  @3
  12293   |          |  A=M
  12294   |          |  A=A+D
  12295   |          |  D=M
  12296   |    0     |  @0
  12297   |          |  A=M
  12298   |          |  M=D
  12299   |    0     |  @0
  12300   |          |  M=M+1
          |          |        // not
  12301   |    0     |  @0
  12302   |          |  A=M-1
  12303   |          |  M=!M
          |          |        // not
  12304   |    0     |  @0
  12305   |          |  A=M-1
  12306   |          |  M=!M
          |          |        // if-goto PongGame.moveBall_FALSE_2
  12307   |    0     |  @0
  12308   |          |  AM=M-1
  12309   |          |  D=M
  12310   |RAM[12764]|  @PongGame.moveBall_FALSE_2
  12311   |          |  D;JNE
          |          |        // push local 4
  12312   |    4     |  @4
  12313   |          |  D=A
  12314   |    1     |  @1
  12315   |          |  A=M
  12316   |          |  A=A+D
  12317   |          |  D=M
  12318   |    0     |  @0
  12319   |          |  A=M
  12320   |          |  M=D
  12321   |    0     |  @0
  12322   |          |  M=M+1
          |          |        // push local 1
  12323   |    1     |  @1
  12324   |          |  D=A
  12325   |    1     |  @1
  12326   |          |  A=M
  12327   |          |  A=A+D
  12328   |          |  D=M
  12329   |    0     |  @0
  12330   |          |  A=M
  12331   |          |  M=D
  12332   |    0     |  @0
  12333   |          |  M=M+1
          |          |        // push constant 10
  12334   |    10    |  @10
  12335   |          |  D=A
  12336   |    0     |  @0
  12337   |          |  A=M
  12338   |          |  M=D
  12339   |    0     |  @0
  12340   |          |  M=M+1
          |          |        // add
  12341   |    0     |  @0
  12342   |          |  AM=M-1
  12343   |          |  D=M
  12344   |          |  A=A-1
  12345   |          |  M=M+D
          |          |        // lt
  12346   |    0     |  @0
  12347   |          |  AM=M-1
  12348   |          |  D=M
  12349   |          |  A=A-1
  12350   |          |  D=M-D
  12351   |          |  M=-1
  12352   |RAM[12356]|  @T31
  12353   |          |  D;JLT
  12354   |    0     |  @0
  12355   |          |  A=M-1
  12356   |          |  M=0
  12357   |ROM[12356]|  (T31)
          |          |        // not
  12357   |    0     |  @0
  12358   |          |  A=M-1
  12359   |          |  M=!M
          |          |        // if-goto PongGame.moveBall_FALSE_3
  12360   |    0     |  @0
  12361   |          |  AM=M-1
  12362   |          |  D=M
  12363   |RAM[12388]|  @PongGame.moveBall_FALSE_3
  12364   |          |  D;JNE
          |          |        // push constant 1
  12365   |    1     |  @1
  12366   |          |  D=A
  12367   |    0     |  @0
  12368   |          |  A=M
  12369   |          |  M=D
  12370   |    0     |  @0
  12371   |          |  M=M+1
          |          |        // neg
  12372   |    0     |  @0
  12373   |          |  A=M-1
  12374   |          |  M=-M
          |          |        // pop local 0
  12375   |    0     |  @0
  12376   |          |  D=A
  12377   |    1     |  @1
  12378   |          |  D=D+M
  12379   | RAM[13]  |  @R13
  12380   |          |  M=D
  12381   |    0     |  @0
  12382   |          |  AM=M-1
  12383   |          |  D=M
  12384   | RAM[13]  |  @R13
  12385   |          |  A=M
  12386   |          |  M=D
          |          |        // goto PongGame.moveBall_TRUE_3
  12387   |RAM[12462]|  @PongGame.moveBall_TRUE_3
  12388   |          |  0;JMP
          |          |        // label PongGame.moveBall_FALSE_3
  12389   |ROM[12388]|  (PongGame.moveBall_FALSE_3)
          |          |        // push local 3
  12389   |    3     |  @3
  12390   |          |  D=A
  12391   |    1     |  @1
  12392   |          |  A=M
  12393   |          |  A=A+D
  12394   |          |  D=M
  12395   |    0     |  @0
  12396   |          |  A=M
  12397   |          |  M=D
  12398   |    0     |  @0
  12399   |          |  M=M+1
          |          |        // push local 2
  12400   |    2     |  @2
  12401   |          |  D=A
  12402   |    1     |  @1
  12403   |          |  A=M
  12404   |          |  A=A+D
  12405   |          |  D=M
  12406   |    0     |  @0
  12407   |          |  A=M
  12408   |          |  M=D
  12409   |    0     |  @0
  12410   |          |  M=M+1
          |          |        // push constant 10
  12411   |    10    |  @10
  12412   |          |  D=A
  12413   |    0     |  @0
  12414   |          |  A=M
  12415   |          |  M=D
  12416   |    0     |  @0
  12417   |          |  M=M+1
          |          |        // sub
  12418   |    0     |  @0
  12419   |          |  AM=M-1
  12420   |          |  D=M
  12421   |          |  A=A-1
  12422   |          |  M=M-D
          |          |        // gt
  12423   |    0     |  @0
  12424   |          |  AM=M-1
  12425   |          |  D=M
  12426   |          |  A=A-1
  12427   |          |  D=M-D
  12428   |          |  M=-1
  12429   |RAM[12433]|  @T32
  12430   |          |  D;JGT
  12431   |    0     |  @0
  12432   |          |  A=M-1
  12433   |          |  M=0
  12434   |ROM[12433]|  (T32)
          |          |        // not
  12434   |    0     |  @0
  12435   |          |  A=M-1
  12436   |          |  M=!M
          |          |        // if-goto PongGame.moveBall_FALSE_4
  12437   |    0     |  @0
  12438   |          |  AM=M-1
  12439   |          |  D=M
  12440   |RAM[12462]|  @PongGame.moveBall_FALSE_4
  12441   |          |  D;JNE
          |          |        // push constant 1
  12442   |    1     |  @1
  12443   |          |  D=A
  12444   |    0     |  @0
  12445   |          |  A=M
  12446   |          |  M=D
  12447   |    0     |  @0
  12448   |          |  M=M+1
          |          |        // pop local 0
  12449   |    0     |  @0
  12450   |          |  D=A
  12451   |    1     |  @1
  12452   |          |  D=D+M
  12453   | RAM[13]  |  @R13
  12454   |          |  M=D
  12455   |    0     |  @0
  12456   |          |  AM=M-1
  12457   |          |  D=M
  12458   | RAM[13]  |  @R13
  12459   |          |  A=M
  12460   |          |  M=D
          |          |        // goto PongGame.moveBall_TRUE_4
  12461   |RAM[12462]|  @PongGame.moveBall_TRUE_4
  12462   |          |  0;JMP
          |          |        // label PongGame.moveBall_FALSE_4
  12463   |ROM[12462]|  (PongGame.moveBall_FALSE_4)
          |          |        // label PongGame.moveBall_TRUE_4
  12463   |ROM[12462]|  (PongGame.moveBall_TRUE_4)
          |          |        // label PongGame.moveBall_TRUE_3
  12463   |ROM[12462]|  (PongGame.moveBall_TRUE_3)
          |          |        // push this 6
  12463   |    6     |  @6
  12464   |          |  D=A
  12465   |    3     |  @3
  12466   |          |  A=M
  12467   |          |  A=A+D
  12468   |          |  D=M
  12469   |    0     |  @0
  12470   |          |  A=M
  12471   |          |  M=D
  12472   |    0     |  @0
  12473   |          |  M=M+1
          |          |        // push constant 2
  12474   |    2     |  @2
  12475   |          |  D=A
  12476   |    0     |  @0
  12477   |          |  A=M
  12478   |          |  M=D
  12479   |    0     |  @0
  12480   |          |  M=M+1
          |          |        // sub
  12481   |    0     |  @0
  12482   |          |  AM=M-1
  12483   |          |  D=M
  12484   |          |  A=A-1
  12485   |          |  M=M-D
          |          |        // pop this 6
  12486   |    6     |  @6
  12487   |          |  D=A
  12488   |    3     |  @3
  12489   |          |  D=D+M
  12490   | RAM[13]  |  @R13
  12491   |          |  M=D
  12492   |    0     |  @0
  12493   |          |  AM=M-1
  12494   |          |  D=M
  12495   | RAM[13]  |  @R13
  12496   |          |  A=M
  12497   |          |  M=D
          |          |        // push this 0
  12498   |    0     |  @0
  12499   |          |  D=A
  12500   |    3     |  @3
  12501   |          |  A=M
  12502   |          |  A=A+D
  12503   |          |  D=M
  12504   |    0     |  @0
  12505   |          |  A=M
  12506   |          |  M=D
  12507   |    0     |  @0
  12508   |          |  M=M+1
          |          |        // push this 6
  12509   |    6     |  @6
  12510   |          |  D=A
  12511   |    3     |  @3
  12512   |          |  A=M
  12513   |          |  A=A+D
  12514   |          |  D=M
  12515   |    0     |  @0
  12516   |          |  A=M
  12517   |          |  M=D
  12518   |    0     |  @0
  12519   |          |  M=M+1
          |          |        // call Bat.setWidth 2
  12520   |RAM[12568]|  @Bat.setWidth$ret.101
  12521   |          |  D=A
  12522   |    0     |  @0
  12523   |          |  A=M
  12524   |          |  M=D
  12525   |    0     |  @0
  12526   |          |  M=M+1
  12527   |    1     |  @1
  12528   |          |  D=M
  12529   |    0     |  @0
  12530   |          |  A=M
  12531   |          |  M=D
  12532   |    0     |  @0
  12533   |          |  M=M+1
  12534   |    2     |  @2
  12535   |          |  D=M
  12536   |    0     |  @0
  12537   |          |  A=M
  12538   |          |  M=D
  12539   |    0     |  @0
  12540   |          |  M=M+1
  12541   |    3     |  @3
  12542   |          |  D=M
  12543   |    0     |  @0
  12544   |          |  A=M
  12545   |          |  M=D
  12546   |    0     |  @0
  12547   |          |  M=M+1
  12548   |    4     |  @4
  12549   |          |  D=M
  12550   |    0     |  @0
  12551   |          |  A=M
  12552   |          |  M=D
  12553   |    0     |  @0
  12554   |          |  M=M+1
  12555   |    0     |  @0
  12556   |          |  D=M
  12557   |    2     |  @2
  12558   |          |  M=D
  12559   |    7     |  @7
  12560   |          |  D=A
  12561   |    2     |  @2
  12562   |          |  M=M-D
  12563   |    0     |  @0
  12564   |          |  D=M
  12565   |    1     |  @1
  12566   |          |  M=D
  12567   |RAM[6419] |  @Bat.setWidth
  12568   |          |  0;JMP
  12569   |ROM[12568]|  (Bat.setWidth$ret.101)
          |          |        // pop temp 0
  12569   |    0     |  @0
  12570   |          |  D=A
  12571   |    5     |  @5
  12572   |          |  D=D+A
  12573   | RAM[13]  |  @R13
  12574   |          |  M=D
  12575   |    0     |  @0
  12576   |          |  AM=M-1
  12577   |          |  D=M
  12578   | RAM[13]  |  @R13
  12579   |          |  A=M
  12580   |          |  M=D
          |          |        // push this 4
  12581   |    4     |  @4
  12582   |          |  D=A
  12583   |    3     |  @3
  12584   |          |  A=M
  12585   |          |  A=A+D
  12586   |          |  D=M
  12587   |    0     |  @0
  12588   |          |  A=M
  12589   |          |  M=D
  12590   |    0     |  @0
  12591   |          |  M=M+1
          |          |        // push constant 1
  12592   |    1     |  @1
  12593   |          |  D=A
  12594   |    0     |  @0
  12595   |          |  A=M
  12596   |          |  M=D
  12597   |    0     |  @0
  12598   |          |  M=M+1
          |          |        // add
  12599   |    0     |  @0
  12600   |          |  AM=M-1
  12601   |          |  D=M
  12602   |          |  A=A-1
  12603   |          |  M=M+D
          |          |        // pop this 4
  12604   |    4     |  @4
  12605   |          |  D=A
  12606   |    3     |  @3
  12607   |          |  D=D+M
  12608   | RAM[13]  |  @R13
  12609   |          |  M=D
  12610   |    0     |  @0
  12611   |          |  AM=M-1
  12612   |          |  D=M
  12613   | RAM[13]  |  @R13
  12614   |          |  A=M
  12615   |          |  M=D
          |          |        // push constant 22
  12616   |    22    |  @22
  12617   |          |  D=A
  12618   |    0     |  @0
  12619   |          |  A=M
  12620   |          |  M=D
  12621   |    0     |  @0
  12622   |          |  M=M+1
          |          |        // push constant 7
  12623   |    7     |  @7
  12624   |          |  D=A
  12625   |    0     |  @0
  12626   |          |  A=M
  12627   |          |  M=D
  12628   |    0     |  @0
  12629   |          |  M=M+1
          |          |        // call Output.moveCursor 2
  12630   |RAM[12678]|  @Output.moveCursor$ret.102
  12631   |          |  D=A
  12632   |    0     |  @0
  12633   |          |  A=M
  12634   |          |  M=D
  12635   |    0     |  @0
  12636   |          |  M=M+1
  12637   |    1     |  @1
  12638   |          |  D=M
  12639   |    0     |  @0
  12640   |          |  A=M
  12641   |          |  M=D
  12642   |    0     |  @0
  12643   |          |  M=M+1
  12644   |    2     |  @2
  12645   |          |  D=M
  12646   |    0     |  @0
  12647   |          |  A=M
  12648   |          |  M=D
  12649   |    0     |  @0
  12650   |          |  M=M+1
  12651   |    3     |  @3
  12652   |          |  D=M
  12653   |    0     |  @0
  12654   |          |  A=M
  12655   |          |  M=D
  12656   |    0     |  @0
  12657   |          |  M=M+1
  12658   |    4     |  @4
  12659   |          |  D=M
  12660   |    0     |  @0
  12661   |          |  A=M
  12662   |          |  M=D
  12663   |    0     |  @0
  12664   |          |  M=M+1
  12665   |    0     |  @0
  12666   |          |  D=M
  12667   |    2     |  @2
  12668   |          |  M=D
  12669   |    7     |  @7
  12670   |          |  D=A
  12671   |    2     |  @2
  12672   |          |  M=M-D
  12673   |    0     |  @0
  12674   |          |  D=M
  12675   |    1     |  @1
  12676   |          |  M=D
  12677   | RAM[25]  |  @Output.moveCursor
  12678   |          |  0;JMP
  12679   |ROM[12678]|  (Output.moveCursor$ret.102)
          |          |        // pop temp 0
  12679   |    0     |  @0
  12680   |          |  D=A
  12681   |    5     |  @5
  12682   |          |  D=D+A
  12683   | RAM[13]  |  @R13
  12684   |          |  M=D
  12685   |    0     |  @0
  12686   |          |  AM=M-1
  12687   |          |  D=M
  12688   | RAM[13]  |  @R13
  12689   |          |  A=M
  12690   |          |  M=D
          |          |        // push this 4
  12691   |    4     |  @4
  12692   |          |  D=A
  12693   |    3     |  @3
  12694   |          |  A=M
  12695   |          |  A=A+D
  12696   |          |  D=M
  12697   |    0     |  @0
  12698   |          |  A=M
  12699   |          |  M=D
  12700   |    0     |  @0
  12701   |          |  M=M+1
          |          |        // call Output.printInt 1
  12702   |RAM[12750]|  @Output.printInt$ret.103
  12703   |          |  D=A
  12704   |    0     |  @0
  12705   |          |  A=M
  12706   |          |  M=D
  12707   |    0     |  @0
  12708   |          |  M=M+1
  12709   |    1     |  @1
  12710   |          |  D=M
  12711   |    0     |  @0
  12712   |          |  A=M
  12713   |          |  M=D
  12714   |    0     |  @0
  12715   |          |  M=M+1
  12716   |    2     |  @2
  12717   |          |  D=M
  12718   |    0     |  @0
  12719   |          |  A=M
  12720   |          |  M=D
  12721   |    0     |  @0
  12722   |          |  M=M+1
  12723   |    3     |  @3
  12724   |          |  D=M
  12725   |    0     |  @0
  12726   |          |  A=M
  12727   |          |  M=D
  12728   |    0     |  @0
  12729   |          |  M=M+1
  12730   |    4     |  @4
  12731   |          |  D=M
  12732   |    0     |  @0
  12733   |          |  A=M
  12734   |          |  M=D
  12735   |    0     |  @0
  12736   |          |  M=M+1
  12737   |    0     |  @0
  12738   |          |  D=M
  12739   |    2     |  @2
  12740   |          |  M=D
  12741   |    6     |  @6
  12742   |          |  D=A
  12743   |    2     |  @2
  12744   |          |  M=M-D
  12745   |    0     |  @0
  12746   |          |  D=M
  12747   |    1     |  @1
  12748   |          |  M=D
  12749   | RAM[32]  |  @Output.printInt
  12750   |          |  0;JMP
  12751   |ROM[12750]|  (Output.printInt$ret.103)
          |          |        // pop temp 0
  12751   |    0     |  @0
  12752   |          |  D=A
  12753   |    5     |  @5
  12754   |          |  D=D+A
  12755   | RAM[13]  |  @R13
  12756   |          |  M=D
  12757   |    0     |  @0
  12758   |          |  AM=M-1
  12759   |          |  D=M
  12760   | RAM[13]  |  @R13
  12761   |          |  A=M
  12762   |          |  M=D
          |          |        // goto PongGame.moveBall_TRUE_2
  12763   |RAM[12764]|  @PongGame.moveBall_TRUE_2
  12764   |          |  0;JMP
          |          |        // label PongGame.moveBall_FALSE_2
  12765   |ROM[12764]|  (PongGame.moveBall_FALSE_2)
          |          |        // label PongGame.moveBall_TRUE_2
  12765   |ROM[12764]|  (PongGame.moveBall_TRUE_2)
          |          |        // goto PongGame.moveBall_TRUE_1
  12765   |RAM[12766]|  @PongGame.moveBall_TRUE_1
  12766   |          |  0;JMP
          |          |        // label PongGame.moveBall_FALSE_1
  12767   |ROM[12766]|  (PongGame.moveBall_FALSE_1)
          |          |        // label PongGame.moveBall_TRUE_1
  12767   |ROM[12766]|  (PongGame.moveBall_TRUE_1)
          |          |        // push this 1
  12767   |    1     |  @1
  12768   |          |  D=A
  12769   |    3     |  @3
  12770   |          |  A=M
  12771   |          |  A=A+D
  12772   |          |  D=M
  12773   |    0     |  @0
  12774   |          |  A=M
  12775   |          |  M=D
  12776   |    0     |  @0
  12777   |          |  M=M+1
          |          |        // push local 0
  12778   |    0     |  @0
  12779   |          |  D=A
  12780   |    1     |  @1
  12781   |          |  A=M
  12782   |          |  A=A+D
  12783   |          |  D=M
  12784   |    0     |  @0
  12785   |          |  A=M
  12786   |          |  M=D
  12787   |    0     |  @0
  12788   |          |  M=M+1
          |          |        // call Ball.bounce 2
  12789   |RAM[12837]|  @Ball.bounce$ret.104
  12790   |          |  D=A
  12791   |    0     |  @0
  12792   |          |  A=M
  12793   |          |  M=D
  12794   |    0     |  @0
  12795   |          |  M=M+1
  12796   |    1     |  @1
  12797   |          |  D=M
  12798   |    0     |  @0
  12799   |          |  A=M
  12800   |          |  M=D
  12801   |    0     |  @0
  12802   |          |  M=M+1
  12803   |    2     |  @2
  12804   |          |  D=M
  12805   |    0     |  @0
  12806   |          |  A=M
  12807   |          |  M=D
  12808   |    0     |  @0
  12809   |          |  M=M+1
  12810   |    3     |  @3
  12811   |          |  D=M
  12812   |    0     |  @0
  12813   |          |  A=M
  12814   |          |  M=D
  12815   |    0     |  @0
  12816   |          |  M=M+1
  12817   |    4     |  @4
  12818   |          |  D=M
  12819   |    0     |  @0
  12820   |          |  A=M
  12821   |          |  M=D
  12822   |    0     |  @0
  12823   |          |  M=M+1
  12824   |    0     |  @0
  12825   |          |  D=M
  12826   |    2     |  @2
  12827   |          |  M=D
  12828   |    7     |  @7
  12829   |          |  D=A
  12830   |    2     |  @2
  12831   |          |  M=M-D
  12832   |    0     |  @0
  12833   |          |  D=M
  12834   |    1     |  @1
  12835   |          |  M=D
  12836   |RAM[3366] |  @Ball.bounce
  12837   |          |  0;JMP
  12838   |ROM[12837]|  (Ball.bounce$ret.104)
          |          |        // pop temp 0
  12838   |    0     |  @0
  12839   |          |  D=A
  12840   |    5     |  @5
  12841   |          |  D=D+A
  12842   | RAM[13]  |  @R13
  12843   |          |  M=D
  12844   |    0     |  @0
  12845   |          |  AM=M-1
  12846   |          |  D=M
  12847   | RAM[13]  |  @R13
  12848   |          |  A=M
  12849   |          |  M=D
          |          |        // goto PongGame.moveBall_TRUE_0
  12850   |RAM[12851]|  @PongGame.moveBall_TRUE_0
  12851   |          |  0;JMP
          |          |        // label PongGame.moveBall_FALSE_0
  12852   |ROM[12851]|  (PongGame.moveBall_FALSE_0)
          |          |        // label PongGame.moveBall_TRUE_0
  12852   |ROM[12851]|  (PongGame.moveBall_TRUE_0)
          |          |        // push constant 0
  12852   |    0     |  @0
  12853   |          |  D=A
  12854   |    0     |  @0
  12855   |          |  A=M
  12856   |          |  M=D
  12857   |    0     |  @0
  12858   |          |  M=M+1
          |          |  
          |          |  
          |          |  
          |          |  
          |          |  
