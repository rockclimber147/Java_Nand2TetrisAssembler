@256
D=A
@0
M=D
@1
MD=-1
@2
MD=D-1
@3
MD=D-1
@4
MD=D-1
@Sys.init$ret.0
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
      // /**
      // * A graphical ball. Characterized by a screen location and distance of
      // * last destination. Has methods for drawing, erasing and moving on the screen.
      // * The ball is displayed as a filled, 6-by-6 pixles rectangle.
      // *//** Constructs a new ball with the given initial location and wall locations. *//*
      // FIELD  int     x          -> this     0
      // FIELD  int     y          -> this     1
      // FIELD  int     lengthx    -> this     2
      // FIELD  int     lengthy    -> this     3
      // FIELD  int     d          -> this     4
      // FIELD  int     straightD  -> this     5
      // FIELD  int     diagonalD  -> this     6
      // FIELD  boolean invert     -> this     7
      // FIELD  boolean positivex  -> this     8
      // FIELD  boolean positivey  -> this     9
      // FIELD  int     leftWall   -> this     10
      // FIELD  int     rightWall  -> this     11
      // FIELD  int     topWall    -> this     12
      // FIELD  int     bottomWall -> this     13
      // FIELD  int     wall       -> this     14
      // */
      // 
      // function Ball.new 0
(Ball.new)
@0
D=M
@1
M=D
      // /*
      // ARG    int Ax          -> argument 0
      // ARG    int Ay          -> argument 1
      // ARG    int AleftWall   -> argument 2
      // ARG    int ArightWall  -> argument 3
      // ARG    int AtopWall    -> argument 4
      // ARG    int AbottomWall -> argument 5
      // */
      // push constant 15
@15
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.1
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.1)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 10
@10
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 3
@3
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 6
@6
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 11
@11
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 4
@4
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 12
@12
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 5
@5
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 6
@6
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 13
@13
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 14
@14
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.show 1
@Ball.show$ret.2
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.show
0;JMP
(Ball.show$ret.2)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Deallocates the Ball's memory. */
      // function Ball.dispose 0
(Ball.dispose)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Memory.deAlloc 1
@Memory.deAlloc$ret.3
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.3)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Shows the ball. */
      // function Ball.show 0
(Ball.show)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.4
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.4)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.draw 1
@Ball.draw$ret.5
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.draw
0;JMP
(Ball.draw$ret.5)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Hides the ball. */
      // function Ball.hide 0
(Ball.hide)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.6
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.6)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.draw 1
@Ball.draw$ret.7
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.draw
0;JMP
(Ball.draw$ret.7)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Draws the ball. */
      // function Ball.draw 0
(Ball.draw)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.8
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.8)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Returns the ball's left edge. */
      // function Ball.getLeft 0
(Ball.getLeft)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Returns the ball's right edge. */
      // function Ball.getRight 0
(Ball.getRight)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Computes and sets the ball's destination. */
      // function Ball.setDestination 3
(Ball.setDestination)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
      // /*
      // ARG    Ball this  -> argument 0
      // ARG    int  destx -> argument 1
      // ARG    int  desty -> argument 2
      // VAR    int  dx    -> local    0
      // VAR    int  dy    -> local    1
      // VAR    int  temp  -> local    2
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 3
@3
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.abs 1
@Math.abs$ret.9
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.abs
0;JMP
(Math.abs$ret.9)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.abs 1
@Math.abs$ret.10
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.abs
0;JMP
(Math.abs$ret.10)
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T0
D;JLT
@0
A=M-1
M=0
(T0)
      // pop this 7
@7
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 7
@7
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.setDestination_FALSE_0
@0
AM=M-1
D=M
@Ball.setDestination_FALSE_0
D;JNE
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop local 2
@2
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T1
D;JLT
@0
A=M-1
M=0
(T1)
      // pop this 8
@8
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T2
D;JLT
@0
A=M-1
M=0
(T2)
      // pop this 9
@9
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.setDestination_TRUE_0
@Ball.setDestination_TRUE_0
0;JMP
      // label Ball.setDestination_FALSE_0
(Ball.setDestination_FALSE_0)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T3
D;JLT
@0
A=M-1
M=0
(T3)
      // pop this 8
@8
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T4
D;JLT
@0
A=M-1
M=0
(T4)
      // pop this 9
@9
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.setDestination_TRUE_0
(Ball.setDestination_TRUE_0)
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.11
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.11)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.12
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.12)
      // pop this 5
@5
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // call Math.multiply 2
@Math.multiply$ret.13
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.13)
      // pop this 6
@6
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /**
      // * Moves the ball one unit towards its destination.
      // * If the ball has reached a wall, returns 0.
      // * Else, returns a value according to the wall:
      // * 1 (left wall), 2 (right wall), 3 (top wall), 4 (bottom wall).
      // */
      // function Ball.move 0
(Ball.move)
@0
D=M
@1
M=D
      // /*
      // ARG    Ball this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.hide 1
@Ball.hide$ret.14
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.hide
0;JMP
(Ball.hide$ret.14)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T5
D;JLT
@0
A=M-1
M=0
(T5)
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_0
@0
AM=M-1
D=M
@Ball.move_FALSE_0
D;JNE
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 5
@5
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_0
@Ball.move_TRUE_0
0;JMP
      // label Ball.move_FALSE_0
(Ball.move_FALSE_0)
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 6
@6
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 9
@9
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_1
@0
AM=M-1
D=M
@Ball.move_FALSE_1
D;JNE
      // push this 7
@7
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_2
@0
AM=M-1
D=M
@Ball.move_FALSE_2
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_2
@Ball.move_TRUE_2
0;JMP
      // label Ball.move_FALSE_2
(Ball.move_FALSE_2)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.move_TRUE_2
(Ball.move_TRUE_2)
      // goto Ball.move_TRUE_1
@Ball.move_TRUE_1
0;JMP
      // label Ball.move_FALSE_1
(Ball.move_FALSE_1)
      // push this 7
@7
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_3
@0
AM=M-1
D=M
@Ball.move_FALSE_3
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_3
@Ball.move_TRUE_3
0;JMP
      // label Ball.move_FALSE_3
(Ball.move_FALSE_3)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.move_TRUE_3
(Ball.move_TRUE_3)
      // label Ball.move_TRUE_1
(Ball.move_TRUE_1)
      // label Ball.move_TRUE_0
(Ball.move_TRUE_0)
      // push this 8
@8
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_4
@0
AM=M-1
D=M
@Ball.move_FALSE_4
D;JNE
      // push this 7
@7
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_5
@0
AM=M-1
D=M
@Ball.move_FALSE_5
D;JNE
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_5
@Ball.move_TRUE_5
0;JMP
      // label Ball.move_FALSE_5
(Ball.move_FALSE_5)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.move_TRUE_5
(Ball.move_TRUE_5)
      // goto Ball.move_TRUE_4
@Ball.move_TRUE_4
0;JMP
      // label Ball.move_FALSE_4
(Ball.move_FALSE_4)
      // push this 7
@7
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_6
@0
AM=M-1
D=M
@Ball.move_FALSE_6
D;JNE
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_6
@Ball.move_TRUE_6
0;JMP
      // label Ball.move_FALSE_6
(Ball.move_FALSE_6)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.move_TRUE_6
(Ball.move_TRUE_6)
      // label Ball.move_TRUE_4
(Ball.move_TRUE_4)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 10
@10
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T6
D;JGT
@0
A=M-1
M=0
(T6)
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_7
@0
AM=M-1
D=M
@Ball.move_FALSE_7
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 14
@14
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 10
@10
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_7
@Ball.move_TRUE_7
0;JMP
      // label Ball.move_FALSE_7
(Ball.move_FALSE_7)
      // label Ball.move_TRUE_7
(Ball.move_TRUE_7)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 11
@11
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T7
D;JLT
@0
A=M-1
M=0
(T7)
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_8
@0
AM=M-1
D=M
@Ball.move_FALSE_8
D;JNE
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 14
@14
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 11
@11
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_8
@Ball.move_TRUE_8
0;JMP
      // label Ball.move_FALSE_8
(Ball.move_FALSE_8)
      // label Ball.move_TRUE_8
(Ball.move_TRUE_8)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 12
@12
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T8
D;JGT
@0
A=M-1
M=0
(T8)
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_9
@0
AM=M-1
D=M
@Ball.move_FALSE_9
D;JNE
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 14
@14
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 12
@12
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_9
@Ball.move_TRUE_9
0;JMP
      // label Ball.move_FALSE_9
(Ball.move_FALSE_9)
      // label Ball.move_TRUE_9
(Ball.move_TRUE_9)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 13
@13
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T9
D;JLT
@0
A=M-1
M=0
(T9)
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto Ball.move_FALSE_10
@0
AM=M-1
D=M
@Ball.move_FALSE_10
D;JNE
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 14
@14
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 13
@13
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.move_TRUE_10
@Ball.move_TRUE_10
0;JMP
      // label Ball.move_FALSE_10
(Ball.move_FALSE_10)
      // label Ball.move_TRUE_10
(Ball.move_TRUE_10)
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.show 1
@Ball.show$ret.15
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.show
0;JMP
(Ball.show$ret.15)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 14
@14
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /**
      // * Bounces off the current wall: sets the new destination
      // * of the ball according to the ball's angle and the given
      // * bouncing direction (-1/0/1=left/center/right or up/center/down).
      // */
      // function Ball.bounce 5
(Ball.bounce)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
      // /*
      // ARG    Ball this              -> argument 0
      // ARG    int  bouncingDirection -> argument 1
      // VAR    int  newx              -> local    0
      // VAR    int  newy              -> local    1
      // VAR    int  divLengthx        -> local    2
      // VAR    int  divLengthy        -> local    3
      // VAR    int  factor            -> local    4
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.16
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.16)
      // pop local 2
@2
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.17
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.17)
      // pop local 3
@3
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T10
D;JEQ
@0
A=M-1
M=0
(T10)
      // not
@0
A=M-1
M=!M
      // if-goto Ball.bounce_FALSE_0
@0
AM=M-1
D=M
@Ball.bounce_FALSE_0
D;JNE
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 4
@4
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.bounce_TRUE_0
@Ball.bounce_TRUE_0
0;JMP
      // label Ball.bounce_FALSE_0
(Ball.bounce_FALSE_0)
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T11
D;JLT
@0
A=M-1
M=0
(T11)
      // not
@0
A=M-1
M=!M
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T12
D;JEQ
@0
A=M-1
M=0
(T12)
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T13
D;JLT
@0
A=M-1
M=0
(T13)
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T14
D;JEQ
@0
A=M-1
M=0
(T14)
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // or
@0
AM=M-1
D=M
A=A-1
M=M|D
      // not
@0
A=M-1
M=!M
      // if-goto Ball.bounce_FALSE_1
@0
AM=M-1
D=M
@Ball.bounce_FALSE_1
D;JNE
      // push constant 20
@20
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 4
@4
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.bounce_TRUE_1
@Ball.bounce_TRUE_1
0;JMP
      // label Ball.bounce_FALSE_1
(Ball.bounce_FALSE_1)
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 4
@4
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.bounce_TRUE_1
(Ball.bounce_TRUE_1)
      // label Ball.bounce_TRUE_0
(Ball.bounce_TRUE_0)
      // push this 14
@14
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T15
D;JEQ
@0
A=M-1
M=0
(T15)
      // not
@0
A=M-1
M=!M
      // if-goto Ball.bounce_FALSE_2
@0
AM=M-1
D=M
@Ball.bounce_FALSE_2
D;JNE
      // push constant 506
@506
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 50
@50
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Math.multiply 2
@Math.multiply$ret.18
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.18)
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.19
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.19)
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.20
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.20)
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.bounce_TRUE_2
@Ball.bounce_TRUE_2
0;JMP
      // label Ball.bounce_FALSE_2
(Ball.bounce_FALSE_2)
      // push this 14
@14
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T16
D;JEQ
@0
A=M-1
M=0
(T16)
      // not
@0
A=M-1
M=!M
      // if-goto Ball.bounce_FALSE_3
@0
AM=M-1
D=M
@Ball.bounce_FALSE_3
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 50
@50
D=A
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.21
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.21)
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.22
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.22)
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.23
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.23)
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.bounce_TRUE_3
@Ball.bounce_TRUE_3
0;JMP
      // label Ball.bounce_FALSE_3
(Ball.bounce_FALSE_3)
      // push this 14
@14
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T17
D;JEQ
@0
A=M-1
M=0
(T17)
      // not
@0
A=M-1
M=!M
      // if-goto Ball.bounce_FALSE_4
@0
AM=M-1
D=M
@Ball.bounce_FALSE_4
D;JNE
      // push constant 250
@250
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 25
@25
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Math.multiply 2
@Math.multiply$ret.24
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.24)
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.25
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.25)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.26
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.26)
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Ball.bounce_TRUE_4
@Ball.bounce_TRUE_4
0;JMP
      // label Ball.bounce_FALSE_4
(Ball.bounce_FALSE_4)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 25
@25
D=A
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.27
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.27)
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.divide 2
@Math.divide$ret.28
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.28)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Math.multiply 2
@Math.multiply$ret.29
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.29)
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Ball.bounce_TRUE_4
(Ball.bounce_TRUE_4)
      // label Ball.bounce_TRUE_3
(Ball.bounce_TRUE_3)
      // label Ball.bounce_TRUE_2
(Ball.bounce_TRUE_2)
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.setDestination 3
@Ball.setDestination$ret.30
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@8
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.setDestination
0;JMP
(Ball.setDestination$ret.30)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





      // /**
      // * A graphical Pong bat.
      // * Displayed as a filled horizontal rectangle that has
      // * a screen location, a width and a height.
      // * Has methods for drawing, erasing, moving left and right,
      // * and changing its width (to make the hitting action more challenging).
      // * This class should have been called "paddle", following the
      // * standard Pong terminology. But, unaware of this terminology,
      // * we called it "bat", and then decided to stick to it.
      // *//** Constructs a new bat with the given location and width. *//*
      // FIELD  int x         -> this     0
      // FIELD  int y         -> this     1
      // FIELD  int width     -> this     2
      // FIELD  int height    -> this     3
      // FIELD  int direction -> this     4
      // */
      // 
      // function Bat.new 0
(Bat.new)
@0
D=M
@1
M=D
      // /*
      // ARG    int Ax      -> argument 0
      // ARG    int Ay      -> argument 1
      // ARG    int Awidth  -> argument 2
      // ARG    int Aheight -> argument 3
      // */
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.31
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.31)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 3
@3
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 3
@3
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.show 1
@Bat.show$ret.32
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.show
0;JMP
(Bat.show$ret.32)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Deallocates the object's memory. */
      // function Bat.dispose 0
(Bat.dispose)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Memory.deAlloc 1
@Memory.deAlloc$ret.33
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.33)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Shows the bat. */
      // function Bat.show 0
(Bat.show)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.34
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.34)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.draw 1
@Bat.draw$ret.35
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.draw
0;JMP
(Bat.draw$ret.35)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Hides the bat. */
      // function Bat.hide 0
(Bat.hide)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.36
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.36)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.draw 1
@Bat.draw$ret.37
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.draw
0;JMP
(Bat.draw$ret.37)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Draws the bat. */
      // function Bat.draw 0
(Bat.draw)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.38
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.38)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Sets the bat's direction (0=stop, 1=left, 2=right). */
      // function Bat.setDirection 0
(Bat.setDirection)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this       -> argument 0
      // ARG    int Adirection -> argument 1
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Returns the bat's left edge. */
      // function Bat.getLeft 0
(Bat.getLeft)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Returns the bat's right edge. */
      // function Bat.getRight 0
(Bat.getRight)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Sets the bat's width. */
      // function Bat.setWidth 0
(Bat.setWidth)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this   -> argument 0
      // ARG    int Awidth -> argument 1
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.hide 1
@Bat.hide$ret.39
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.hide
0;JMP
(Bat.hide$ret.39)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.show 1
@Bat.show$ret.40
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.show
0;JMP
(Bat.show$ret.40)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the bat one step in the bat's direction. */
      // function Bat.move 0
(Bat.move)
@0
D=M
@1
M=D
      // /*
      // ARG    Bat this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T18
D;JEQ
@0
A=M-1
M=0
(T18)
      // not
@0
A=M-1
M=!M
      // if-goto Bat.move_FALSE_0
@0
AM=M-1
D=M
@Bat.move_FALSE_0
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T19
D;JLT
@0
A=M-1
M=0
(T19)
      // not
@0
A=M-1
M=!M
      // if-goto Bat.move_FALSE_1
@0
AM=M-1
D=M
@Bat.move_FALSE_1
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Bat.move_TRUE_1
@Bat.move_TRUE_1
0;JMP
      // label Bat.move_FALSE_1
(Bat.move_FALSE_1)
      // label Bat.move_TRUE_1
(Bat.move_TRUE_1)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.41
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.41)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.42
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.42)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.43
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.43)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.44
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.44)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Bat.move_TRUE_0
@Bat.move_TRUE_0
0;JMP
      // label Bat.move_FALSE_0
(Bat.move_FALSE_0)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 511
@511
D=A
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T20
D;JGT
@0
A=M-1
M=0
(T20)
      // not
@0
A=M-1
M=!M
      // if-goto Bat.move_FALSE_2
@0
AM=M-1
D=M
@Bat.move_FALSE_2
D;JNE
      // push constant 511
@511
D=A
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Bat.move_TRUE_2
@Bat.move_TRUE_2
0;JMP
      // label Bat.move_FALSE_2
(Bat.move_FALSE_2)
      // label Bat.move_TRUE_2
(Bat.move_TRUE_2)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.45
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.45)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.46
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.46)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.47
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.47)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.48
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.48)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Bat.move_TRUE_0
(Bat.move_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





      // /**
      // * The main class of the Pong game.
      // *//** Initializes a Pong game and starts running it. *//*
      // */
      // 
      // function Main.main 1
(Main.main)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
      // /*
      // VAR    PongGame game -> local    0
      // */
      // call PongGame.newInstance 0
@PongGame.newInstance$ret.49
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.newInstance
0;JMP
(PongGame.newInstance$ret.49)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // call PongGame.getInstance 0
@PongGame.getInstance$ret.50
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.getInstance
0;JMP
(PongGame.getInstance$ret.50)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call PongGame.run 1
@PongGame.run$ret.51
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.run
0;JMP
(PongGame.run$ret.51)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call PongGame.dispose 1
@PongGame.dispose$ret.52
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.dispose
0;JMP
(PongGame.dispose$ret.52)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





      // /**
      // * Represents a Pong game.
      // *//** Constructs a new Pong game. *//*
      // STATIC PongGame instance -> static   0
      // FIELD  Bat      bat      -> this     0
      // FIELD  Ball     ball     -> this     1
      // FIELD  int      wall     -> this     2
      // FIELD  boolean  exit     -> this     3
      // FIELD  int      score    -> this     4
      // FIELD  int      lastWall -> this     5
      // FIELD  int      batWidth -> this     6
      // */
      // 
      // function PongGame.new 0
(PongGame.new)
@0
D=M
@1
M=D
      // /*
      // */
      // push constant 7
@7
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.53
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.53)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // call Screen.clearScreen 0
@Screen.clearScreen$ret.54
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.clearScreen
0;JMP
(Screen.clearScreen$ret.54)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 50
@50
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 6
@6
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 230
@230
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 229
@229
D=A
@0
A=M
M=D
@0
M=M+1
      // push this 6
@6
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 7
@7
D=A
@0
A=M
M=D
@0
M=M+1
      // call Bat.new 4
@Bat.new$ret.55
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.new
0;JMP
(Bat.new$ret.55)
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 253
@253
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 222
@222
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 511
@511
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 229
@229
D=A
@0
A=M
M=D
@0
M=M+1
      // call Ball.new 6
@Ball.new$ret.56
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@11
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.new
0;JMP
(Ball.new$ret.56)
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 400
@400
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Ball.setDestination 3
@Ball.setDestination$ret.57
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@8
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.setDestination
0;JMP
(Ball.setDestination$ret.57)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 238
@238
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 511
@511
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 240
@240
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.58
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.58)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 22
@22
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Output.moveCursor 2
@Output.moveCursor$ret.59
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret.59)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 8
@8
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.new 1
@String.new$ret.60
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.new
0;JMP
(String.new$ret.60)
      // push constant 83
@83
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.61
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.61)
      // push constant 99
@99
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.62
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.62)
      // push constant 111
@111
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.63
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.63)
      // push constant 114
@114
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.64
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.64)
      // push constant 101
@101
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.65
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.65)
      // push constant 58
@58
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.66
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.66)
      // push constant 32
@32
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.67
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.67)
      // push constant 48
@48
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.68
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.68)
      // call Output.printString 1
@Output.printString$ret.69
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.printString
0;JMP
(Output.printString$ret.69)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 3
@3
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 5
@5
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Deallocates the object's memory. */
      // function PongGame.dispose 0
(PongGame.dispose)
@0
D=M
@1
M=D
      // /*
      // ARG    PongGame this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.dispose 1
@Bat.dispose$ret.70
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.dispose
0;JMP
(Bat.dispose$ret.70)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.dispose 1
@Ball.dispose$ret.71
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.dispose
0;JMP
(Ball.dispose$ret.71)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Memory.deAlloc 1
@Memory.deAlloc$ret.72
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.72)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Creates an instance of Pong game, and stores it. */
      // function PongGame.newInstance 0
(PongGame.newInstance)
@0
D=M
@1
M=D
      // /*
      // */
      // call PongGame.new 0
@PongGame.new$ret.73
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.new
0;JMP
(PongGame.new$ret.73)
      // pop static 0
@0
AM=M-1
D=M
@PongGame.0
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Returns the single instance of this Pong game. */
      // function PongGame.getInstance 0
(PongGame.getInstance)
@0
D=M
@1
M=D
      // /*
      // */
      // push static 0
@PongGame.0
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Starts the game, and andles inputs from the user that control
      // *  the bat's movement direction. */
      // function PongGame.run 1
(PongGame.run)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
      // /*
      // ARG    PongGame this -> argument 0
      // VAR    char     key  -> local    0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // label PongGame.run_LOOP_START_0
(PongGame.run_LOOP_START_0)
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_LOOP_END_0
@0
AM=M-1
D=M
@PongGame.run_LOOP_END_0
D;JNE
      // label PongGame.run_LOOP_START_1
(PongGame.run_LOOP_START_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T21
D;JEQ
@0
A=M-1
M=0
(T21)
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_LOOP_END_1
@0
AM=M-1
D=M
@PongGame.run_LOOP_END_1
D;JNE
      // call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret.74
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret.74)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.move 1
@Bat.move$ret.75
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.move
0;JMP
(Bat.move$ret.75)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call PongGame.moveBall 1
@PongGame.moveBall$ret.76
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.moveBall
0;JMP
(PongGame.moveBall$ret.76)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 50
@50
D=A
@0
A=M
M=D
@0
M=M+1
      // call Sys.wait 1
@Sys.wait$ret.77
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.wait
0;JMP
(Sys.wait$ret.77)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_LOOP_START_1
@PongGame.run_LOOP_START_1
0;JMP
      // label PongGame.run_LOOP_END_1
(PongGame.run_LOOP_END_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 130
@130
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T22
D;JEQ
@0
A=M-1
M=0
(T22)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_FALSE_0
@0
AM=M-1
D=M
@PongGame.run_FALSE_0
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // call Bat.setDirection 2
@Bat.setDirection$ret.78
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.setDirection
0;JMP
(Bat.setDirection$ret.78)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_TRUE_0
@PongGame.run_TRUE_0
0;JMP
      // label PongGame.run_FALSE_0
(PongGame.run_FALSE_0)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 132
@132
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T23
D;JEQ
@0
A=M-1
M=0
(T23)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_FALSE_1
@0
AM=M-1
D=M
@PongGame.run_FALSE_1
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // call Bat.setDirection 2
@Bat.setDirection$ret.79
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.setDirection
0;JMP
(Bat.setDirection$ret.79)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_TRUE_1
@PongGame.run_TRUE_1
0;JMP
      // label PongGame.run_FALSE_1
(PongGame.run_FALSE_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 140
@140
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T24
D;JEQ
@0
A=M-1
M=0
(T24)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_FALSE_2
@0
AM=M-1
D=M
@PongGame.run_FALSE_2
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // pop this 3
@3
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_TRUE_2
@PongGame.run_TRUE_2
0;JMP
      // label PongGame.run_FALSE_2
(PongGame.run_FALSE_2)
      // label PongGame.run_TRUE_2
(PongGame.run_TRUE_2)
      // label PongGame.run_TRUE_1
(PongGame.run_TRUE_1)
      // label PongGame.run_TRUE_0
(PongGame.run_TRUE_0)
      // label PongGame.run_LOOP_START_3
(PongGame.run_LOOP_START_3)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T25
D;JEQ
@0
A=M-1
M=0
(T25)
      // not
@0
A=M-1
M=!M
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_LOOP_END_3
@0
AM=M-1
D=M
@PongGame.run_LOOP_END_3
D;JNE
      // call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret.80
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret.80)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.move 1
@Bat.move$ret.81
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.move
0;JMP
(Bat.move$ret.81)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call PongGame.moveBall 1
@PongGame.moveBall$ret.82
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@PongGame.moveBall
0;JMP
(PongGame.moveBall$ret.82)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 50
@50
D=A
@0
A=M
M=D
@0
M=M+1
      // call Sys.wait 1
@Sys.wait$ret.83
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.wait
0;JMP
(Sys.wait$ret.83)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_LOOP_START_3
@PongGame.run_LOOP_START_3
0;JMP
      // label PongGame.run_LOOP_END_3
(PongGame.run_LOOP_END_3)
      // goto PongGame.run_LOOP_START_0
@PongGame.run_LOOP_START_0
0;JMP
      // label PongGame.run_LOOP_END_0
(PongGame.run_LOOP_END_0)
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.run_FALSE_3
@0
AM=M-1
D=M
@PongGame.run_FALSE_3
D;JNE
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 27
@27
D=A
@0
A=M
M=D
@0
M=M+1
      // call Output.moveCursor 2
@Output.moveCursor$ret.84
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret.84)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 9
@9
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.new 1
@String.new$ret.85
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.new
0;JMP
(String.new$ret.85)
      // push constant 71
@71
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.86
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.86)
      // push constant 97
@97
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.87
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.87)
      // push constant 109
@109
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.88
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.88)
      // push constant 101
@101
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.89
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.89)
      // push constant 32
@32
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.90
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.90)
      // push constant 79
@79
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.91
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.91)
      // push constant 118
@118
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.92
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.92)
      // push constant 101
@101
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.93
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.93)
      // push constant 114
@114
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.94
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.94)
      // call Output.printString 1
@Output.printString$ret.95
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.printString
0;JMP
(Output.printString$ret.95)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.run_TRUE_3
@PongGame.run_TRUE_3
0;JMP
      // label PongGame.run_FALSE_3
(PongGame.run_FALSE_3)
      // label PongGame.run_TRUE_3
(PongGame.run_TRUE_3)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /**
      // * Handles ball movement, including bouncing.
      // * If the ball bounces off a wall, finds its new direction.
      // * If the ball bounces off the bat, increases the score by one
      // * and shrinks the bat's size, to make the game more challenging.
      // */
      // function PongGame.moveBall 5
(PongGame.moveBall)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
      // /*
      // ARG    PongGame this              -> argument 0
      // VAR    int      bouncingDirection -> local    0
      // VAR    int      batLeft           -> local    1
      // VAR    int      batRight          -> local    2
      // VAR    int      ballLeft          -> local    3
      // VAR    int      ballRight         -> local    4
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.move 1
@Ball.move$ret.96
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.move
0;JMP
(Ball.move$ret.96)
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T26
D;JGT
@0
A=M-1
M=0
(T26)
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 5
@5
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T27
D;JEQ
@0
A=M-1
M=0
(T27)
      // not
@0
A=M-1
M=!M
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.moveBall_FALSE_0
@0
AM=M-1
D=M
@PongGame.moveBall_FALSE_0
D;JNE
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 5
@5
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.getLeft 1
@Bat.getLeft$ret.97
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.getLeft
0;JMP
(Bat.getLeft$ret.97)
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.getRight 1
@Bat.getRight$ret.98
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.getRight
0;JMP
(Bat.getRight$ret.98)
      // pop local 2
@2
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.getLeft 1
@Ball.getLeft$ret.99
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.getLeft
0;JMP
(Ball.getLeft$ret.99)
      // pop local 3
@3
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.getRight 1
@Ball.getRight$ret.100
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.getRight
0;JMP
(Ball.getRight$ret.100)
      // pop local 4
@4
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T28
D;JEQ
@0
A=M-1
M=0
(T28)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.moveBall_FALSE_1
@0
AM=M-1
D=M
@PongGame.moveBall_FALSE_1
D;JNE
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T29
D;JGT
@0
A=M-1
M=0
(T29)
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T30
D;JLT
@0
A=M-1
M=0
(T30)
      // or
@0
AM=M-1
D=M
A=A-1
M=M|D
      // pop this 3
@3
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 3
@3
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.moveBall_FALSE_2
@0
AM=M-1
D=M
@PongGame.moveBall_FALSE_2
D;JNE
      // push local 4
@4
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T31
D;JLT
@0
A=M-1
M=0
(T31)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.moveBall_FALSE_3
@0
AM=M-1
D=M
@PongGame.moveBall_FALSE_3
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.moveBall_TRUE_3
@PongGame.moveBall_TRUE_3
0;JMP
      // label PongGame.moveBall_FALSE_3
(PongGame.moveBall_FALSE_3)
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 2
@2
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 10
@10
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T32
D;JGT
@0
A=M-1
M=0
(T32)
      // not
@0
A=M-1
M=!M
      // if-goto PongGame.moveBall_FALSE_4
@0
AM=M-1
D=M
@PongGame.moveBall_FALSE_4
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.moveBall_TRUE_4
@PongGame.moveBall_TRUE_4
0;JMP
      // label PongGame.moveBall_FALSE_4
(PongGame.moveBall_FALSE_4)
      // label PongGame.moveBall_TRUE_4
(PongGame.moveBall_TRUE_4)
      // label PongGame.moveBall_TRUE_3
(PongGame.moveBall_TRUE_3)
      // push this 6
@6
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 6
@6
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 6
@6
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Bat.setWidth 2
@Bat.setWidth$ret.101
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Bat.setWidth
0;JMP
(Bat.setWidth$ret.101)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 4
@4
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 22
@22
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 7
@7
D=A
@0
A=M
M=D
@0
M=M+1
      // call Output.moveCursor 2
@Output.moveCursor$ret.102
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret.102)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 4
@4
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Output.printInt 1
@Output.printInt$ret.103
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Output.printInt
0;JMP
(Output.printInt$ret.103)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.moveBall_TRUE_2
@PongGame.moveBall_TRUE_2
0;JMP
      // label PongGame.moveBall_FALSE_2
(PongGame.moveBall_FALSE_2)
      // label PongGame.moveBall_TRUE_2
(PongGame.moveBall_TRUE_2)
      // goto PongGame.moveBall_TRUE_1
@PongGame.moveBall_TRUE_1
0;JMP
      // label PongGame.moveBall_FALSE_1
(PongGame.moveBall_FALSE_1)
      // label PongGame.moveBall_TRUE_1
(PongGame.moveBall_TRUE_1)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Ball.bounce 2
@Ball.bounce$ret.104
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Ball.bounce
0;JMP
(Ball.bounce$ret.104)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto PongGame.moveBall_TRUE_0
@PongGame.moveBall_TRUE_0
0;JMP
      // label PongGame.moveBall_FALSE_0
(PongGame.moveBall_FALSE_0)
      // label PongGame.moveBall_TRUE_0
(PongGame.moveBall_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





